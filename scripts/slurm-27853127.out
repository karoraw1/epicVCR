/home-3/karoraw1@jhu.edu/scratch/miniconda2/envs/metawrap2-env/bin/metawrap-modules/binning.sh -t 24 --maxbin2 -a /home-3/karoraw1@jhu.edu/scratch/Processed_data_group/SERC_051717_Shotgun_Metagenomes/CoAssembly/final.contigs.fa -o ../data/Bins /home-3/karoraw1@jhu.edu/scratch/Processed_data_group/SERC_051717_Shotgun_Metagenomes/QCd/QC_Renamed_Seqs/SERC_517_10_1.fastq /home-3/karoraw1@jhu.edu/scratch/Processed_data_group/SERC_051717_Shotgun_Metagenomes/QCd/QC_Renamed_Seqs/SERC_517_10_2.fastq /home-3/karoraw1@jhu.edu/scratch/Processed_data_group/SERC_051717_Shotgun_Metagenomes/QCd/QC_Renamed_Seqs/SERC_517_11_1.fastq /home-3/karoraw1@jhu.edu/scratch/Processed_data_group/SERC_051717_Shotgun_Metagenomes/QCd/QC_Renamed_Seqs/SERC_517_11_2.fastq /home-3/karoraw1@jhu.edu/scratch/Processed_data_group/SERC_051717_Shotgun_Metagenomes/QCd/QC_Renamed_Seqs/SERC_517_12_1.fastq /home-3/karoraw1@jhu.edu/scratch/Processed_data_group/SERC_051717_Shotgun_Metagenomes/QCd/QC_Renamed_Seqs/SERC_517_12_2.fastq /home-3/karoraw1@jhu.edu/scratch/Processed_data_group/SERC_051717_Shotgun_Metagenomes/QCd/QC_Renamed_Seqs/SERC_517_13_1.fastq /home-3/karoraw1@jhu.edu/scratch/Processed_data_group/SERC_051717_Shotgun_Metagenomes/QCd/QC_Renamed_Seqs/SERC_517_13_2.fastq /home-3/karoraw1@jhu.edu/scratch/Processed_data_group/SERC_051717_Shotgun_Metagenomes/QCd/QC_Renamed_Seqs/SERC_517_3_1.fastq /home-3/karoraw1@jhu.edu/scratch/Processed_data_group/SERC_051717_Shotgun_Metagenomes/QCd/QC_Renamed_Seqs/SERC_517_3_2.fastq /home-3/karoraw1@jhu.edu/scratch/Processed_data_group/SERC_051717_Shotgun_Metagenomes/QCd/QC_Renamed_Seqs/SERC_517_4_1.fastq /home-3/karoraw1@jhu.edu/scratch/Processed_data_group/SERC_051717_Shotgun_Metagenomes/QCd/QC_Renamed_Seqs/SERC_517_4_2.fastq /home-3/karoraw1@jhu.edu/scratch/Processed_data_group/SERC_051717_Shotgun_Metagenomes/QCd/QC_Renamed_Seqs/SERC_517_5_1.fastq /home-3/karoraw1@jhu.edu/scratch/Processed_data_group/SERC_051717_Shotgun_Metagenomes/QCd/QC_Renamed_Seqs/SERC_517_5_2.fastq /home-3/karoraw1@jhu.edu/scratch/Processed_data_group/SERC_051717_Shotgun_Metagenomes/QCd/QC_Renamed_Seqs/SERC_517_6_1.fastq /home-3/karoraw1@jhu.edu/scratch/Processed_data_group/SERC_051717_Shotgun_Metagenomes/QCd/QC_Renamed_Seqs/SERC_517_6_2.fastq /home-3/karoraw1@jhu.edu/scratch/Processed_data_group/SERC_051717_Shotgun_Metagenomes/QCd/QC_Renamed_Seqs/SERC_517_7_1.fastq /home-3/karoraw1@jhu.edu/scratch/Processed_data_group/SERC_051717_Shotgun_Metagenomes/QCd/QC_Renamed_Seqs/SERC_517_7_2.fastq /home-3/karoraw1@jhu.edu/scratch/Processed_data_group/SERC_051717_Shotgun_Metagenomes/QCd/QC_Renamed_Seqs/SERC_517_8_1.fastq /home-3/karoraw1@jhu.edu/scratch/Processed_data_group/SERC_051717_Shotgun_Metagenomes/QCd/QC_Renamed_Seqs/SERC_517_8_2.fastq /home-3/karoraw1@jhu.edu/scratch/Processed_data_group/SERC_051717_Shotgun_Metagenomes/QCd/QC_Renamed_Seqs/SERC_517_9_1.fastq /home-3/karoraw1@jhu.edu/scratch/Processed_data_group/SERC_051717_Shotgun_Metagenomes/QCd/QC_Renamed_Seqs/SERC_517_9_2.fastq /home-3/karoraw1@jhu.edu/scratch/Processed_data_group/SERC_051717_Shotgun_Metagenomes/QCd/QC_Renamed_Seqs/SERC_Zymo_Pos_Control_1.fastq /home-3/karoraw1@jhu.edu/scratch/Processed_data_group/SERC_051717_Shotgun_Metagenomes/QCd/QC_Renamed_Seqs/SERC_Zymo_Pos_Control_2.fastq /home-3/karoraw1@jhu.edu/scratch/Processed_data_group/CB33_Summer17_NexteraXT/QCd/QC_Renamed_Seqs/CB_Zymo_Cellular_Ctrl_1.fastq /home-3/karoraw1@jhu.edu/scratch/Processed_data_group/CB33_Summer17_NexteraXT/QCd/QC_Renamed_Seqs/CB_Zymo_Cellular_Ctrl_2.fastq /home-3/karoraw1@jhu.edu/scratch/Processed_data_group/CB33_Summer17_NexteraXT/QCd/QC_Renamed_Seqs/CB_Zymo_DNA_Ctrl_1.fastq /home-3/karoraw1@jhu.edu/scratch/Processed_data_group/CB33_Summer17_NexteraXT/QCd/QC_Renamed_Seqs/CB_Zymo_DNA_Ctrl_2.fastq /home-3/karoraw1@jhu.edu/scratch/Processed_data_group/CB33_Summer17_NexteraXT/QCd/QC_Renamed_Seqs/SERC_051717_Sample11_1.fastq /home-3/karoraw1@jhu.edu/scratch/Processed_data_group/CB33_Summer17_NexteraXT/QCd/QC_Renamed_Seqs/SERC_051717_Sample11_2.fastq

------------------------------------------------------------------------------------------------------------------------
-----                                 15 forward and 15 reverse read files detected                                -----
------------------------------------------------------------------------------------------------------------------------


########################################################################################################################
#####                                     ALIGNING READS TO MAKE COVERAGE FILES                                    #####
########################################################################################################################


------------------------------------------------------------------------------------------------------------------------
-----                                         making copy of assembly file                                         -----
-----/home-3/karoraw1@jhu.edu/scratch/Processed_data_group/SERC_051717_Shotgun_Metagenomes/CoAssembly/final.contigs.fa-----
------------------------------------------------------------------------------------------------------------------------


------------------------------------------------------------------------------------------------------------------------
-----                                            Indexing assembly file                                            -----
------------------------------------------------------------------------------------------------------------------------

[bwa_index] Pack FASTA... 8.94 sec
[bwa_index] Construct BWT for the packed sequence...
[BWTIncCreate] textLength=2027535318, availableWord=154664508
[BWTIncConstructFromPacked] 10 iterations done. 99999990 characters processed.
[BWTIncConstructFromPacked] 20 iterations done. 199999990 characters processed.
[BWTIncConstructFromPacked] 30 iterations done. 299999990 characters processed.
[BWTIncConstructFromPacked] 40 iterations done. 399999990 characters processed.
[BWTIncConstructFromPacked] 50 iterations done. 499999990 characters processed.
[BWTIncConstructFromPacked] 60 iterations done. 599999990 characters processed.
[BWTIncConstructFromPacked] 70 iterations done. 699999990 characters processed.
[BWTIncConstructFromPacked] 80 iterations done. 799999990 characters processed.
[BWTIncConstructFromPacked] 90 iterations done. 899999990 characters processed.
[BWTIncConstructFromPacked] 100 iterations done. 999999990 characters processed.
[BWTIncConstructFromPacked] 110 iterations done. 1099999990 characters processed.
[BWTIncConstructFromPacked] 120 iterations done. 1199999990 characters processed.
[BWTIncConstructFromPacked] 130 iterations done. 1299999990 characters processed.
[BWTIncConstructFromPacked] 140 iterations done. 1398603878 characters processed.
[BWTIncConstructFromPacked] 150 iterations done. 1487622054 characters processed.
[BWTIncConstructFromPacked] 160 iterations done. 1566737622 characters processed.
[BWTIncConstructFromPacked] 170 iterations done. 1637051734 characters processed.
[BWTIncConstructFromPacked] 180 iterations done. 1699543126 characters processed.
[BWTIncConstructFromPacked] 190 iterations done. 1755081558 characters processed.
[BWTIncConstructFromPacked] 200 iterations done. 1804440262 characters processed.
[BWTIncConstructFromPacked] 210 iterations done. 1848306374 characters processed.
[BWTIncConstructFromPacked] 220 iterations done. 1887290694 characters processed.
[BWTIncConstructFromPacked] 230 iterations done. 1921936022 characters processed.
[BWTIncConstructFromPacked] 240 iterations done. 1952724822 characters processed.
[BWTIncConstructFromPacked] 250 iterations done. 1980085974 characters processed.
[BWTIncConstructFromPacked] 260 iterations done. 2004400582 characters processed.
[BWTIncConstructFromPacked] 270 iterations done. 2026007446 characters processed.
[bwa_index] 980.34 seconds elapse.
[bwa_index] Update BWT... 7.10 sec
[bwa_index] Pack forward-only FASTA... 5.77 sec
[bwa_index] Construct SA from BWT and Occ... 315.80 sec
[bwt_gen] Finished constructing BWT in 271 iterations.
[main] Version: 0.7.15-r1140
[main] CMD: bwa index ../data/Bins/work_files/assembly.fa
[main] Real time: 1343.361 sec; CPU: 1317.959 sec

------------------------------------------------------------------------------------------------------------------------
-----                                                   Aligning                                                   -----
-----/home-3/karoraw1@jhu.edu/scratch/Processed_data_group/SERC_051717_Shotgun_Metagenomes/QCd/QC_Renamed_Seqs/SERC_517_10_1.fastq-----
-----                                                     and                                                      -----
-----/home-3/karoraw1@jhu.edu/scratch/Processed_data_group/SERC_051717_Shotgun_Metagenomes/QCd/QC_Renamed_Seqs/SERC_517_10_2.fastq-----
-----             back to assembly, sorting the alignment, and gathering statistics on insert lengths              -----
------------------------------------------------------------------------------------------------------------------------

[M::bwa_idx_load_from_disk] read 0 ALT contigs
[M::process] read 1158640 sequences (240000171 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (14, 382044, 40, 9)
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (17, 181, 476)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1394)
[M::mem_pestat] mean and std.dev: (139.55, 153.97)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1853)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (162, 212, 280)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 516)
[M::mem_pestat] mean and std.dev: (223.47, 91.31)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 634)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (72, 380, 901)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 2559)
[M::mem_pestat] mean and std.dev: (406.62, 473.74)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 3388)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1158640 reads in 418.219 CPU sec, 24.139 real sec
[M::process] read 1189822 sequences (240000161 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (12, 351042, 158, 8)
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (21, 57, 147)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 399)
[M::mem_pestat] mean and std.dev: (85.42, 93.02)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 525)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (153, 201, 267)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 495)
[M::mem_pestat] mean and std.dev: (212.39, 87.83)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 609)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (32, 54, 97)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 227)
[M::mem_pestat] mean and std.dev: (53.91, 34.21)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 292)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1189822 reads in 492.743 CPU sec, 23.767 real sec
[M::process] read 1152548 sequences (240000309 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (5, 362199, 284, 11)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (158, 209, 277)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 515)
[M::mem_pestat] mean and std.dev: (219.86, 93.37)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 634)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (12, 26, 43)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 105)
[M::mem_pestat] mean and std.dev: (26.37, 18.11)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 136)
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (28, 177, 253)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 703)
[M::mem_pestat] mean and std.dev: (170.18, 169.78)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 928)
[M::mem_pestat] skip orientation RF
[M::mem_pestat] skip orientation RR
[M::mem_process_seqs] Processed 1152548 reads in 434.979 CPU sec, 19.146 real sec
[M::process] read 1148740 sequences (240000428 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (4, 379694, 35, 8)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (162, 211, 280)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 516)
[M::mem_pestat] mean and std.dev: (223.30, 91.72)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 634)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (49, 522, 4960)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 14782)
[M::mem_pestat] mean and std.dev: (1731.26, 2456.61)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 19693)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1148740 reads in 406.446 CPU sec, 17.910 real sec
[M::process] read 1159274 sequences (240000259 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (6, 383276, 21, 10)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (161, 210, 278)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 512)
[M::mem_pestat] mean and std.dev: (221.97, 90.77)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 629)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (63, 547, 5035)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 14979)
[M::mem_pestat] mean and std.dev: (2020.24, 2544.62)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 19951)
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (14, 33, 37)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 83)
[M::mem_pestat] mean and std.dev: (22.38, 13.11)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 106)
[M::mem_pestat] skip orientation RF
[M::mem_pestat] skip orientation RR
[M::mem_process_seqs] Processed 1159274 reads in 409.934 CPU sec, 17.978 real sec
[M::process] read 1172220 sequences (240000073 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (6, 381735, 96, 5)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (161, 209, 275)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 503)
[M::mem_pestat] mean and std.dev: (220.74, 88.07)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 617)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (38, 76, 339)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 941)
[M::mem_pestat] mean and std.dev: (152.16, 208.83)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1242)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1172220 reads in 438.875 CPU sec, 19.335 real sec
[M::process] read 1182482 sequences (240000400 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (10, 377645, 103, 6)
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (34, 122, 255)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 697)
[M::mem_pestat] mean and std.dev: (120.56, 100.76)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 918)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (154, 202, 267)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 493)
[M::mem_pestat] mean and std.dev: (213.15, 86.78)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 606)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (41, 74, 132)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 314)
[M::mem_pestat] mean and std.dev: (66.75, 42.32)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 405)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1182482 reads in 475.417 CPU sec, 20.908 real sec
[M::process] read 1173740 sequences (240000487 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (7, 367648, 99, 5)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (153, 202, 268)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 498)
[M::mem_pestat] mean and std.dev: (213.39, 88.37)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 613)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (45, 68, 187)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 471)
[M::mem_pestat] mean and std.dev: (84.82, 83.46)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 613)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1173740 reads in 479.984 CPU sec, 21.138 real sec
[M::process] read 1144574 sequences (240000287 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (8, 377049, 37, 3)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (163, 214, 283)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 523)
[M::mem_pestat] mean and std.dev: (226.19, 93.00)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 643)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (50, 78, 1348)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 3944)
[M::mem_pestat] mean and std.dev: (281.58, 506.62)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 5242)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1144574 reads in 413.111 CPU sec, 18.166 real sec
[M::process] read 1154116 sequences (240000317 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (9, 380529, 30, 6)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (162, 212, 281)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 519)
[M::mem_pestat] mean and std.dev: (224.12, 91.71)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 638)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (47, 152, 721)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 2069)
[M::mem_pestat] mean and std.dev: (215.84, 270.42)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 2743)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1154116 reads in 417.345 CPU sec, 18.383 real sec
[M::process] read 1157368 sequences (240000424 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (6, 369696, 390, 8)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (161, 211, 279)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 515)
[M::mem_pestat] mean and std.dev: (222.72, 91.24)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 633)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (16, 33, 57)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 139)
[M::mem_pestat] mean and std.dev: (35.44, 25.03)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 180)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1157368 reads in 469.079 CPU sec, 20.624 real sec
[M::process] read 1137016 sequences (240000086 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (4, 375621, 31, 6)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (163, 215, 286)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 532)
[M::mem_pestat] mean and std.dev: (227.55, 94.71)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 655)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (60, 255, 1233)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 3579)
[M::mem_pestat] mean and std.dev: (537.85, 752.74)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 4752)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1137016 reads in 411.571 CPU sec, 18.139 real sec
[M::process] read 1139046 sequences (240000043 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (9, 376926, 21, 9)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (163, 214, 284)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 526)
[M::mem_pestat] mean and std.dev: (226.34, 93.80)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 647)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (220, 504, 1088)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 2824)
[M::mem_pestat] mean and std.dev: (431.47, 316.70)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 3692)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1139046 reads in 410.249 CPU sec, 18.041 real sec
[M::process] read 1144204 sequences (240000238 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (5, 378436, 21, 4)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (163, 213, 282)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 520)
[M::mem_pestat] mean and std.dev: (225.02, 92.63)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 639)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (47, 74, 791)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 2279)
[M::mem_pestat] mean and std.dev: (238.11, 328.03)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 3023)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1144204 reads in 412.415 CPU sec, 18.159 real sec
[M::process] read 1162054 sequences (240000227 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (4, 381008, 46, 5)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (162, 212, 279)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 513)
[M::mem_pestat] mean and std.dev: (223.39, 90.53)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 630)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (39, 92, 655)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1887)
[M::mem_pestat] mean and std.dev: (264.80, 415.50)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 2503)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1162054 reads in 424.066 CPU sec, 18.648 real sec
[M::process] read 1034594 sequences (212609150 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (5, 337654, 63, 3)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (161, 210, 276)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 506)
[M::mem_pestat] mean and std.dev: (221.54, 88.80)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 621)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (49, 73, 260)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 682)
[M::mem_pestat] mean and std.dev: (86.42, 88.50)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 893)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1034594 reads in 392.901 CPU sec, 17.235 real sec
[main] Version: 0.7.15-r1140
[main] CMD: bwa mem -t 24 ../data/Bins/work_files/assembly.fa /home-3/karoraw1@jhu.edu/scratch/Processed_data_group/SERC_051717_Shotgun_Metagenomes/QCd/QC_Renamed_Seqs/SERC_517_10_1.fastq /home-3/karoraw1@jhu.edu/scratch/Processed_data_group/SERC_051717_Shotgun_Metagenomes/QCd/QC_Renamed_Seqs/SERC_517_10_2.fastq
[main] Real time: 884.931 sec; CPU: 6946.274 sec
[bam_sort_core] merging from 0 files and 24 in-memory blocks...

------------------------------------------------------------------------------------------------------------------------
-----                                                   Aligning                                                   -----
-----/home-3/karoraw1@jhu.edu/scratch/Processed_data_group/SERC_051717_Shotgun_Metagenomes/QCd/QC_Renamed_Seqs/SERC_517_11_1.fastq-----
-----                                                     and                                                      -----
-----/home-3/karoraw1@jhu.edu/scratch/Processed_data_group/SERC_051717_Shotgun_Metagenomes/QCd/QC_Renamed_Seqs/SERC_517_11_2.fastq-----
-----             back to assembly, sorting the alignment, and gathering statistics on insert lengths              -----
------------------------------------------------------------------------------------------------------------------------

[M::bwa_idx_load_from_disk] read 0 ALT contigs
[M::process] read 1113202 sequences (240000390 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (9, 317405, 61, 11)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (174, 239, 327)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 633)
[M::mem_pestat] mean and std.dev: (254.07, 117.16)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 786)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (70, 382, 2803)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 8269)
[M::mem_pestat] mean and std.dev: (1482.25, 1986.21)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 11002)
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (26, 44, 313)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 887)
[M::mem_pestat] mean and std.dev: (165.27, 188.39)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1174)
[M::mem_pestat] skip orientation RF
[M::mem_pestat] skip orientation RR
[M::process] read 1109222 sequences (240000153 bp)...
[M::mem_process_seqs] Processed 1113202 reads in 489.088 CPU sec, 27.434 real sec
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (9, 305133, 114, 9)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (170, 235, 324)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 632)
[M::mem_pestat] mean and std.dev: (250.90, 117.45)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 786)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (32, 63, 640)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1856)
[M::mem_pestat] mean and std.dev: (221.81, 397.25)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 2464)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1109222 reads in 497.355 CPU sec, 23.528 real sec
[M::process] read 1095154 sequences (240000298 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (10, 316078, 65, 10)
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (22, 296, 361)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1039)
[M::mem_pestat] mean and std.dev: (197.30, 160.56)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1378)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (175, 240, 329)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 637)
[M::mem_pestat] mean and std.dev: (255.55, 118.94)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 791)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (36, 182, 737)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 2139)
[M::mem_pestat] mean and std.dev: (301.00, 406.82)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 2840)
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (15, 30, 94)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 252)
[M::mem_pestat] mean and std.dev: (50.78, 58.42)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 331)
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_pestat] skip orientation RR
[M::mem_process_seqs] Processed 1095154 reads in 472.146 CPU sec, 20.766 real sec
[M::process] read 1113116 sequences (240000095 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (21, 318061, 68, 9)
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (20, 131, 280)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 800)
[M::mem_pestat] mean and std.dev: (162.25, 167.99)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1060)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (174, 237, 324)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 624)
[M::mem_pestat] mean and std.dev: (252.00, 115.73)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 774)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (38, 79, 542)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1550)
[M::mem_pestat] mean and std.dev: (189.52, 295.64)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 2054)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1113116 reads in 482.497 CPU sec, 21.165 real sec
[M::process] read 1132024 sequences (240000079 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (11, 311470, 126, 6)
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (109, 232, 780)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 2122)
[M::mem_pestat] mean and std.dev: (364.82, 330.75)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 2793)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (168, 228, 310)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 594)
[M::mem_pestat] mean and std.dev: (242.43, 108.74)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 736)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (42, 64, 137)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 327)
[M::mem_pestat] mean and std.dev: (71.37, 56.02)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 422)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1132024 reads in 516.392 CPU sec, 22.630 real sec
[M::process] read 1101452 sequences (240000328 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (20, 308671, 61, 10)
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (15, 37, 327)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 951)
[M::mem_pestat] mean and std.dev: (162.10, 229.31)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1263)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (175, 240, 330)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 640)
[M::mem_pestat] mean and std.dev: (256.25, 118.60)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 795)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (53, 149, 986)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 2852)
[M::mem_pestat] mean and std.dev: (311.16, 460.46)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 3785)
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (17, 44, 133)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 365)
[M::mem_pestat] mean and std.dev: (76.60, 73.48)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 481)
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_pestat] skip orientation RR
[M::mem_process_seqs] Processed 1101452 reads in 491.608 CPU sec, 21.616 real sec
[M::process] read 1098896 sequences (240000393 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (21, 315287, 70, 7)
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (6, 28, 119)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 345)
[M::mem_pestat] mean and std.dev: (48.42, 47.83)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 458)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (176, 241, 331)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 641)
[M::mem_pestat] mean and std.dev: (257.06, 119.05)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 796)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (39, 144, 468)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1326)
[M::mem_pestat] mean and std.dev: (192.50, 231.47)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1755)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1098896 reads in 480.081 CPU sec, 21.122 real sec
[M::process] read 1091348 sequences (240000244 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (15, 308766, 236, 13)
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (22, 62, 213)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 595)
[M::mem_pestat] mean and std.dev: (115.93, 130.79)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 786)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (176, 243, 336)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 656)
[M::mem_pestat] mean and std.dev: (260.10, 122.80)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 816)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (17, 33, 64)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 158)
[M::mem_pestat] mean and std.dev: (34.54, 26.00)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 205)
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (18, 37, 124)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 336)
[M::mem_pestat] mean and std.dev: (54.17, 51.48)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 442)
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_pestat] skip orientation RR
[M::mem_process_seqs] Processed 1091348 reads in 494.310 CPU sec, 21.700 real sec
[M::process] read 1081862 sequences (240000430 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (17, 312220, 36, 12)
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (5, 53, 149)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 437)
[M::mem_pestat] mean and std.dev: (62.50, 62.46)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 581)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (177, 245, 338)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 660)
[M::mem_pestat] mean and std.dev: (261.55, 123.75)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 821)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (66, 550, 1461)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 4251)
[M::mem_pestat] mean and std.dev: (621.16, 739.13)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 5646)
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (18, 201, 319)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 921)
[M::mem_pestat] mean and std.dev: (168.83, 138.55)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1222)
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_pestat] skip orientation RR
[M::mem_process_seqs] Processed 1081862 reads in 474.396 CPU sec, 20.904 real sec
[M::process] read 1088902 sequences (240000325 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (12, 314245, 60, 13)
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (28, 155, 350)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 994)
[M::mem_pestat] mean and std.dev: (151.82, 141.01)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1316)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (176, 243, 334)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 650)
[M::mem_pestat] mean and std.dev: (258.94, 121.25)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 808)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (89, 345, 1626)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 4700)
[M::mem_pestat] mean and std.dev: (477.51, 644.12)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 6237)
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (29, 123, 290)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 812)
[M::mem_pestat] mean and std.dev: (170.77, 164.63)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1073)
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_pestat] skip orientation RR
[M::mem_process_seqs] Processed 1088902 reads in 477.273 CPU sec, 20.933 real sec
[M::process] read 1109170 sequences (240000193 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (15, 317775, 70, 7)
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (43, 97, 162)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 400)
[M::mem_pestat] mean and std.dev: (90.77, 90.68)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 519)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (174, 238, 326)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 630)
[M::mem_pestat] mean and std.dev: (253.88, 116.59)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 782)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (36, 71, 618)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1782)
[M::mem_pestat] mean and std.dev: (184.62, 343.83)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 2364)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1109170 reads in 485.043 CPU sec, 21.336 real sec
[M::process] read 328708 sequences (70535790 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (2, 92701, 44, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (173, 235, 319)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 611)
[M::mem_pestat] mean and std.dev: (249.43, 112.55)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 757)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (41, 95, 537)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1529)
[M::mem_pestat] mean and std.dev: (169.32, 249.63)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 2025)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 328708 reads in 149.578 CPU sec, 6.589 real sec
[main] Version: 0.7.15-r1140
[main] CMD: bwa mem -t 24 ../data/Bins/work_files/assembly.fa /home-3/karoraw1@jhu.edu/scratch/Processed_data_group/SERC_051717_Shotgun_Metagenomes/QCd/QC_Renamed_Seqs/SERC_517_11_1.fastq /home-3/karoraw1@jhu.edu/scratch/Processed_data_group/SERC_051717_Shotgun_Metagenomes/QCd/QC_Renamed_Seqs/SERC_517_11_2.fastq
[main] Real time: 644.253 sec; CPU: 5536.750 sec
[bam_sort_core] merging from 0 files and 24 in-memory blocks...

------------------------------------------------------------------------------------------------------------------------
-----                                                   Aligning                                                   -----
-----/home-3/karoraw1@jhu.edu/scratch/Processed_data_group/SERC_051717_Shotgun_Metagenomes/QCd/QC_Renamed_Seqs/SERC_517_12_1.fastq-----
-----                                                     and                                                      -----
-----/home-3/karoraw1@jhu.edu/scratch/Processed_data_group/SERC_051717_Shotgun_Metagenomes/QCd/QC_Renamed_Seqs/SERC_517_12_2.fastq-----
-----             back to assembly, sorting the alignment, and gathering statistics on insert lengths              -----
------------------------------------------------------------------------------------------------------------------------

[M::bwa_idx_load_from_disk] read 0 ALT contigs
[M::process] read 1101472 sequences (240000116 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (5, 362283, 34, 4)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (185, 237, 308)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 554)
[M::mem_pestat] mean and std.dev: (247.97, 97.52)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 677)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (98, 1496, 5017)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 14855)
[M::mem_pestat] mean and std.dev: (2498.12, 2495.02)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 19774)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1101472 reads in 429.090 CPU sec, 24.453 real sec
[M::process] read 1113062 sequences (240000327 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (8, 363089, 47, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (184, 235, 305)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 547)
[M::mem_pestat] mean and std.dev: (246.12, 95.88)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 668)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (55, 104, 808)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 2314)
[M::mem_pestat] mean and std.dev: (332.61, 454.37)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 3067)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1113062 reads in 434.104 CPU sec, 21.175 real sec
[M::process] read 1136916 sequences (240000315 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (6, 344586, 154, 5)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (168, 218, 284)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 516)
[M::mem_pestat] mean and std.dev: (228.33, 89.55)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 632)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (41, 62, 119)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 275)
[M::mem_pestat] mean and std.dev: (68.69, 48.02)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 353)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1136916 reads in 517.078 CPU sec, 22.712 real sec
[M::process] read 1090018 sequences (240000194 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (3, 348315, 104, 8)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (183, 237, 310)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 564)
[M::mem_pestat] mean and std.dev: (248.05, 100.07)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 691)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (14, 33, 108)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 296)
[M::mem_pestat] mean and std.dev: (40.39, 45.13)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 390)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1090018 reads in 432.519 CPU sec, 19.066 real sec
[M::process] read 1088876 sequences (240000138 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (7, 358896, 30, 4)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (184, 237, 310)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 562)
[M::mem_pestat] mean and std.dev: (248.79, 99.04)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 688)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (114, 606, 2389)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 6939)
[M::mem_pestat] mean and std.dev: (1571.70, 1981.14)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 9496)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1088876 reads in 420.144 CPU sec, 18.494 real sec
[M::process] read 1097892 sequences (240000276 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (4, 361322, 40, 3)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (184, 236, 307)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 553)
[M::mem_pestat] mean and std.dev: (247.25, 97.14)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 676)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (175, 762, 2560)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 7330)
[M::mem_pestat] mean and std.dev: (1535.33, 1903.99)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 9715)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1097892 reads in 421.080 CPU sec, 18.533 real sec
[M::process] read 1106838 sequences (240000048 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (8, 363150, 54, 6)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (183, 235, 304)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 546)
[M::mem_pestat] mean and std.dev: (245.39, 95.39)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 667)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (78, 361, 1539)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 4461)
[M::mem_pestat] mean and std.dev: (508.13, 747.63)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 5922)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1106838 reads in 431.093 CPU sec, 18.978 real sec
[M::process] read 1115546 sequences (240000050 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (3, 361076, 94, 4)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (183, 233, 301)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 537)
[M::mem_pestat] mean and std.dev: (243.56, 93.13)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 655)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (43, 71, 272)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 730)
[M::mem_pestat] mean and std.dev: (107.39, 133.52)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 959)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1115546 reads in 462.901 CPU sec, 20.371 real sec
[M::process] read 1135502 sequences (240000398 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (2, 351768, 106, 7)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (175, 225, 290)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 520)
[M::mem_pestat] mean and std.dev: (234.61, 89.84)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 635)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (43, 77, 225)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 589)
[M::mem_pestat] mean and std.dev: (83.26, 79.90)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 771)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1135502 reads in 509.599 CPU sec, 22.407 real sec
[M::process] read 1084054 sequences (240000182 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (9, 358310, 34, 3)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (186, 240, 314)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 570)
[M::mem_pestat] mean and std.dev: (251.87, 100.76)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 698)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (84, 656, 1615)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 4677)
[M::mem_pestat] mean and std.dev: (526.67, 595.80)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 6208)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1084054 reads in 419.145 CPU sec, 18.420 real sec
[M::process] read 1092374 sequences (240000388 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (6, 358308, 50, 7)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (186, 239, 311)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 561)
[M::mem_pestat] mean and std.dev: (250.54, 98.65)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 686)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (47, 113, 779)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 2243)
[M::mem_pestat] mean and std.dev: (324.07, 538.49)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 2975)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1092374 reads in 429.745 CPU sec, 18.932 real sec
[M::process] read 1095708 sequences (240000400 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (7, 360336, 51, 8)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (185, 238, 309)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 557)
[M::mem_pestat] mean and std.dev: (248.96, 97.97)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 681)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (50, 493, 1335)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 3905)
[M::mem_pestat] mean and std.dev: (463.15, 599.83)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 5190)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1095708 reads in 426.606 CPU sec, 18.786 real sec
[M::process] read 1109768 sequences (240000138 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (6, 360544, 90, 8)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (183, 234, 304)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 546)
[M::mem_pestat] mean and std.dev: (245.47, 95.31)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 667)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (51, 90, 779)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 2235)
[M::mem_pestat] mean and std.dev: (310.14, 482.80)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 2963)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1109768 reads in 455.415 CPU sec, 20.058 real sec
[M::process] read 1105966 sequences (240000010 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (4, 349947, 709, 1)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (181, 233, 304)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 550)
[M::mem_pestat] mean and std.dev: (244.06, 97.57)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 673)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (14, 27, 48)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 116)
[M::mem_pestat] mean and std.dev: (29.83, 21.63)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 150)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1105966 reads in 484.581 CPU sec, 21.332 real sec
[M::process] read 1078340 sequences (240000128 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (4, 354954, 36, 7)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (187, 242, 317)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 577)
[M::mem_pestat] mean and std.dev: (254.11, 102.28)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 707)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (309, 881, 5000)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 14382)
[M::mem_pestat] mean and std.dev: (1927.03, 2109.11)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 19073)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1078340 reads in 421.524 CPU sec, 18.567 real sec
[M::process] read 1079652 sequences (240000345 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (6, 355955, 27, 3)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (186, 241, 315)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 573)
[M::mem_pestat] mean and std.dev: (252.56, 101.22)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 702)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (50, 601, 3397)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 10091)
[M::mem_pestat] mean and std.dev: (1528.78, 1968.97)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 13438)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1079652 reads in 419.604 CPU sec, 18.473 real sec
[M::process] read 1081052 sequences (240000003 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (4, 356615, 27, 6)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (186, 240, 313)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 567)
[M::mem_pestat] mean and std.dev: (251.50, 100.15)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 694)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (279, 644, 5007)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 14463)
[M::mem_pestat] mean and std.dev: (2133.93, 2556.70)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 19191)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1081052 reads in 420.362 CPU sec, 18.507 real sec
[M::process] read 1097966 sequences (240000395 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (5, 360943, 53, 7)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (185, 238, 309)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 557)
[M::mem_pestat] mean and std.dev: (248.95, 97.71)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 681)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (46, 93, 1257)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 3679)
[M::mem_pestat] mean and std.dev: (338.34, 538.69)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 4890)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1097966 reads in 426.866 CPU sec, 18.800 real sec
[M::process] read 1103864 sequences (240000164 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (6, 362286, 51, 7)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (184, 236, 306)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 550)
[M::mem_pestat] mean and std.dev: (247.16, 96.24)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 672)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (59, 120, 781)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 2225)
[M::mem_pestat] mean and std.dev: (267.70, 420.05)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 2947)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1103864 reads in 429.613 CPU sec, 19.792 real sec
[M::process] read 1109904 sequences (240000262 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (7, 361299, 85, 7)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (183, 234, 303)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 543)
[M::mem_pestat] mean and std.dev: (245.00, 94.08)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 663)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (57, 89, 540)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1506)
[M::mem_pestat] mean and std.dev: (222.79, 293.43)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1989)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1109904 reads in 459.675 CPU sec, 20.242 real sec
[M::process] read 55616 sequences (11969046 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (1, 17803, 8, 0)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (182, 232, 300)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 536)
[M::mem_pestat] mean and std.dev: (242.43, 91.62)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 654)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 55616 reads in 25.052 CPU sec, 1.107 real sec
[main] Version: 0.7.15-r1140
[main] CMD: bwa mem -t 24 ../data/Bins/work_files/assembly.fa /home-3/karoraw1@jhu.edu/scratch/Processed_data_group/SERC_051717_Shotgun_Metagenomes/QCd/QC_Renamed_Seqs/SERC_517_12_1.fastq /home-3/karoraw1@jhu.edu/scratch/Processed_data_group/SERC_051717_Shotgun_Metagenomes/QCd/QC_Renamed_Seqs/SERC_517_12_2.fastq
[main] Real time: 1102.550 sec; CPU: 8923.201 sec
[bam_sort_core] merging from 0 files and 24 in-memory blocks...

------------------------------------------------------------------------------------------------------------------------
-----                                                   Aligning                                                   -----
-----/home-3/karoraw1@jhu.edu/scratch/Processed_data_group/SERC_051717_Shotgun_Metagenomes/QCd/QC_Renamed_Seqs/SERC_517_13_1.fastq-----
-----                                                     and                                                      -----
-----/home-3/karoraw1@jhu.edu/scratch/Processed_data_group/SERC_051717_Shotgun_Metagenomes/QCd/QC_Renamed_Seqs/SERC_517_13_2.fastq-----
-----             back to assembly, sorting the alignment, and gathering statistics on insert lengths              -----
------------------------------------------------------------------------------------------------------------------------

[M::bwa_idx_load_from_disk] read 0 ALT contigs
[M::process] read 1163986 sequences (240000119 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (7, 365051, 17, 6)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (158, 211, 282)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 530)
[M::mem_pestat] mean and std.dev: (223.21, 95.17)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 654)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (134, 508, 3037)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 8843)
[M::mem_pestat] mean and std.dev: (1463.59, 1822.78)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 11746)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1163986 reads in 438.241 CPU sec, 25.125 real sec
[M::process] read 1179496 sequences (240000206 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (10, 363257, 74, 8)
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (11, 119, 130)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 368)
[M::mem_pestat] mean and std.dev: (89.30, 59.66)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 487)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (157, 208, 278)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 520)
[M::mem_pestat] mean and std.dev: (220.23, 92.83)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 641)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (47, 75, 179)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 443)
[M::mem_pestat] mean and std.dev: (76.34, 55.20)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 575)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1179496 reads in 457.519 CPU sec, 22.327 real sec
[M::process] read 1197540 sequences (240000101 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (13, 345671, 159, 5)
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (39, 65, 122)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 288)
[M::mem_pestat] mean and std.dev: (74.67, 60.36)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 371)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (147, 197, 262)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 492)
[M::mem_pestat] mean and std.dev: (207.91, 87.34)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 607)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (35, 60, 113)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 269)
[M::mem_pestat] mean and std.dev: (61.11, 41.95)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 347)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1197540 reads in 530.284 CPU sec, 23.317 real sec
[M::process] read 1152554 sequences (240000093 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (7, 351384, 79, 4)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (157, 211, 283)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 535)
[M::mem_pestat] mean and std.dev: (223.30, 97.13)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 661)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (14, 33, 68)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 176)
[M::mem_pestat] mean and std.dev: (29.39, 28.03)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 230)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1152554 reads in 442.250 CPU sec, 19.495 real sec
[M::process] read 1154288 sequences (240000368 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (10, 362313, 27, 5)
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (16, 39, 131)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 361)
[M::mem_pestat] mean and std.dev: (68.80, 61.33)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 476)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (158, 211, 282)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 530)
[M::mem_pestat] mean and std.dev: (223.22, 95.75)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 654)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (16, 160, 1052)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 3124)
[M::mem_pestat] mean and std.dev: (335.09, 562.77)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 4160)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1154288 reads in 426.339 CPU sec, 18.713 real sec
[M::process] read 1165348 sequences (240000126 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (10, 365464, 26, 6)
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (25, 111, 182)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 496)
[M::mem_pestat] mean and std.dev: (93.11, 76.78)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 653)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (157, 210, 280)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 526)
[M::mem_pestat] mean and std.dev: (221.76, 94.60)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 649)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (36, 116, 589)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1695)
[M::mem_pestat] mean and std.dev: (255.95, 380.47)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 2248)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1165348 reads in 427.115 CPU sec, 18.827 real sec
[M::process] read 1176644 sequences (240000266 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (7, 364681, 61, 3)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (157, 208, 277)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 517)
[M::mem_pestat] mean and std.dev: (220.34, 92.20)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 637)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (40, 70, 536)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1528)
[M::mem_pestat] mean and std.dev: (200.00, 290.85)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 2024)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1176644 reads in 450.533 CPU sec, 19.868 real sec
[M::process] read 1186256 sequences (240000184 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (8, 361637, 99, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (154, 204, 271)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 505)
[M::mem_pestat] mean and std.dev: (215.46, 89.99)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 622)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (39, 63, 141)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 345)
[M::mem_pestat] mean and std.dev: (77.23, 67.32)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 447)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1186256 reads in 482.057 CPU sec, 21.201 real sec
[M::process] read 1181348 sequences (240000063 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (7, 347337, 102, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (147, 199, 267)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 507)
[M::mem_pestat] mean and std.dev: (210.28, 91.34)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 627)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (42, 59, 97)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 207)
[M::mem_pestat] mean and std.dev: (55.72, 26.44)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 262)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1181348 reads in 497.129 CPU sec, 21.874 real sec
[M::process] read 1148710 sequences (240000359 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (13, 360513, 44, 3)
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (59, 96, 222)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 548)
[M::mem_pestat] mean and std.dev: (124.83, 83.73)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 711)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (160, 214, 287)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 541)
[M::mem_pestat] mean and std.dev: (226.27, 97.37)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 668)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (44, 99, 451)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1265)
[M::mem_pestat] mean and std.dev: (176.92, 241.81)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1672)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1148710 reads in 430.829 CPU sec, 18.968 real sec
[M::process] read 1155352 sequences (240000297 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (7, 362440, 36, 6)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (159, 212, 283)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 531)
[M::mem_pestat] mean and std.dev: (224.36, 95.54)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 655)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (33, 74, 510)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1464)
[M::mem_pestat] mean and std.dev: (181.03, 257.15)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1941)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1155352 reads in 438.627 CPU sec, 19.282 real sec
[M::process] read 1170562 sequences (240000270 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (9, 362583, 58, 3)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (158, 210, 280)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 524)
[M::mem_pestat] mean and std.dev: (222.01, 93.63)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 646)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (44, 81, 132)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 308)
[M::mem_pestat] mean and std.dev: (68.83, 37.59)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 396)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1170562 reads in 460.161 CPU sec, 20.211 real sec
[M::process] read 1164056 sequences (240000425 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (7, 356348, 211, 4)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (158, 211, 282)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 530)
[M::mem_pestat] mean and std.dev: (223.18, 94.86)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 654)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (18, 36, 61)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 147)
[M::mem_pestat] mean and std.dev: (35.54, 24.33)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 190)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1164056 reads in 469.194 CPU sec, 20.677 real sec
[M::process] read 1139828 sequences (240000333 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (11, 358539, 31, 3)
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (28, 128, 200)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 544)
[M::mem_pestat] mean and std.dev: (126.18, 106.50)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 716)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (160, 215, 289)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 547)
[M::mem_pestat] mean and std.dev: (227.97, 99.20)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 676)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (99, 418, 2095)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 6087)
[M::mem_pestat] mean and std.dev: (1254.67, 1787.01)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 8403)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1139828 reads in 430.002 CPU sec, 18.957 real sec
[M::process] read 1143078 sequences (240000035 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (4, 359514, 25, 7)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (160, 214, 287)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 541)
[M::mem_pestat] mean and std.dev: (226.38, 97.99)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 668)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (276, 479, 1292)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 3324)
[M::mem_pestat] mean and std.dev: (466.65, 358.46)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 4340)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1143078 reads in 429.331 CPU sec, 18.908 real sec
[M::process] read 1149696 sequences (240000167 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (3, 361348, 40, 6)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (159, 213, 285)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 537)
[M::mem_pestat] mean and std.dev: (225.40, 96.81)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 663)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (47, 402, 1679)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 4943)
[M::mem_pestat] mean and std.dev: (537.38, 728.68)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 6575)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1149696 reads in 431.804 CPU sec, 19.035 real sec
[M::process] read 1167120 sequences (240000448 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (4, 365118, 40, 6)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (158, 211, 281)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 527)
[M::mem_pestat] mean and std.dev: (222.68, 94.49)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 650)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (40, 62, 562)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1606)
[M::mem_pestat] mean and std.dev: (158.18, 246.05)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 2128)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1167120 reads in 437.916 CPU sec, 19.299 real sec
[M::process] read 1171882 sequences (240000304 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (8, 363551, 54, 6)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (158, 209, 278)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 518)
[M::mem_pestat] mean and std.dev: (221.17, 92.33)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 638)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (50, 72, 189)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 467)
[M::mem_pestat] mean and std.dev: (77.60, 50.05)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 606)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1171882 reads in 458.596 CPU sec, 20.212 real sec
[M::process] read 281516 sequences (57528377 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (0, 86120, 31, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (158, 209, 277)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 515)
[M::mem_pestat] mean and std.dev: (220.77, 91.12)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 634)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (41, 59, 140)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 338)
[M::mem_pestat] mean and std.dev: (64.32, 41.23)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 437)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 281516 reads in 120.355 CPU sec, 5.305 real sec
[main] Version: 0.7.15-r1140
[main] CMD: bwa mem -t 24 ../data/Bins/work_files/assembly.fa /home-3/karoraw1@jhu.edu/scratch/Processed_data_group/SERC_051717_Shotgun_Metagenomes/QCd/QC_Renamed_Seqs/SERC_517_13_1.fastq /home-3/karoraw1@jhu.edu/scratch/Processed_data_group/SERC_051717_Shotgun_Metagenomes/QCd/QC_Renamed_Seqs/SERC_517_13_2.fastq
[main] Real time: 1011.961 sec; CPU: 8303.313 sec
[bam_sort_core] merging from 0 files and 24 in-memory blocks...

------------------------------------------------------------------------------------------------------------------------
-----                                                   Aligning                                                   -----
-----/home-3/karoraw1@jhu.edu/scratch/Processed_data_group/SERC_051717_Shotgun_Metagenomes/QCd/QC_Renamed_Seqs/SERC_517_3_1.fastq-----
-----                                                     and                                                      -----
-----/home-3/karoraw1@jhu.edu/scratch/Processed_data_group/SERC_051717_Shotgun_Metagenomes/QCd/QC_Renamed_Seqs/SERC_517_3_2.fastq-----
-----             back to assembly, sorting the alignment, and gathering statistics on insert lengths              -----
------------------------------------------------------------------------------------------------------------------------

[M::bwa_idx_load_from_disk] read 0 ALT contigs
[M::process] read 1085020 sequences (240000467 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (4, 357284, 40, 4)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (189, 238, 305)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 537)
[M::mem_pestat] mean and std.dev: (247.91, 93.37)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 653)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (79, 259, 731)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 2035)
[M::mem_pestat] mean and std.dev: (377.24, 415.07)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 2687)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1085020 reads in 435.826 CPU sec, 24.801 real sec
[M::process] read 1091574 sequences (240000201 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (3, 359079, 30, 3)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (189, 237, 304)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 534)
[M::mem_pestat] mean and std.dev: (247.11, 92.68)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 649)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (54, 135, 755)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 2157)
[M::mem_pestat] mean and std.dev: (349.39, 458.31)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 2858)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1091574 reads in 429.766 CPU sec, 20.741 real sec
[M::process] read 1100360 sequences (240000293 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (1, 360093, 41, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (188, 235, 301)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 527)
[M::mem_pestat] mean and std.dev: (245.15, 90.97)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 640)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (49, 82, 322)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 868)
[M::mem_pestat] mean and std.dev: (116.77, 124.43)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1141)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1100360 reads in 436.657 CPU sec, 19.213 real sec
[M::process] read 1114886 sequences (240000287 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (5, 349436, 134, 5)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (178, 226, 290)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 514)
[M::mem_pestat] mean and std.dev: (235.50, 88.10)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 626)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (41, 64, 113)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 257)
[M::mem_pestat] mean and std.dev: (64.90, 36.67)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 329)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1114886 reads in 497.793 CPU sec, 21.905 real sec
[M::process] read 1122144 sequences (240000112 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (4, 345769, 168, 3)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (170, 218, 280)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 500)
[M::mem_pestat] mean and std.dev: (226.95, 85.61)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 610)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (40, 67, 117)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 271)
[M::mem_pestat] mean and std.dev: (63.84, 40.21)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 348)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1122144 reads in 516.575 CPU sec, 22.669 real sec
[M::process] read 1093340 sequences (240000068 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (9, 328393, 191, 5)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (180, 231, 300)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 540)
[M::mem_pestat] mean and std.dev: (240.62, 96.24)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 660)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (12, 25, 48)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 120)
[M::mem_pestat] mean and std.dev: (27.72, 21.67)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 156)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1093340 reads in 466.701 CPU sec, 20.556 real sec
[M::process] read 1069424 sequences (240000167 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (4, 353150, 23, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (190, 239, 308)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 544)
[M::mem_pestat] mean and std.dev: (249.80, 95.11)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 662)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (37, 284, 1232)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 3622)
[M::mem_pestat] mean and std.dev: (575.10, 674.43)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 4817)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1069424 reads in 424.176 CPU sec, 18.671 real sec
[M::process] read 1074628 sequences (240000146 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (3, 355329, 21, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (189, 239, 307)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 543)
[M::mem_pestat] mean and std.dev: (249.05, 94.59)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 661)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (62, 325, 2044)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 6008)
[M::mem_pestat] mean and std.dev: (1300.38, 1667.18)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 7990)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1074628 reads in 424.510 CPU sec, 18.670 real sec
[M::process] read 1079010 sequences (240000364 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (6, 356240, 25, 3)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (189, 238, 305)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 537)
[M::mem_pestat] mean and std.dev: (247.73, 93.40)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 653)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (26, 276, 1190)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 3518)
[M::mem_pestat] mean and std.dev: (674.28, 923.43)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 4682)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1079010 reads in 427.564 CPU sec, 18.825 real sec
[M::process] read 1086052 sequences (240000055 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (4, 358542, 27, 5)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (189, 237, 305)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 537)
[M::mem_pestat] mean and std.dev: (247.27, 93.02)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 653)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (652, 980, 2005)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 4711)
[M::mem_pestat] mean and std.dev: (1141.88, 902.91)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 6064)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1086052 reads in 424.819 CPU sec, 18.715 real sec
[M::process] read 1091500 sequences (240000227 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (0, 359947, 21, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (188, 236, 302)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 530)
[M::mem_pestat] mean and std.dev: (245.75, 91.75)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 644)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (26, 51, 260)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 728)
[M::mem_pestat] mean and std.dev: (106.74, 155.64)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 962)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1091500 reads in 429.498 CPU sec, 18.901 real sec
[M::process] read 1098174 sequences (240000043 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (6, 358687, 56, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (188, 235, 301)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 527)
[M::mem_pestat] mean and std.dev: (245.35, 90.39)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 640)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (44, 85, 256)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 680)
[M::mem_pestat] mean and std.dev: (130.53, 148.92)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 892)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1098174 reads in 454.266 CPU sec, 19.983 real sec
[M::process] read 1099290 sequences (240000186 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (3, 358185, 78, 4)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (188, 234, 299)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 521)
[M::mem_pestat] mean and std.dev: (243.87, 89.11)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 632)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (49, 86, 137)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 313)
[M::mem_pestat] mean and std.dev: (79.49, 48.77)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 401)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1099290 reads in 468.303 CPU sec, 20.600 real sec
[M::process] read 1110276 sequences (240000242 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (2, 356644, 95, 3)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (182, 229, 292)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 512)
[M::mem_pestat] mean and std.dev: (238.04, 88.07)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 622)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (47, 77, 194)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 488)
[M::mem_pestat] mean and std.dev: (87.59, 81.10)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 635)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1110276 reads in 488.456 CPU sec, 21.496 real sec
[M::process] read 1131622 sequences (240000111 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (6, 338231, 148, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (165, 213, 273)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 489)
[M::mem_pestat] mean and std.dev: (221.27, 83.98)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 597)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (38, 59, 86)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 182)
[M::mem_pestat] mean and std.dev: (55.91, 28.94)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 230)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1131622 reads in 538.051 CPU sec, 23.631 real sec
[M::process] read 1069778 sequences (240000204 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (3, 352148, 27, 3)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (191, 241, 311)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 551)
[M::mem_pestat] mean and std.dev: (251.51, 96.29)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 671)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (77, 210, 819)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 2303)
[M::mem_pestat] mean and std.dev: (380.04, 380.03)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 3045)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1069778 reads in 426.054 CPU sec, 18.685 real sec
[M::process] read 1073422 sequences (240000238 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (9, 353585, 33, 1)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (190, 240, 310)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 550)
[M::mem_pestat] mean and std.dev: (250.95, 95.75)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 670)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (74, 170, 916)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 2600)
[M::mem_pestat] mean and std.dev: (401.43, 525.27)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 3442)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1073422 reads in 428.528 CPU sec, 18.822 real sec
[M::process] read 1079904 sequences (240000338 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (5, 354022, 53, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (190, 239, 308)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 544)
[M::mem_pestat] mean and std.dev: (249.75, 94.50)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 662)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (48, 92, 466)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1302)
[M::mem_pestat] mean and std.dev: (212.06, 282.35)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1720)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1079904 reads in 437.367 CPU sec, 19.287 real sec
[M::process] read 1076262 sequences (240000053 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (2, 355283, 24, 5)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (190, 239, 306)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 538)
[M::mem_pestat] mean and std.dev: (248.68, 93.89)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 654)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (60, 441, 1360)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 3960)
[M::mem_pestat] mean and std.dev: (579.05, 657.69)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 5260)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1076262 reads in 431.144 CPU sec, 18.965 real sec
[M::process] read 1091866 sequences (240000066 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (4, 358551, 43, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (189, 238, 305)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 537)
[M::mem_pestat] mean and std.dev: (248.20, 92.88)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 653)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (56, 98, 583)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1637)
[M::mem_pestat] mean and std.dev: (240.39, 297.85)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 2164)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1091866 reads in 439.879 CPU sec, 19.363 real sec
[M::process] read 1094398 sequences (240000209 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (3, 356004, 64, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (187, 235, 302)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 532)
[M::mem_pestat] mean and std.dev: (245.67, 91.52)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 647)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (41, 68, 239)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 635)
[M::mem_pestat] mean and std.dev: (107.59, 131.64)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 833)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1094398 reads in 456.687 CPU sec, 20.037 real sec
[M::process] read 1108160 sequences (240000017 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (7, 355133, 251, 3)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (185, 233, 297)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 521)
[M::mem_pestat] mean and std.dev: (242.28, 89.09)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 633)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (19, 38, 76)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 190)
[M::mem_pestat] mean and std.dev: (43.62, 33.97)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 247)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1108160 reads in 488.600 CPU sec, 21.448 real sec
[M::process] read 1077458 sequences (240000446 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (4, 347139, 326, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (188, 238, 307)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 545)
[M::mem_pestat] mean and std.dev: (248.57, 95.10)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 664)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (13, 28, 50)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 124)
[M::mem_pestat] mean and std.dev: (31.07, 24.80)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 161)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1077458 reads in 460.186 CPU sec, 20.199 real sec
[M::process] read 1064890 sequences (240000427 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (2, 350491, 21, 5)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (191, 242, 314)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 560)
[M::mem_pestat] mean and std.dev: (253.47, 98.17)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 683)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (77, 433, 1632)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 4742)
[M::mem_pestat] mean and std.dev: (633.37, 775.65)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 6297)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1064890 reads in 426.463 CPU sec, 18.782 real sec
[M::process] read 1065478 sequences (240000364 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (2, 351228, 25, 3)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (191, 241, 312)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 554)
[M::mem_pestat] mean and std.dev: (252.40, 97.13)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 675)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (54, 234, 816)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 2340)
[M::mem_pestat] mean and std.dev: (370.91, 378.58)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 3102)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1065478 reads in 428.839 CPU sec, 18.876 real sec
[M::process] read 1067086 sequences (240000406 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (1, 351677, 23, 4)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (190, 240, 311)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 553)
[M::mem_pestat] mean and std.dev: (251.10, 96.61)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 674)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (93, 395, 1888)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 5478)
[M::mem_pestat] mean and std.dev: (743.10, 962.70)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 7273)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1067086 reads in 428.244 CPU sec, 18.844 real sec
[M::process] read 1067052 sequences (240000183 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (5, 352486, 13, 7)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (190, 240, 310)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 550)
[M::mem_pestat] mean and std.dev: (250.92, 96.02)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 670)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (21, 74, 935)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 2763)
[M::mem_pestat] mean and std.dev: (426.46, 526.16)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 3677)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1067052 reads in 425.578 CPU sec, 18.717 real sec
[M::process] read 1070408 sequences (240000037 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (3, 353453, 27, 4)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (190, 240, 309)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 547)
[M::mem_pestat] mean and std.dev: (250.47, 95.49)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 666)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (75, 464, 698)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1944)
[M::mem_pestat] mean and std.dev: (443.46, 426.17)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 2567)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1070408 reads in 431.758 CPU sec, 19.013 real sec
[M::process] read 1086274 sequences (240000452 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (4, 355967, 54, 4)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (190, 238, 307)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 541)
[M::mem_pestat] mean and std.dev: (249.07, 93.70)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 658)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (49, 100, 359)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 979)
[M::mem_pestat] mean and std.dev: (175.98, 220.66)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1289)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1086274 reads in 438.472 CPU sec, 19.239 real sec
[M::process] read 1089210 sequences (240000247 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (2, 358521, 36, 3)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (189, 237, 304)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 534)
[M::mem_pestat] mean and std.dev: (247.06, 92.25)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 649)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (58, 114, 535)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1489)
[M::mem_pestat] mean and std.dev: (232.00, 266.48)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1966)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1089210 reads in 432.025 CPU sec, 18.984 real sec
[M::process] read 1090182 sequences (240000425 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (1, 358135, 44, 4)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (189, 237, 304)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 534)
[M::mem_pestat] mean and std.dev: (247.02, 92.10)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 649)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (48, 83, 304)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 816)
[M::mem_pestat] mean and std.dev: (169.70, 208.68)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1072)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1090182 reads in 443.473 CPU sec, 19.498 real sec
[M::process] read 1095386 sequences (240000057 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (3, 358282, 72, 3)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (188, 235, 301)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 527)
[M::mem_pestat] mean and std.dev: (245.40, 90.40)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 640)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (46, 71, 109)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 235)
[M::mem_pestat] mean and std.dev: (72.74, 43.60)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 298)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1095386 reads in 456.961 CPU sec, 20.076 real sec
[M::process] read 470944 sequences (103071226 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (1, 152030, 48, 1)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (188, 235, 300)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 524)
[M::mem_pestat] mean and std.dev: (245.07, 89.57)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 636)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (39, 59, 92)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 198)
[M::mem_pestat] mean and std.dev: (65.09, 38.44)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 251)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 470944 reads in 212.822 CPU sec, 9.379 real sec
[main] Version: 0.7.15-r1140
[main] CMD: bwa mem -t 24 ../data/Bins/work_files/assembly.fa /home-3/karoraw1@jhu.edu/scratch/Processed_data_group/SERC_051717_Shotgun_Metagenomes/QCd/QC_Renamed_Seqs/SERC_517_3_1.fastq /home-3/karoraw1@jhu.edu/scratch/Processed_data_group/SERC_051717_Shotgun_Metagenomes/QCd/QC_Renamed_Seqs/SERC_517_3_2.fastq
[main] Real time: 1781.786 sec; CPU: 14631.396 sec
[bam_sort_core] merging from 0 files and 24 in-memory blocks...

------------------------------------------------------------------------------------------------------------------------
-----                                                   Aligning                                                   -----
-----/home-3/karoraw1@jhu.edu/scratch/Processed_data_group/SERC_051717_Shotgun_Metagenomes/QCd/QC_Renamed_Seqs/SERC_517_4_1.fastq-----
-----                                                     and                                                      -----
-----/home-3/karoraw1@jhu.edu/scratch/Processed_data_group/SERC_051717_Shotgun_Metagenomes/QCd/QC_Renamed_Seqs/SERC_517_4_2.fastq-----
-----             back to assembly, sorting the alignment, and gathering statistics on insert lengths              -----
------------------------------------------------------------------------------------------------------------------------

[M::bwa_idx_load_from_disk] read 0 ALT contigs
[M::process] read 1095074 sequences (240000466 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (2, 361148, 27, 1)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (183, 232, 300)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 534)
[M::mem_pestat] mean and std.dev: (242.98, 92.82)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 651)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (77, 260, 2214)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 6488)
[M::mem_pestat] mean and std.dev: (1151.38, 1635.28)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 8625)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1095074 reads in 428.924 CPU sec, 24.295 real sec
[M::process] read 1105480 sequences (240000367 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (6, 364670, 36, 4)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (182, 231, 297)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 527)
[M::mem_pestat] mean and std.dev: (240.91, 91.53)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 642)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (47, 79, 675)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1931)
[M::mem_pestat] mean and std.dev: (339.79, 518.77)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 2559)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1105480 reads in 427.853 CPU sec, 20.751 real sec
[M::process] read 1120954 sequences (240000187 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (2, 356782, 119, 6)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (176, 224, 288)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 512)
[M::mem_pestat] mean and std.dev: (233.59, 88.19)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 624)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (37, 58, 101)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 229)
[M::mem_pestat] mean and std.dev: (60.10, 36.18)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 293)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1120954 reads in 480.678 CPU sec, 21.150 real sec
[M::process] read 1133190 sequences (240000031 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (5, 350851, 173, 3)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (165, 213, 274)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 492)
[M::mem_pestat] mean and std.dev: (221.46, 84.80)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 601)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (38, 55, 86)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 182)
[M::mem_pestat] mean and std.dev: (57.47, 28.22)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 230)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1133190 reads in 507.121 CPU sec, 22.291 real sec
[M::process] read 1116846 sequences (240000269 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (2, 313069, 418, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (167, 219, 287)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 527)
[M::mem_pestat] mean and std.dev: (227.70, 95.46)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 647)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (13, 27, 48)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 118)
[M::mem_pestat] mean and std.dev: (30.50, 23.31)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 153)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1116846 reads in 482.663 CPU sec, 21.263 real sec
[M::process] read 1079904 sequences (240000003 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (5, 357630, 19, 3)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (184, 234, 302)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 538)
[M::mem_pestat] mean and std.dev: (244.20, 94.15)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 656)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (170, 987, 3141)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 9083)
[M::mem_pestat] mean and std.dev: (1650.00, 1823.31)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 12054)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1079904 reads in 419.448 CPU sec, 18.391 real sec
[M::process] read 1086678 sequences (240000144 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (3, 359142, 30, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (183, 233, 301)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 537)
[M::mem_pestat] mean and std.dev: (243.25, 93.53)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 655)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (49, 344, 1329)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 3889)
[M::mem_pestat] mean and std.dev: (411.16, 517.59)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 5169)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1086678 reads in 420.857 CPU sec, 18.471 real sec
[M::process] read 1095218 sequences (240000465 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (1, 362455, 22, 1)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (183, 232, 299)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 531)
[M::mem_pestat] mean and std.dev: (242.26, 92.61)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 647)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (53, 211, 848)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 2438)
[M::mem_pestat] mean and std.dev: (430.76, 557.22)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 3233)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1095218 reads in 420.242 CPU sec, 18.503 real sec
[M::process] read 1102704 sequences (240000197 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (0, 365041, 50, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (182, 230, 296)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 524)
[M::mem_pestat] mean and std.dev: (240.16, 90.69)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 638)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (56, 110, 540)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1508)
[M::mem_pestat] mean and std.dev: (266.00, 339.86)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1992)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1102704 reads in 429.727 CPU sec, 18.926 real sec
[M::process] read 1110304 sequences (240000150 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (5, 362754, 76, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (182, 229, 294)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 518)
[M::mem_pestat] mean and std.dev: (239.07, 88.81)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 630)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (48, 71, 106)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 222)
[M::mem_pestat] mean and std.dev: (69.45, 35.75)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 280)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1110304 reads in 455.583 CPU sec, 20.010 real sec
[M::process] read 1118608 sequences (240000126 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (2, 360372, 107, 1)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (175, 223, 286)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 508)
[M::mem_pestat] mean and std.dev: (232.17, 87.55)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 619)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (41, 64, 290)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 788)
[M::mem_pestat] mean and std.dev: (141.56, 190.82)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1037)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1118608 reads in 476.698 CPU sec, 20.925 real sec
[M::process] read 1122614 sequences (240000276 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (8, 346972, 99, 3)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (167, 216, 281)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 509)
[M::mem_pestat] mean and std.dev: (226.22, 88.27)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 623)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (38, 56, 93)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 203)
[M::mem_pestat] mean and std.dev: (56.20, 32.26)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 258)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1122614 reads in 496.218 CPU sec, 21.813 real sec
[M::process] read 1079514 sequences (240000327 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (4, 355600, 30, 5)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (185, 235, 305)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 545)
[M::mem_pestat] mean and std.dev: (246.43, 95.57)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 665)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (89, 367, 2994)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 8804)
[M::mem_pestat] mean and std.dev: (1649.97, 2261.99)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 11709)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1079514 reads in 423.296 CPU sec, 18.636 real sec
[M::process] read 1087800 sequences (240000019 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (3, 357305, 50, 3)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (184, 234, 303)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 541)
[M::mem_pestat] mean and std.dev: (245.25, 94.06)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 660)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (59, 151, 407)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1103)
[M::mem_pestat] mean and std.dev: (195.26, 209.89)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1451)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1087800 reads in 431.587 CPU sec, 19.008 real sec
[M::process] read 1088840 sequences (240000024 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (2, 359659, 31, 3)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (184, 233, 301)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 535)
[M::mem_pestat] mean and std.dev: (243.76, 93.18)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 652)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (50, 95, 1166)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 3398)
[M::mem_pestat] mean and std.dev: (235.16, 399.27)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 4514)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1088840 reads in 425.609 CPU sec, 18.704 real sec
[M::process] read 1101994 sequences (240000243 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (4, 361247, 58, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (183, 232, 299)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 531)
[M::mem_pestat] mean and std.dev: (242.57, 91.72)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 647)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (51, 89, 225)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 573)
[M::mem_pestat] mean and std.dev: (109.76, 114.08)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 747)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1101994 reads in 441.129 CPU sec, 19.422 real sec
[M::process] read 1115732 sequences (240000437 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (2, 357713, 298, 3)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (179, 227, 291)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 515)
[M::mem_pestat] mean and std.dev: (236.60, 88.80)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 627)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (19, 32, 60)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 142)
[M::mem_pestat] mean and std.dev: (36.97, 26.85)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 183)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1115732 reads in 481.108 CPU sec, 21.186 real sec
[M::process] read 1086364 sequences (240000167 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (1, 349085, 440, 4)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (182, 233, 301)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 539)
[M::mem_pestat] mean and std.dev: (243.16, 94.57)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 658)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (16, 31, 50)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 118)
[M::mem_pestat] mean and std.dev: (33.09, 22.33)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 152)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1086364 reads in 455.112 CPU sec, 20.427 real sec
[M::process] read 1073708 sequences (240000088 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (4, 352587, 17, 4)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (185, 236, 307)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 551)
[M::mem_pestat] mean and std.dev: (247.68, 96.77)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 673)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (71, 885, 1377)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 3989)
[M::mem_pestat] mean and std.dev: (702.73, 580.70)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 5295)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1073708 reads in 423.521 CPU sec, 18.655 real sec
[M::process] read 1075332 sequences (240000115 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (3, 354416, 19, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (185, 236, 305)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 545)
[M::mem_pestat] mean and std.dev: (246.38, 95.73)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 665)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (32, 270, 2683)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 7985)
[M::mem_pestat] mean and std.dev: (1509.05, 2208.09)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 10636)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1075332 reads in 422.442 CPU sec, 18.592 real sec
[M::process] read 1076116 sequences (240000324 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (4, 355363, 30, 1)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (185, 235, 305)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 545)
[M::mem_pestat] mean and std.dev: (246.29, 95.49)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 665)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (123, 368, 755)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 2019)
[M::mem_pestat] mean and std.dev: (428.00, 417.27)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 2651)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1076116 reads in 421.835 CPU sec, 18.579 real sec
[M::process] read 1085816 sequences (240000331 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (2, 357729, 29, 5)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (184, 234, 303)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 541)
[M::mem_pestat] mean and std.dev: (245.01, 94.18)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 660)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (62, 103, 701)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1979)
[M::mem_pestat] mean and std.dev: (323.58, 502.84)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 2618)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1085816 reads in 426.723 CPU sec, 18.729 real sec
[M::process] read 1099152 sequences (240000365 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (4, 362849, 38, 4)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (183, 232, 298)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 528)
[M::mem_pestat] mean and std.dev: (242.20, 91.28)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 643)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (44, 61, 328)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 896)
[M::mem_pestat] mean and std.dev: (106.12, 155.04)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1180)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1099152 reads in 430.063 CPU sec, 18.916 real sec
[M::process] read 1100088 sequences (240000072 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (5, 361431, 54, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (183, 231, 298)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 528)
[M::mem_pestat] mean and std.dev: (241.81, 91.20)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 643)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (47, 72, 125)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 281)
[M::mem_pestat] mean and std.dev: (69.72, 43.62)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 359)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1100088 reads in 441.599 CPU sec, 19.432 real sec
[M::process] read 1094994 sequences (237253604 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (4, 357702, 79, 5)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (181, 229, 294)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 520)
[M::mem_pestat] mean and std.dev: (239.30, 88.93)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 633)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (42, 63, 100)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 216)
[M::mem_pestat] mean and std.dev: (58.33, 30.79)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 274)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1094994 reads in 460.967 CPU sec, 20.296 real sec
[main] Version: 0.7.15-r1140
[main] CMD: bwa mem -t 24 ../data/Bins/work_files/assembly.fa /home-3/karoraw1@jhu.edu/scratch/Processed_data_group/SERC_051717_Shotgun_Metagenomes/QCd/QC_Renamed_Seqs/SERC_517_4_1.fastq /home-3/karoraw1@jhu.edu/scratch/Processed_data_group/SERC_051717_Shotgun_Metagenomes/QCd/QC_Renamed_Seqs/SERC_517_4_2.fastq
[main] Real time: 1389.150 sec; CPU: 11189.701 sec
[bam_sort_core] merging from 0 files and 24 in-memory blocks...

------------------------------------------------------------------------------------------------------------------------
-----                                                   Aligning                                                   -----
-----/home-3/karoraw1@jhu.edu/scratch/Processed_data_group/SERC_051717_Shotgun_Metagenomes/QCd/QC_Renamed_Seqs/SERC_517_5_1.fastq-----
-----                                                     and                                                      -----
-----/home-3/karoraw1@jhu.edu/scratch/Processed_data_group/SERC_051717_Shotgun_Metagenomes/QCd/QC_Renamed_Seqs/SERC_517_5_2.fastq-----
-----             back to assembly, sorting the alignment, and gathering statistics on insert lengths              -----
------------------------------------------------------------------------------------------------------------------------

[M::bwa_idx_load_from_disk] read 0 ALT contigs
[M::process] read 1157576 sequences (240000306 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (3, 321554, 44, 6)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (146, 205, 284)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 560)
[M::mem_pestat] mean and std.dev: (218.66, 105.41)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 698)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (65, 116, 726)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 2048)
[M::mem_pestat] mean and std.dev: (219.17, 272.63)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 2709)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1157576 reads in 482.908 CPU sec, 27.100 real sec
[M::process] read 1177100 sequences (240000361 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (3, 316531, 111, 3)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (144, 201, 278)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 546)
[M::mem_pestat] mean and std.dev: (214.95, 101.96)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 680)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (46, 69, 123)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 277)
[M::mem_pestat] mean and std.dev: (63.62, 33.42)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 354)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1177100 reads in 493.298 CPU sec, 23.307 real sec
[M::process] read 1152322 sequences (240000122 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (8, 302290, 133, 5)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (144, 204, 285)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 567)
[M::mem_pestat] mean and std.dev: (218.54, 107.20)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 708)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (20, 38, 73)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 179)
[M::mem_pestat] mean and std.dev: (35.19, 24.96)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 232)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1152322 reads in 490.665 CPU sec, 21.575 real sec
[M::process] read 1145206 sequences (240000488 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (2, 319899, 41, 3)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (146, 205, 285)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 563)
[M::mem_pestat] mean and std.dev: (219.25, 106.59)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 702)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (90, 557, 2069)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 6027)
[M::mem_pestat] mean and std.dev: (1039.32, 1067.54)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 8006)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1145206 reads in 477.719 CPU sec, 20.964 real sec
[M::process] read 1157312 sequences (240000265 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (6, 323018, 55, 3)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (145, 203, 283)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 559)
[M::mem_pestat] mean and std.dev: (217.47, 105.43)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 697)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (80, 512, 2260)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 6620)
[M::mem_pestat] mean and std.dev: (1317.45, 1662.33)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 8800)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1157312 reads in 474.214 CPU sec, 20.877 real sec
[M::process] read 1171992 sequences (240000173 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (5, 318300, 102, 4)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (146, 203, 280)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 548)
[M::mem_pestat] mean and std.dev: (216.79, 101.92)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 682)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (43, 72, 128)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 298)
[M::mem_pestat] mean and std.dev: (65.80, 44.29)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 383)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1171992 reads in 495.484 CPU sec, 21.796 real sec
[M::process] read 1186206 sequences (240000126 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (4, 296285, 168, 5)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (135, 191, 265)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 525)
[M::mem_pestat] mean and std.dev: (204.07, 98.05)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 655)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (35, 56, 80)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 170)
[M::mem_pestat] mean and std.dev: (51.79, 25.29)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 215)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1186206 reads in 515.726 CPU sec, 22.676 real sec
[M::process] read 1139228 sequences (240000447 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (6, 316775, 50, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (147, 208, 291)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 579)
[M::mem_pestat] mean and std.dev: (223.36, 109.27)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 723)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (59, 471, 2262)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 6668)
[M::mem_pestat] mean and std.dev: (1152.38, 1354.05)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 8871)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1139228 reads in 476.131 CPU sec, 20.867 real sec
[M::process] read 1146184 sequences (240000178 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (7, 318449, 63, 5)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (147, 207, 288)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 570)
[M::mem_pestat] mean and std.dev: (221.37, 107.43)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 711)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (59, 274, 1668)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 4886)
[M::mem_pestat] mean and std.dev: (698.27, 943.92)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 6495)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1146184 reads in 482.153 CPU sec, 21.194 real sec
[M::process] read 1163644 sequences (240000443 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (2, 310091, 388, 3)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (146, 205, 284)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 560)
[M::mem_pestat] mean and std.dev: (218.96, 104.88)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 698)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (16, 33, 54)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 130)
[M::mem_pestat] mean and std.dev: (34.36, 24.15)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 168)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1163644 reads in 496.275 CPU sec, 21.829 real sec
[M::process] read 1138976 sequences (240000140 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (3, 308393, 278, 1)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (147, 208, 291)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 579)
[M::mem_pestat] mean and std.dev: (223.34, 109.56)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 723)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (24, 43, 68)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 156)
[M::mem_pestat] mean and std.dev: (40.88, 25.92)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 200)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1138976 reads in 489.606 CPU sec, 21.521 real sec
[M::process] read 1131442 sequences (240000305 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (7, 316091, 36, 5)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (148, 209, 293)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 583)
[M::mem_pestat] mean and std.dev: (224.49, 110.78)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 728)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (270, 1127, 2828)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 7944)
[M::mem_pestat] mean and std.dev: (1504.06, 1491.70)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 10502)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1131442 reads in 474.628 CPU sec, 20.889 real sec
[M::process] read 1133918 sequences (240000317 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (5, 316988, 37, 5)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (147, 208, 291)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 579)
[M::mem_pestat] mean and std.dev: (222.90, 109.55)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 723)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (128, 1023, 2417)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 6995)
[M::mem_pestat] mean and std.dev: (1201.11, 1132.29)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 9284)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1133918 reads in 471.844 CPU sec, 20.728 real sec
[M::process] read 1148750 sequences (240000146 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (3, 318823, 50, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (147, 207, 289)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 573)
[M::mem_pestat] mean and std.dev: (221.84, 107.82)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 715)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (35, 84, 1192)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 3506)
[M::mem_pestat] mean and std.dev: (606.98, 958.98)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 4663)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1148750 reads in 483.854 CPU sec, 21.291 real sec
[M::process] read 831922 sequences (170760510 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (1, 225290, 88, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (146, 203, 279)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 545)
[M::mem_pestat] mean and std.dev: (216.07, 101.04)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 678)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (56, 87, 172)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 404)
[M::mem_pestat] mean and std.dev: (91.69, 65.83)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 520)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 831922 reads in 357.660 CPU sec, 15.743 real sec
[main] Version: 0.7.15-r1140
[main] CMD: bwa mem -t 24 ../data/Bins/work_files/assembly.fa /home-3/karoraw1@jhu.edu/scratch/Processed_data_group/SERC_051717_Shotgun_Metagenomes/QCd/QC_Renamed_Seqs/SERC_517_5_1.fastq /home-3/karoraw1@jhu.edu/scratch/Processed_data_group/SERC_051717_Shotgun_Metagenomes/QCd/QC_Renamed_Seqs/SERC_517_5_2.fastq
[main] Real time: 840.327 sec; CPU: 7197.154 sec
[bam_sort_core] merging from 0 files and 24 in-memory blocks...

------------------------------------------------------------------------------------------------------------------------
-----                                                   Aligning                                                   -----
-----/home-3/karoraw1@jhu.edu/scratch/Processed_data_group/SERC_051717_Shotgun_Metagenomes/QCd/QC_Renamed_Seqs/SERC_517_6_1.fastq-----
-----                                                     and                                                      -----
-----/home-3/karoraw1@jhu.edu/scratch/Processed_data_group/SERC_051717_Shotgun_Metagenomes/QCd/QC_Renamed_Seqs/SERC_517_6_2.fastq-----
-----             back to assembly, sorting the alignment, and gathering statistics on insert lengths              -----
------------------------------------------------------------------------------------------------------------------------

[M::bwa_idx_load_from_disk] read 0 ALT contigs
[M::process] read 1124444 sequences (240000078 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (12, 342060, 46, 10)
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (36, 109, 239)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 645)
[M::mem_pestat] mean and std.dev: (150.33, 153.99)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 848)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (167, 218, 286)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 524)
[M::mem_pestat] mean and std.dev: (227.21, 94.86)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 643)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (83, 500, 1239)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 3551)
[M::mem_pestat] mean and std.dev: (675.43, 790.16)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 4707)
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (24, 60, 100)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 252)
[M::mem_pestat] mean and std.dev: (46.38, 30.28)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 328)
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_pestat] skip orientation RR
[M::mem_process_seqs] Processed 1124444 reads in 442.549 CPU sec, 25.099 real sec
[M::process] read 1135204 sequences (240000060 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (9, 344225, 63, 7)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (166, 216, 283)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 517)
[M::mem_pestat] mean and std.dev: (225.13, 93.24)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 634)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (37, 124, 855)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 2491)
[M::mem_pestat] mean and std.dev: (411.43, 577.18)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 3309)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1135204 reads in 440.786 CPU sec, 21.381 real sec
[M::process] read 1151120 sequences (240000153 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (9, 330410, 175, 7)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (159, 209, 273)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 501)
[M::mem_pestat] mean and std.dev: (218.05, 89.31)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 615)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (42, 66, 120)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 276)
[M::mem_pestat] mean and std.dev: (65.30, 43.46)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 354)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1151120 reads in 495.422 CPU sec, 21.800 real sec
[M::process] read 1167494 sequences (240000115 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (11, 314998, 221, 13)
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (29, 45, 129)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 329)
[M::mem_pestat] mean and std.dev: (58.80, 49.67)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 429)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (150, 198, 260)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 480)
[M::mem_pestat] mean and std.dev: (206.75, 85.10)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 590)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (41, 63, 123)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 287)
[M::mem_pestat] mean and std.dev: (68.02, 49.28)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 369)
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (28, 58, 230)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 634)
[M::mem_pestat] mean and std.dev: (98.62, 107.83)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 836)
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_pestat] skip orientation RR
[M::mem_process_seqs] Processed 1167494 reads in 519.788 CPU sec, 22.873 real sec
[M::process] read 1113542 sequences (240000219 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (10, 330741, 112, 10)
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (44, 128, 225)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 587)
[M::mem_pestat] mean and std.dev: (128.44, 111.15)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 768)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (165, 218, 288)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 534)
[M::mem_pestat] mean and std.dev: (227.69, 97.39)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 657)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (11, 30, 202)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 584)
[M::mem_pestat] mean and std.dev: (63.14, 119.05)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 775)
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (15, 173, 311)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 903)
[M::mem_pestat] mean and std.dev: (207.90, 193.86)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1199)
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_pestat] skip orientation RR
[M::mem_process_seqs] Processed 1113542 reads in 441.744 CPU sec, 19.328 real sec
[M::process] read 1112508 sequences (240000148 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (11, 339369, 57, 8)
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (102, 252, 373)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 915)
[M::mem_pestat] mean and std.dev: (217.90, 182.23)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1186)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (167, 218, 287)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 527)
[M::mem_pestat] mean and std.dev: (227.81, 95.87)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 647)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (86, 625, 1315)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 3773)
[M::mem_pestat] mean and std.dev: (755.07, 774.06)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 5002)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1112508 reads in 434.033 CPU sec, 19.095 real sec
[M::process] read 1118992 sequences (240000263 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (7, 341431, 56, 8)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (166, 217, 285)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 523)
[M::mem_pestat] mean and std.dev: (226.59, 95.03)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 642)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (59, 266, 1685)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 4937)
[M::mem_pestat] mean and std.dev: (769.92, 1020.21)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 6563)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1118992 reads in 434.228 CPU sec, 19.111 real sec
[M::process] read 1129516 sequences (240000293 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (10, 344203, 50, 6)
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (88, 134, 315)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 769)
[M::mem_pestat] mean and std.dev: (233.50, 200.80)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1037)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (166, 216, 284)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 520)
[M::mem_pestat] mean and std.dev: (225.53, 93.80)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 638)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (57, 345, 1322)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 3852)
[M::mem_pestat] mean and std.dev: (754.82, 813.27)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 5117)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1129516 reads in 431.324 CPU sec, 18.920 real sec
[M::process] read 1137128 sequences (240000451 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (11, 342090, 83, 11)
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (99, 402, 677)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1833)
[M::mem_pestat] mean and std.dev: (366.10, 345.05)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 2411)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (166, 215, 280)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 508)
[M::mem_pestat] mean and std.dev: (223.91, 91.30)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 622)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (48, 97, 474)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1326)
[M::mem_pestat] mean and std.dev: (233.57, 314.64)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1752)
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (37, 158, 333)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 925)
[M::mem_pestat] mean and std.dev: (169.60, 189.82)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1221)
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_pestat] skip orientation RR
[M::mem_process_seqs] Processed 1137128 reads in 449.785 CPU sec, 19.725 real sec
[M::process] read 1141776 sequences (240000363 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (12, 340431, 128, 9)
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (40, 172, 306)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 838)
[M::mem_pestat] mean and std.dev: (171.58, 117.33)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1104)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (166, 214, 279)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 505)
[M::mem_pestat] mean and std.dev: (223.34, 89.86)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 618)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (41, 72, 220)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 578)
[M::mem_pestat] mean and std.dev: (102.73, 116.27)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 757)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1141776 reads in 469.687 CPU sec, 20.674 real sec
[M::process] read 1162682 sequences (240000043 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (13, 324120, 183, 9)
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (55, 110, 302)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 796)
[M::mem_pestat] mean and std.dev: (146.17, 129.71)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1043)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (146, 196, 259)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 485)
[M::mem_pestat] mean and std.dev: (205.24, 86.28)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 598)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (39, 60, 145)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 357)
[M::mem_pestat] mean and std.dev: (63.90, 49.51)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 463)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1162682 reads in 511.880 CPU sec, 22.488 real sec
[M::process] read 1121188 sequences (240000402 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (11, 334242, 68, 11)
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (69, 75, 251)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 615)
[M::mem_pestat] mean and std.dev: (141.20, 135.57)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 797)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (167, 218, 286)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 524)
[M::mem_pestat] mean and std.dev: (227.72, 94.58)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 643)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (42, 103, 348)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 960)
[M::mem_pestat] mean and std.dev: (166.72, 191.26)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1266)
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (23, 150, 308)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 878)
[M::mem_pestat] mean and std.dev: (167.40, 217.85)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1163)
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_pestat] skip orientation RR
[M::mem_process_seqs] Processed 1121188 reads in 453.409 CPU sec, 19.905 real sec
[M::process] read 1111672 sequences (240000224 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (3, 337542, 72, 7)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (168, 220, 290)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 534)
[M::mem_pestat] mean and std.dev: (230.10, 96.90)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 656)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (43, 145, 693)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1993)
[M::mem_pestat] mean and std.dev: (360.11, 460.11)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 2643)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1111672 reads in 439.846 CPU sec, 19.322 real sec
[M::process] read 1116842 sequences (240000292 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (9, 339469, 65, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (167, 219, 287)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 527)
[M::mem_pestat] mean and std.dev: (228.08, 95.27)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 647)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (38, 85, 514)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1466)
[M::mem_pestat] mean and std.dev: (197.54, 277.52)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1942)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1116842 reads in 441.890 CPU sec, 19.434 real sec
[M::process] read 1126726 sequences (240000110 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (10, 341626, 71, 10)
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (51, 240, 419)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1155)
[M::mem_pestat] mean and std.dev: (237.00, 184.42)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1523)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (167, 218, 286)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 524)
[M::mem_pestat] mean and std.dev: (227.44, 94.48)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 643)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (41, 105, 440)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1238)
[M::mem_pestat] mean and std.dev: (224.97, 294.37)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1637)
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (8, 34, 251)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 737)
[M::mem_pestat] mean and std.dev: (123.00, 163.22)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 980)
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_pestat] skip orientation RR
[M::mem_process_seqs] Processed 1126726 reads in 445.137 CPU sec, 19.584 real sec
[M::process] read 1137758 sequences (240000426 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (12, 338392, 121, 5)
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (137, 232, 535)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1331)
[M::mem_pestat] mean and std.dev: (232.27, 192.78)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1729)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (165, 214, 280)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 510)
[M::mem_pestat] mean and std.dev: (223.74, 91.37)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 625)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (44, 71, 161)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 395)
[M::mem_pestat] mean and std.dev: (80.08, 66.10)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 512)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1137758 reads in 469.184 CPU sec, 20.651 real sec
[M::process] read 1135950 sequences (240000097 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (9, 323530, 715, 6)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (163, 213, 278)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 508)
[M::mem_pestat] mean and std.dev: (221.89, 91.38)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 623)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (14, 31, 52)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 128)
[M::mem_pestat] mean and std.dev: (32.72, 23.38)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 166)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1135950 reads in 510.497 CPU sec, 22.434 real sec
[M::process] read 1102378 sequences (240000257 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (7, 335381, 58, 6)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (168, 222, 294)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 546)
[M::mem_pestat] mean and std.dev: (232.41, 99.70)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 672)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (68, 463, 1166)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 3362)
[M::mem_pestat] mean and std.dev: (643.48, 723.89)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 4460)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1102378 reads in 432.458 CPU sec, 19.015 real sec
[M::process] read 1103496 sequences (240000161 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (8, 337129, 44, 6)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (168, 221, 292)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 540)
[M::mem_pestat] mean and std.dev: (231.00, 98.75)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 664)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (106, 639, 1196)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 3376)
[M::mem_pestat] mean and std.dev: (741.33, 755.01)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 4466)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1103496 reads in 434.945 CPU sec, 19.160 real sec
[M::process] read 1105810 sequences (240000326 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (11, 338682, 31, 7)
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (38, 64, 426)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1202)
[M::mem_pestat] mean and std.dev: (201.64, 231.34)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1590)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (167, 220, 291)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 539)
[M::mem_pestat] mean and std.dev: (230.23, 97.93)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 663)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (59, 486, 1334)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 3884)
[M::mem_pestat] mean and std.dev: (798.10, 920.63)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 5159)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1105810 reads in 435.993 CPU sec, 19.190 real sec
[M::process] read 1109122 sequences (240000456 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (6, 339327, 40, 6)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (167, 219, 289)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 533)
[M::mem_pestat] mean and std.dev: (229.30, 97.00)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 655)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (47, 386, 1551)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 4559)
[M::mem_pestat] mean and std.dev: (624.44, 815.29)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 6063)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1109122 reads in 431.516 CPU sec, 18.995 real sec
[M::process] read 1128168 sequences (240000408 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (6, 341390, 76, 4)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (167, 218, 285)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 521)
[M::mem_pestat] mean and std.dev: (227.01, 94.00)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 639)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (36, 80, 574)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1650)
[M::mem_pestat] mean and std.dev: (245.71, 370.22)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 2188)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1128168 reads in 441.137 CPU sec, 19.421 real sec
[M::process] read 1129202 sequences (240000384 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (11, 342225, 74, 14)
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (29, 153, 272)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 758)
[M::mem_pestat] mean and std.dev: (153.70, 135.60)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1001)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (166, 217, 285)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 523)
[M::mem_pestat] mean and std.dev: (226.73, 93.92)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 642)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (56, 109, 770)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 2198)
[M::mem_pestat] mean and std.dev: (328.62, 447.72)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 2912)
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (27, 105, 255)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 711)
[M::mem_pestat] mean and std.dev: (162.00, 178.40)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 939)
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_pestat] skip orientation RR
[M::mem_process_seqs] Processed 1129202 reads in 441.126 CPU sec, 19.429 real sec
[M::process] read 1135214 sequences (240000296 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (9, 340590, 106, 6)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (166, 216, 282)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 514)
[M::mem_pestat] mean and std.dev: (225.05, 91.72)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 630)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (48, 78, 533)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1503)
[M::mem_pestat] mean and std.dev: (272.61, 389.49)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1988)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1135214 reads in 464.510 CPU sec, 20.459 real sec
[M::process] read 268280 sequences (56525481 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (0, 79388, 39, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (165, 214, 279)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 507)
[M::mem_pestat] mean and std.dev: (223.70, 89.72)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 621)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (60, 79, 660)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1860)
[M::mem_pestat] mean and std.dev: (286.78, 429.35)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 2460)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 268280 reads in 115.196 CPU sec, 5.060 real sec
[main] Version: 0.7.15-r1140
[main] CMD: bwa mem -t 24 ../data/Bins/work_files/assembly.fa /home-3/karoraw1@jhu.edu/scratch/Processed_data_group/SERC_051717_Shotgun_Metagenomes/QCd/QC_Renamed_Seqs/SERC_517_6_1.fastq /home-3/karoraw1@jhu.edu/scratch/Processed_data_group/SERC_051717_Shotgun_Metagenomes/QCd/QC_Renamed_Seqs/SERC_517_6_2.fastq
[main] Real time: 1339.364 sec; CPU: 11085.602 sec
[bam_sort_core] merging from 0 files and 24 in-memory blocks...

------------------------------------------------------------------------------------------------------------------------
-----                                                   Aligning                                                   -----
-----/home-3/karoraw1@jhu.edu/scratch/Processed_data_group/SERC_051717_Shotgun_Metagenomes/QCd/QC_Renamed_Seqs/SERC_517_7_1.fastq-----
-----                                                     and                                                      -----
-----/home-3/karoraw1@jhu.edu/scratch/Processed_data_group/SERC_051717_Shotgun_Metagenomes/QCd/QC_Renamed_Seqs/SERC_517_7_2.fastq-----
-----             back to assembly, sorting the alignment, and gathering statistics on insert lengths              -----
------------------------------------------------------------------------------------------------------------------------

[M::bwa_idx_load_from_disk] read 0 ALT contigs
[M::process] read 1147256 sequences (240000246 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (1, 400586, 38, 1)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (165, 215, 282)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 516)
[M::mem_pestat] mean and std.dev: (226.15, 90.18)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 633)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (80, 477, 1545)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 4475)
[M::mem_pestat] mean and std.dev: (574.62, 869.02)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 5940)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1147256 reads in 414.671 CPU sec, 23.719 real sec
[M::process] read 1159420 sequences (240000313 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (3, 402666, 48, 3)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (164, 213, 278)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 506)
[M::mem_pestat] mean and std.dev: (223.77, 88.08)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 620)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (42, 86, 136)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 324)
[M::mem_pestat] mean and std.dev: (83.50, 52.49)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 418)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1159420 reads in 419.496 CPU sec, 20.596 real sec
[M::process] read 1176238 sequences (240000239 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (1, 384488, 163, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (154, 202, 264)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 484)
[M::mem_pestat] mean and std.dev: (212.42, 83.71)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 594)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (41, 62, 105)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 233)
[M::mem_pestat] mean and std.dev: (66.88, 43.05)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 297)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1176238 reads in 512.201 CPU sec, 22.480 real sec
[M::process] read 1166928 sequences (240000050 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (5, 379223, 176, 9)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (156, 205, 269)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 495)
[M::mem_pestat] mean and std.dev: (215.22, 87.26)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 608)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (23, 40, 84)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 206)
[M::mem_pestat] mean and std.dev: (41.43, 35.07)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 267)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1166928 reads in 471.748 CPU sec, 20.784 real sec
[M::process] read 1133484 sequences (240000124 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (5, 396419, 26, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (165, 216, 283)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 519)
[M::mem_pestat] mean and std.dev: (227.16, 91.30)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 637)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (83, 319, 1337)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 3845)
[M::mem_pestat] mean and std.dev: (453.91, 517.84)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 5099)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1133484 reads in 407.840 CPU sec, 17.963 real sec
[M::process] read 1140826 sequences (240000003 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (3, 399763, 27, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (165, 215, 282)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 516)
[M::mem_pestat] mean and std.dev: (226.26, 90.40)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 633)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (89, 415, 765)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 2117)
[M::mem_pestat] mean and std.dev: (426.48, 424.35)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 2793)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1140826 reads in 403.496 CPU sec, 17.715 real sec
[M::process] read 1151096 sequences (240000430 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (1, 402334, 19, 1)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (164, 214, 280)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 512)
[M::mem_pestat] mean and std.dev: (224.83, 89.35)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 628)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (196, 689, 5021)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 14671)
[M::mem_pestat] mean and std.dev: (1940.89, 2626.61)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 19496)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1151096 reads in 406.716 CPU sec, 17.908 real sec
[M::process] read 1159458 sequences (240000079 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (2, 401887, 43, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (164, 212, 277)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 503)
[M::mem_pestat] mean and std.dev: (223.38, 87.07)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 616)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (52, 65, 277)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 727)
[M::mem_pestat] mean and std.dev: (109.00, 135.81)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 952)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1159458 reads in 430.961 CPU sec, 18.949 real sec
[M::process] read 1165326 sequences (240000381 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (5, 400620, 89, 3)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (164, 211, 274)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 494)
[M::mem_pestat] mean and std.dev: (221.72, 85.17)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 604)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (44, 74, 395)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1097)
[M::mem_pestat] mean and std.dev: (173.31, 246.36)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1448)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1165326 reads in 452.399 CPU sec, 19.926 real sec
[M::process] read 1167514 sequences (240000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (4, 387215, 61, 5)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (158, 206, 270)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 494)
[M::mem_pestat] mean and std.dev: (216.44, 86.27)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 606)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (54, 76, 314)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 834)
[M::mem_pestat] mean and std.dev: (140.17, 166.98)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1094)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1167514 reads in 480.833 CPU sec, 21.166 real sec
[M::process] read 1131822 sequences (240000148 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (3, 395814, 26, 3)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (167, 218, 286)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 524)
[M::mem_pestat] mean and std.dev: (229.46, 92.04)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 643)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (68, 88, 339)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 881)
[M::mem_pestat] mean and std.dev: (125.24, 122.58)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1152)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1131822 reads in 406.491 CPU sec, 17.886 real sec
[M::process] read 1139474 sequences (240000036 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (2, 396790, 36, 3)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (166, 216, 283)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 517)
[M::mem_pestat] mean and std.dev: (227.49, 90.51)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 634)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (55, 97, 452)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1246)
[M::mem_pestat] mean and std.dev: (175.87, 234.33)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1643)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1139474 reads in 411.657 CPU sec, 18.138 real sec
[M::process] read 1147532 sequences (240000394 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (4, 400132, 31, 3)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (166, 215, 282)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 514)
[M::mem_pestat] mean and std.dev: (226.72, 89.75)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 630)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (47, 71, 533)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1505)
[M::mem_pestat] mean and std.dev: (250.59, 328.92)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1991)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1147532 reads in 415.086 CPU sec, 18.287 real sec
[M::process] read 1160898 sequences (240000204 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (2, 399026, 107, 5)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (164, 212, 277)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 503)
[M::mem_pestat] mean and std.dev: (223.00, 87.16)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 616)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (47, 67, 133)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 305)
[M::mem_pestat] mean and std.dev: (72.18, 50.96)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 391)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1160898 reads in 456.501 CPU sec, 20.068 real sec
[M::process] read 1141208 sequences (240000131 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (3, 384411, 674, 1)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (163, 213, 281)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 517)
[M::mem_pestat] mean and std.dev: (224.72, 91.12)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 635)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (13, 27, 47)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 115)
[M::mem_pestat] mean and std.dev: (30.21, 21.77)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 149)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1141208 reads in 461.866 CPU sec, 20.371 real sec
[M::process] read 1126026 sequences (240000355 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (1, 394311, 28, 4)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (167, 218, 288)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 530)
[M::mem_pestat] mean and std.dev: (230.40, 93.61)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 651)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (54, 530, 1243)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 3621)
[M::mem_pestat] mean and std.dev: (704.73, 924.97)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 4810)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1126026 reads in 405.958 CPU sec, 17.861 real sec
[M::process] read 1128316 sequences (240000136 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (5, 395183, 24, 6)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (166, 217, 286)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 526)
[M::mem_pestat] mean and std.dev: (229.19, 92.55)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 646)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (160, 587, 1157)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 3151)
[M::mem_pestat] mean and std.dev: (594.57, 577.46)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 4148)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1128316 reads in 403.522 CPU sec, 17.779 real sec
[M::process] read 1131004 sequences (240000027 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (2, 395911, 15, 3)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (166, 216, 285)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 523)
[M::mem_pestat] mean and std.dev: (228.28, 91.93)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 642)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (625, 1590, 4774)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 13072)
[M::mem_pestat] mean and std.dev: (2993.40, 3112.85)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 17221)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1131004 reads in 406.656 CPU sec, 17.916 real sec
[M::process] read 1149224 sequences (240000281 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (5, 399755, 35, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (166, 215, 282)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 514)
[M::mem_pestat] mean and std.dev: (226.52, 89.62)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 630)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (47, 69, 377)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1037)
[M::mem_pestat] mean and std.dev: (195.73, 259.45)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1367)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1149224 reads in 418.049 CPU sec, 18.422 real sec
[M::process] read 1152210 sequences (240000265 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (1, 400964, 40, 1)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (165, 214, 280)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 510)
[M::mem_pestat] mean and std.dev: (225.24, 88.76)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 625)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (34, 72, 216)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 580)
[M::mem_pestat] mean and std.dev: (82.63, 72.05)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 762)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1152210 reads in 423.428 CPU sec, 18.665 real sec
[M::process] read 1079442 sequences (223463445 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (2, 372015, 98, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (164, 212, 276)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 500)
[M::mem_pestat] mean and std.dev: (223.16, 86.47)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 612)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (45, 68, 124)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 282)
[M::mem_pestat] mean and std.dev: (75.30, 49.04)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 361)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1079442 reads in 420.526 CPU sec, 18.516 real sec
[main] Version: 0.7.15-r1140
[main] CMD: bwa mem -t 24 ../data/Bins/work_files/assembly.fa /home-3/karoraw1@jhu.edu/scratch/Processed_data_group/SERC_051717_Shotgun_Metagenomes/QCd/QC_Renamed_Seqs/SERC_517_7_1.fastq /home-3/karoraw1@jhu.edu/scratch/Processed_data_group/SERC_051717_Shotgun_Metagenomes/QCd/QC_Renamed_Seqs/SERC_517_7_2.fastq
[main] Real time: 1162.186 sec; CPU: 9080.795 sec
[bam_sort_core] merging from 0 files and 24 in-memory blocks...

------------------------------------------------------------------------------------------------------------------------
-----                                                   Aligning                                                   -----
-----/home-3/karoraw1@jhu.edu/scratch/Processed_data_group/SERC_051717_Shotgun_Metagenomes/QCd/QC_Renamed_Seqs/SERC_517_8_1.fastq-----
-----                                                     and                                                      -----
-----/home-3/karoraw1@jhu.edu/scratch/Processed_data_group/SERC_051717_Shotgun_Metagenomes/QCd/QC_Renamed_Seqs/SERC_517_8_2.fastq-----
-----             back to assembly, sorting the alignment, and gathering statistics on insert lengths              -----
------------------------------------------------------------------------------------------------------------------------

[M::bwa_idx_load_from_disk] read 0 ALT contigs
[M::process] read 1097212 sequences (240000099 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (3, 352285, 39, 6)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (181, 238, 314)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 580)
[M::mem_pestat] mean and std.dev: (249.98, 104.26)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 713)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (82, 367, 996)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 2824)
[M::mem_pestat] mean and std.dev: (487.60, 519.66)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 3738)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1097212 reads in 442.789 CPU sec, 25.163 real sec
[M::process] read 1109872 sequences (240000419 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (2, 354520, 57, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (181, 236, 310)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 568)
[M::mem_pestat] mean and std.dev: (247.41, 101.67)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 697)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (53, 182, 883)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 2543)
[M::mem_pestat] mean and std.dev: (398.00, 438.26)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 3373)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1109872 reads in 444.904 CPU sec, 21.571 real sec
[M::process] read 1130382 sequences (240000329 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (8, 337208, 176, 6)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (168, 222, 291)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 537)
[M::mem_pestat] mean and std.dev: (232.77, 95.05)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 660)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (45, 66, 120)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 270)
[M::mem_pestat] mean and std.dev: (68.35, 43.38)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 345)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1130382 reads in 522.860 CPU sec, 22.999 real sec
[M::process] read 1089638 sequences (240000192 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (7, 333296, 126, 4)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (179, 237, 315)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 587)
[M::mem_pestat] mean and std.dev: (249.13, 106.50)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 723)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (17, 34, 81)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 209)
[M::mem_pestat] mean and std.dev: (32.96, 29.56)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 273)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1089638 reads in 452.254 CPU sec, 19.877 real sec
[M::process] read 1084300 sequences (240000405 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (5, 349103, 42, 6)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (182, 239, 316)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 584)
[M::mem_pestat] mean and std.dev: (251.28, 105.52)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 718)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (65, 322, 786)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 2228)
[M::mem_pestat] mean and std.dev: (361.97, 371.01)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 2949)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1084300 reads in 432.019 CPU sec, 19.019 real sec
[M::process] read 1093562 sequences (240000319 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (3, 351930, 46, 3)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (181, 238, 313)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 577)
[M::mem_pestat] mean and std.dev: (249.17, 103.96)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 709)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (59, 262, 946)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 2720)
[M::mem_pestat] mean and std.dev: (467.43, 534.75)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 3607)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1093562 reads in 432.023 CPU sec, 19.000 real sec
[M::process] read 1103694 sequences (240000056 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (4, 354504, 42, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (180, 236, 309)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 567)
[M::mem_pestat] mean and std.dev: (246.49, 101.37)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 696)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (53, 209, 845)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 2429)
[M::mem_pestat] mean and std.dev: (402.02, 434.61)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 3221)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1103694 reads in 441.944 CPU sec, 19.460 real sec
[M::process] read 1111920 sequences (240000171 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (4, 352787, 88, 4)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (180, 234, 306)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 558)
[M::mem_pestat] mean and std.dev: (244.99, 99.11)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 684)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (47, 87, 451)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1259)
[M::mem_pestat] mean and std.dev: (250.60, 331.34)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1663)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1111920 reads in 466.653 CPU sec, 20.482 real sec
[M::process] read 1126558 sequences (240000241 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (4, 345731, 129, 1)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (164, 219, 289)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 539)
[M::mem_pestat] mean and std.dev: (229.74, 96.34)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 664)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (38, 64, 122)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 290)
[M::mem_pestat] mean and std.dev: (68.35, 51.65)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 374)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1126558 reads in 500.277 CPU sec, 21.984 real sec
[M::process] read 1103032 sequences (240000061 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (4, 341516, 61, 6)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (181, 236, 311)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 571)
[M::mem_pestat] mean and std.dev: (248.11, 101.83)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 701)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (43, 76, 658)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1888)
[M::mem_pestat] mean and std.dev: (301.52, 379.03)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 2503)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1103032 reads in 470.684 CPU sec, 20.748 real sec
[M::process] read 1083566 sequences (240000080 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (5, 347475, 51, 3)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (183, 241, 319)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 591)
[M::mem_pestat] mean and std.dev: (253.46, 106.30)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 727)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (94, 550, 1109)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 3139)
[M::mem_pestat] mean and std.dev: (565.96, 597.50)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 4154)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1083566 reads in 437.476 CPU sec, 19.200 real sec
[M::process] read 1087740 sequences (240000471 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (6, 349941, 50, 4)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (182, 239, 316)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 584)
[M::mem_pestat] mean and std.dev: (251.08, 104.66)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 718)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (41, 404, 873)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 2537)
[M::mem_pestat] mean and std.dev: (466.75, 450.02)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 3369)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1087740 reads in 436.756 CPU sec, 19.207 real sec
[M::process] read 1103186 sequences (240000355 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (8, 352665, 57, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (182, 238, 313)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 575)
[M::mem_pestat] mean and std.dev: (249.55, 102.90)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 706)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (71, 119, 932)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 2654)
[M::mem_pestat] mean and std.dev: (438.72, 566.84)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 3515)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1103186 reads in 446.627 CPU sec, 19.640 real sec
[M::process] read 1115736 sequences (240000100 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (9, 340654, 538, 5)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (177, 232, 304)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 558)
[M::mem_pestat] mean and std.dev: (242.52, 99.36)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 685)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (16, 30, 52)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 124)
[M::mem_pestat] mean and std.dev: (33.38, 23.70)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 160)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1115736 reads in 517.234 CPU sec, 22.784 real sec
[M::process] read 1073748 sequences (240000299 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (6, 345114, 34, 3)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (184, 244, 324)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 604)
[M::mem_pestat] mean and std.dev: (256.68, 109.55)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 744)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (37, 527, 903)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 2635)
[M::mem_pestat] mean and std.dev: (420.70, 406.11)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 3501)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1073748 reads in 436.998 CPU sec, 19.247 real sec
[M::process] read 1075008 sequences (240000164 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (3, 346120, 34, 5)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (184, 243, 322)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 598)
[M::mem_pestat] mean and std.dev: (255.23, 108.27)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 736)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (365, 813, 1082)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 2516)
[M::mem_pestat] mean and std.dev: (745.61, 541.29)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 3233)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1075008 reads in 433.846 CPU sec, 19.056 real sec
[M::process] read 1077214 sequences (240000408 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (8, 346873, 33, 6)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (183, 241, 320)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 594)
[M::mem_pestat] mean and std.dev: (253.69, 107.29)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 731)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (108, 500, 989)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 2751)
[M::mem_pestat] mean and std.dev: (533.60, 533.05)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 3632)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1077214 reads in 435.889 CPU sec, 19.200 real sec
[M::process] read 1085996 sequences (240000063 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (7, 348622, 46, 6)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (183, 240, 317)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 585)
[M::mem_pestat] mean and std.dev: (252.14, 105.38)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 719)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (78, 195, 650)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1794)
[M::mem_pestat] mean and std.dev: (356.58, 431.06)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 2366)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1085996 reads in 440.003 CPU sec, 19.367 real sec
[M::process] read 1100298 sequences (240000254 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (3, 352025, 69, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (182, 238, 314)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 578)
[M::mem_pestat] mean and std.dev: (250.08, 103.54)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 710)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (47, 92, 271)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 719)
[M::mem_pestat] mean and std.dev: (118.51, 146.41)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 943)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1100298 reads in 448.856 CPU sec, 19.745 real sec
[M::process] read 1106554 sequences (240000094 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (3, 352288, 82, 6)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (180, 235, 308)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 564)
[M::mem_pestat] mean and std.dev: (246.38, 100.26)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 692)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (44, 81, 297)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 803)
[M::mem_pestat] mean and std.dev: (144.90, 192.08)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1056)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1106554 reads in 465.222 CPU sec, 20.483 real sec
[M::process] read 248352 sequences (53531739 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (0, 77601, 22, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (179, 233, 303)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 551)
[M::mem_pestat] mean and std.dev: (243.64, 97.09)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 675)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (41, 97, 287)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 779)
[M::mem_pestat] mean and std.dev: (143.05, 171.99)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1025)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 248352 reads in 113.082 CPU sec, 4.954 real sec
[main] Version: 0.7.15-r1140
[main] CMD: bwa mem -t 24 ../data/Bins/work_files/assembly.fa /home-3/karoraw1@jhu.edu/scratch/Processed_data_group/SERC_051717_Shotgun_Metagenomes/QCd/QC_Renamed_Seqs/SERC_517_8_1.fastq /home-3/karoraw1@jhu.edu/scratch/Processed_data_group/SERC_051717_Shotgun_Metagenomes/QCd/QC_Renamed_Seqs/SERC_517_8_2.fastq
[main] Real time: 1117.003 sec; CPU: 9266.216 sec
[bam_sort_core] merging from 0 files and 24 in-memory blocks...

------------------------------------------------------------------------------------------------------------------------
-----                                                   Aligning                                                   -----
-----/home-3/karoraw1@jhu.edu/scratch/Processed_data_group/SERC_051717_Shotgun_Metagenomes/QCd/QC_Renamed_Seqs/SERC_517_9_1.fastq-----
-----                                                     and                                                      -----
-----/home-3/karoraw1@jhu.edu/scratch/Processed_data_group/SERC_051717_Shotgun_Metagenomes/QCd/QC_Renamed_Seqs/SERC_517_9_2.fastq-----
-----             back to assembly, sorting the alignment, and gathering statistics on insert lengths              -----
------------------------------------------------------------------------------------------------------------------------

[M::bwa_idx_load_from_disk] read 0 ALT contigs
[M::process] read 1184348 sequences (240000365 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (4, 395698, 62, 11)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (154, 210, 286)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 550)
[M::mem_pestat] mean and std.dev: (225.21, 98.60)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 682)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (42, 93, 591)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1689)
[M::mem_pestat] mean and std.dev: (216.05, 269.90)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 2238)
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (12, 28, 81)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 219)
[M::mem_pestat] mean and std.dev: (24.44, 22.67)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 288)
[M::mem_pestat] skip orientation RF
[M::mem_pestat] skip orientation RR
[M::mem_process_seqs] Processed 1184348 reads in 450.817 CPU sec, 26.463 real sec
[M::process] read 1170124 sequences (240000076 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (11, 392535, 80, 4)
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (20, 44, 222)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 626)
[M::mem_pestat] mean and std.dev: (90.55, 108.47)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 828)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (155, 211, 289)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 557)
[M::mem_pestat] mean and std.dev: (226.75, 100.55)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 691)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (54, 88, 520)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1452)
[M::mem_pestat] mean and std.dev: (206.59, 270.73)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1918)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1170124 reads in 426.947 CPU sec, 20.687 real sec
[M::process] read 1182332 sequences (240000161 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (6, 402506, 59, 5)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (157, 212, 288)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 550)
[M::mem_pestat] mean and std.dev: (227.10, 97.97)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 681)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (61, 314, 1002)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 2884)
[M::mem_pestat] mean and std.dev: (270.04, 312.98)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 3825)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1182332 reads in 427.962 CPU sec, 18.743 real sec
[M::process] read 1173116 sequences (240000248 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (8, 391538, 73, 6)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (153, 211, 288)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 558)
[M::mem_pestat] mean and std.dev: (225.75, 100.81)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 693)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (51, 80, 835)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 2403)
[M::mem_pestat] mean and std.dev: (394.31, 602.23)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 3187)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1173116 reads in 442.096 CPU sec, 19.477 real sec
[M::process] read 1171076 sequences (240000330 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (8, 394710, 208, 3)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (158, 215, 293)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 563)
[M::mem_pestat] mean and std.dev: (230.27, 101.16)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 698)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (16, 37, 61)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 151)
[M::mem_pestat] mean and std.dev: (35.60, 26.43)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 196)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1171076 reads in 437.400 CPU sec, 19.227 real sec
[M::process] read 1146954 sequences (240000156 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (7, 394573, 32, 4)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (160, 220, 301)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 583)
[M::mem_pestat] mean and std.dev: (235.90, 105.54)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 724)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (240, 3381, 5035)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 14625)
[M::mem_pestat] mean and std.dev: (2972.84, 2741.49)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 19420)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1146954 reads in 405.192 CPU sec, 17.855 real sec
[M::process] read 1174896 sequences (240000295 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (11, 399602, 62, 1)
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (31, 98, 406)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1156)
[M::mem_pestat] mean and std.dev: (152.70, 186.41)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1531)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (158, 215, 291)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 557)
[M::mem_pestat] mean and std.dev: (229.55, 99.60)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 690)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (37, 86, 360)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1006)
[M::mem_pestat] mean and std.dev: (121.16, 175.36)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1329)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1174896 reads in 427.581 CPU sec, 18.833 real sec
[M::process] read 9474 sequences (1913759 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (0, 3056, 2, 0)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (158, 212, 283)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 533)
[M::mem_pestat] mean and std.dev: (225.57, 95.71)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 658)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 9474 reads in 4.318 CPU sec, 0.196 real sec
[main] Version: 0.7.15-r1140
[main] CMD: bwa mem -t 24 ../data/Bins/work_files/assembly.fa /home-3/karoraw1@jhu.edu/scratch/Processed_data_group/SERC_051717_Shotgun_Metagenomes/QCd/QC_Renamed_Seqs/SERC_517_9_1.fastq /home-3/karoraw1@jhu.edu/scratch/Processed_data_group/SERC_051717_Shotgun_Metagenomes/QCd/QC_Renamed_Seqs/SERC_517_9_2.fastq
[main] Real time: 412.843 sec; CPU: 3040.503 sec
[bam_sort_core] merging from 0 files and 24 in-memory blocks...

------------------------------------------------------------------------------------------------------------------------
-----                                                   Aligning                                                   -----
-----/home-3/karoraw1@jhu.edu/scratch/Processed_data_group/SERC_051717_Shotgun_Metagenomes/QCd/QC_Renamed_Seqs/SERC_Zymo_Pos_Control_1.fastq-----
-----                                                     and                                                      -----
-----/home-3/karoraw1@jhu.edu/scratch/Processed_data_group/SERC_051717_Shotgun_Metagenomes/QCd/QC_Renamed_Seqs/SERC_Zymo_Pos_Control_2.fastq-----
-----             back to assembly, sorting the alignment, and gathering statistics on insert lengths              -----
------------------------------------------------------------------------------------------------------------------------

[M::bwa_idx_load_from_disk] read 0 ALT contigs
[M::process] read 1222594 sequences (240000342 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (5, 579460, 21, 6)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (155, 204, 273)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 509)
[M::mem_pestat] mean and std.dev: (219.99, 85.86)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 627)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (258, 2943, 5015)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 14529)
[M::mem_pestat] mean and std.dev: (2942.76, 2087.52)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 19286)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1222594 reads in 203.117 CPU sec, 12.143 real sec
[M::process] read 1240108 sequences (240000256 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (15, 577640, 24, 9)
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (32, 54, 135)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 341)
[M::mem_pestat] mean and std.dev: (53.50, 33.05)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 444)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (147, 195, 262)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 492)
[M::mem_pestat] mean and std.dev: (209.91, 84.14)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 607)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (118, 1806, 5006)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 14782)
[M::mem_pestat] mean and std.dev: (2458.96, 2575.27)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 19670)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1240108 reads in 299.637 CPU sec, 14.942 real sec
[M::process] read 1225720 sequences (240000377 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (9, 565824, 88, 4)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (150, 199, 268)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 504)
[M::mem_pestat] mean and std.dev: (214.59, 86.08)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 622)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (10, 22, 44)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 112)
[M::mem_pestat] mean and std.dev: (21.43, 15.61)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 146)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1225720 reads in 253.629 CPU sec, 11.292 real sec
[M::process] read 1209246 sequences (240000115 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (17, 572598, 22, 5)
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (44, 84, 1115)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 3257)
[M::mem_pestat] mean and std.dev: (309.27, 644.98)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 4328)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (155, 205, 275)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 515)
[M::mem_pestat] mean and std.dev: (221.20, 86.94)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 635)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (152, 2891, 5002)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 14702)
[M::mem_pestat] mean and std.dev: (2678.23, 2444.42)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 19552)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1209246 reads in 190.812 CPU sec, 8.489 real sec
[M::process] read 1222150 sequences (240000189 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (10, 579675, 20, 2)
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (77, 1682, 3604)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 10658)
[M::mem_pestat] mean and std.dev: (2024.20, 2440.14)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 14185)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (154, 203, 272)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 508)
[M::mem_pestat] mean and std.dev: (219.31, 85.45)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 626)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (603, 2865, 5021)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 13857)
[M::mem_pestat] mean and std.dev: (3162.30, 2683.32)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 18275)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1222150 reads in 194.681 CPU sec, 8.648 real sec
[M::process] read 1234922 sequences (240000118 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (11, 585427, 14, 6)
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (53, 121, 2010)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 5924)
[M::mem_pestat] mean and std.dev: (967.60, 1248.10)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 7881)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (153, 201, 268)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 498)
[M::mem_pestat] mean and std.dev: (216.87, 83.48)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 613)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (91, 603, 5023)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 14887)
[M::mem_pestat] mean and std.dev: (2197.93, 2270.35)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 19819)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1234922 reads in 248.574 CPU sec, 11.007 real sec
[M::process] read 1251084 sequences (240000325 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (9, 583065, 19, 3)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (147, 194, 259)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 483)
[M::mem_pestat] mean and std.dev: (208.31, 81.85)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 595)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (67, 404, 4973)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 14785)
[M::mem_pestat] mean and std.dev: (2167.47, 2691.57)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 19691)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1251084 reads in 338.576 CPU sec, 14.925 real sec
[M::process] read 1201580 sequences (240000275 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (4, 568583, 24, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (157, 207, 279)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 523)
[M::mem_pestat] mean and std.dev: (224.20, 88.63)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 645)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (683, 4994, 5048)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 13778)
[M::mem_pestat] mean and std.dev: (3682.92, 2908.03)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 18143)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1201580 reads in 193.007 CPU sec, 8.572 real sec
[M::process] read 1210278 sequences (240000340 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (9, 572968, 29, 4)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (156, 206, 276)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 516)
[M::mem_pestat] mean and std.dev: (222.15, 87.24)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 636)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (125, 4962, 5045)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 14885)
[M::mem_pestat] mean and std.dev: (3406.07, 3086.28)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 19805)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1210278 reads in 204.519 CPU sec, 9.074 real sec
[M::process] read 1225828 sequences (240000192 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (14, 580317, 26, 6)
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (38, 60, 1733)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 5123)
[M::mem_pestat] mean and std.dev: (221.09, 483.95)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 6818)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (154, 203, 272)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 508)
[M::mem_pestat] mean and std.dev: (219.11, 85.69)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 626)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (60, 302, 4608)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 13704)
[M::mem_pestat] mean and std.dev: (1758.77, 2123.12)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 18252)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1225828 reads in 242.773 CPU sec, 10.755 real sec
[M::process] read 1216816 sequences (240000471 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (13, 566190, 461, 3)
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (34, 87, 1833)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 5431)
[M::mem_pestat] mean and std.dev: (990.15, 1328.99)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 7230)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (154, 203, 273)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 511)
[M::mem_pestat] mean and std.dev: (219.12, 86.95)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 630)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (9, 21, 36)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 90)
[M::mem_pestat] mean and std.dev: (23.11, 17.41)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 117)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1216816 reads in 279.180 CPU sec, 12.344 real sec
[M::process] read 1195668 sequences (240000057 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (18, 565382, 16, 5)
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (42, 81, 3866)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 11514)
[M::mem_pestat] mean and std.dev: (2198.33, 3361.24)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 15643)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (157, 208, 280)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 526)
[M::mem_pestat] mean and std.dev: (225.06, 89.56)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 649)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (2822, 3313, 5027)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 9437)
[M::mem_pestat] mean and std.dev: (3345.44, 1781.43)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 11642)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1195668 reads in 184.755 CPU sec, 8.217 real sec
[M::process] read 1199160 sequences (240000279 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (11, 567951, 20, 3)
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (49, 72, 130)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 292)
[M::mem_pestat] mean and std.dev: (80.20, 41.95)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 373)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (156, 207, 278)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 522)
[M::mem_pestat] mean and std.dev: (223.74, 88.47)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 644)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (125, 5016, 5050)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 14900)
[M::mem_pestat] mean and std.dev: (3515.90, 2399.42)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 19825)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1199160 reads in 186.319 CPU sec, 8.273 real sec
[M::process] read 1215456 sequences (240000014 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (7, 575453, 17, 5)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (156, 205, 274)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 510)
[M::mem_pestat] mean and std.dev: (221.22, 86.22)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 628)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (222, 1436, 5030)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 14646)
[M::mem_pestat] mean and std.dev: (2628.12, 2290.65)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 19454)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1215456 reads in 205.276 CPU sec, 9.106 real sec
[M::process] read 1224188 sequences (240000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (18, 580062, 13, 3)
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (57, 156, 4523)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 13455)
[M::mem_pestat] mean and std.dev: (2249.39, 3151.68)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 17921)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (155, 204, 272)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 506)
[M::mem_pestat] mean and std.dev: (219.51, 85.02)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 623)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (239, 2971, 5027)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 14603)
[M::mem_pestat] mean and std.dev: (2399.54, 2058.11)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 19391)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 1224188 reads in 228.593 CPU sec, 10.143 real sec
[M::process] read 622884 sequences (121382589 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (3, 295106, 8, 5)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (154, 202, 269)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 499)
[M::mem_pestat] mean and std.dev: (217.29, 83.50)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 614)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 622884 reads in 147.567 CPU sec, 6.522 real sec
[main] Version: 0.7.15-r1140
[main] CMD: bwa mem -t 24 ../data/Bins/work_files/assembly.fa /home-3/karoraw1@jhu.edu/scratch/Processed_data_group/SERC_051717_Shotgun_Metagenomes/QCd/QC_Renamed_Seqs/SERC_Zymo_Pos_Control_1.fastq /home-3/karoraw1@jhu.edu/scratch/Processed_data_group/SERC_051717_Shotgun_Metagenomes/QCd/QC_Renamed_Seqs/SERC_Zymo_Pos_Control_2.fastq
[main] Real time: 834.581 sec; CPU: 3642.461 sec
[bam_sort_core] merging from 0 files and 24 in-memory blocks...

------------------------------------------------------------------------------------------------------------------------
-----                                                   Aligning                                                   -----
-----/home-3/karoraw1@jhu.edu/scratch/Processed_data_group/CB33_Summer17_NexteraXT/QCd/QC_Renamed_Seqs/CB_Zymo_Cellular_Ctrl_1.fastq-----
-----                                                     and                                                      -----
-----/home-3/karoraw1@jhu.edu/scratch/Processed_data_group/CB33_Summer17_NexteraXT/QCd/QC_Renamed_Seqs/CB_Zymo_Cellular_Ctrl_2.fastq-----
-----             back to assembly, sorting the alignment, and gathering statistics on insert lengths              -----
------------------------------------------------------------------------------------------------------------------------

[M::bwa_idx_load_from_disk] read 0 ALT contigs
[M::process] read 1464462 sequences (240000027 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (38, 701437, 8, 29)
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (107, 188, 426)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1064)
[M::mem_pestat] mean and std.dev: (259.94, 225.15)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1383)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (121, 160, 208)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 382)
[M::mem_pestat] mean and std.dev: (164.70, 65.58)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 469)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (66, 135, 219)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 525)
[M::mem_pestat] mean and std.dev: (139.65, 83.08)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 678)
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RR
[M::mem_process_seqs] Processed 1464462 reads in 194.894 CPU sec, 11.971 real sec
[M::process] read 1474056 sequences (240000390 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (61, 705757, 9, 31)
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (92, 162, 288)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 680)
[M::mem_pestat] mean and std.dev: (171.52, 114.12)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 876)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (120, 159, 206)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 378)
[M::mem_pestat] mean and std.dev: (163.38, 64.68)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 464)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (103, 192, 336)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 802)
[M::mem_pestat] mean and std.dev: (217.17, 173.37)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1035)
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RR
[M::mem_process_seqs] Processed 1474056 reads in 188.709 CPU sec, 11.050 real sec
[M::process] read 1463528 sequences (240000333 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (64, 700795, 12, 38)
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (88, 160, 238)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 538)
[M::mem_pestat] mean and std.dev: (177.42, 114.20)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 688)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (122, 161, 207)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 377)
[M::mem_pestat] mean and std.dev: (164.79, 64.15)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 462)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (330, 2672, 2910)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 8070)
[M::mem_pestat] mean and std.dev: (1875.67, 1682.68)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 10650)
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (103, 155, 236)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 502)
[M::mem_pestat] mean and std.dev: (150.53, 89.59)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 635)
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_pestat] skip orientation RR
[M::mem_process_seqs] Processed 1463528 reads in 185.536 CPU sec, 8.235 real sec
[M::process] read 1465932 sequences (240000031 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (50, 701782, 10, 40)
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (72, 145, 323)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 825)
[M::mem_pestat] mean and std.dev: (204.27, 181.72)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1076)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (121, 160, 208)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 382)
[M::mem_pestat] mean and std.dev: (164.58, 65.51)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 469)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (168, 708, 2627)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 7545)
[M::mem_pestat] mean and std.dev: (1106.30, 1167.18)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 10004)
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (117, 202, 412)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1002)
[M::mem_pestat] mean and std.dev: (251.50, 214.37)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1297)
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_pestat] skip orientation RR
[M::mem_process_seqs] Processed 1465932 reads in 186.442 CPU sec, 8.475 real sec
[M::process] read 1475084 sequences (240000250 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (53, 706285, 14, 44)
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (70, 161, 295)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 745)
[M::mem_pestat] mean and std.dev: (170.58, 142.45)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 970)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (120, 159, 206)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 378)
[M::mem_pestat] mean and std.dev: (163.49, 64.30)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 464)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (90, 2501, 2907)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 8541)
[M::mem_pestat] mean and std.dev: (1502.29, 1349.71)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 11358)
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (58, 112, 216)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 532)
[M::mem_pestat] mean and std.dev: (148.12, 125.77)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 690)
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_pestat] skip orientation RR
[M::mem_process_seqs] Processed 1475084 reads in 185.139 CPU sec, 8.241 real sec
[M::process] read 1453386 sequences (240000097 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (59, 695701, 12, 46)
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (79, 140, 320)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 802)
[M::mem_pestat] mean and std.dev: (205.25, 182.99)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1043)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (122, 162, 209)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 383)
[M::mem_pestat] mean and std.dev: (166.12, 65.26)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 470)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (102, 718, 2472)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 7212)
[M::mem_pestat] mean and std.dev: (1137.00, 1134.13)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 9582)
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (76, 167, 364)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 940)
[M::mem_pestat] mean and std.dev: (236.89, 201.86)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1228)
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_pestat] skip orientation RR
[M::mem_process_seqs] Processed 1453386 reads in 213.498 CPU sec, 9.488 real sec
[M::process] read 1462494 sequences (240000055 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (41, 700163, 9, 34)
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (96, 156, 337)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 819)
[M::mem_pestat] mean and std.dev: (202.41, 141.29)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1060)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (121, 160, 208)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 382)
[M::mem_pestat] mean and std.dev: (164.88, 65.34)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 469)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (88, 222, 350)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 874)
[M::mem_pestat] mean and std.dev: (257.36, 226.71)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1164)
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RR
[M::mem_process_seqs] Processed 1462494 reads in 215.067 CPU sec, 9.563 real sec
[M::process] read 1460346 sequences (240000035 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (46, 699316, 11, 46)
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (77, 124, 233)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 545)
[M::mem_pestat] mean and std.dev: (156.34, 112.06)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 701)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (122, 161, 208)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 380)
[M::mem_pestat] mean and std.dev: (165.22, 64.62)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 466)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (88, 91, 2612)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 7660)
[M::mem_pestat] mean and std.dev: (1138.18, 1230.89)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 10184)
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (97, 126, 221)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 469)
[M::mem_pestat] mean and std.dev: (145.73, 88.48)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 593)
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_pestat] skip orientation RR
[M::mem_process_seqs] Processed 1460346 reads in 189.463 CPU sec, 8.453 real sec
[M::process] read 1455560 sequences (240000322 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (40, 697236, 14, 34)
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (80, 170, 313)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 779)
[M::mem_pestat] mean and std.dev: (192.36, 144.66)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1012)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (122, 161, 210)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 386)
[M::mem_pestat] mean and std.dev: (165.80, 66.12)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 474)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (113, 1059, 2769)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 8081)
[M::mem_pestat] mean and std.dev: (1308.00, 1261.24)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 10737)
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (66, 131, 413)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1107)
[M::mem_pestat] mean and std.dev: (219.18, 225.85)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1454)
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_pestat] skip orientation RR
[M::mem_process_seqs] Processed 1455560 reads in 185.985 CPU sec, 8.291 real sec
[M::process] read 1464538 sequences (240000204 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (55, 701581, 10, 40)
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (72, 149, 344)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 888)
[M::mem_pestat] mean and std.dev: (213.94, 181.51)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1160)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (121, 160, 208)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 382)
[M::mem_pestat] mean and std.dev: (164.70, 65.18)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 469)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (102, 139, 2746)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 8034)
[M::mem_pestat] mean and std.dev: (1165.00, 1318.05)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 10678)
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (72, 102, 210)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 486)
[M::mem_pestat] mean and std.dev: (125.86, 88.24)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 624)
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_pestat] skip orientation RR
[M::mem_process_seqs] Processed 1464538 reads in 183.944 CPU sec, 8.201 real sec
[M::process] read 586808 sequences (96547041 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (28, 281094, 7, 20)
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (57, 109, 179)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 423)
[M::mem_pestat] mean and std.dev: (126.35, 100.24)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 545)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (123, 161, 207)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 375)
[M::mem_pestat] mean and std.dev: (165.47, 63.51)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 459)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (61, 187, 248)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 622)
[M::mem_pestat] mean and std.dev: (162.00, 119.37)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 809)
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RR
[M::mem_process_seqs] Processed 586808 reads in 74.595 CPU sec, 3.316 real sec
[main] Version: 0.7.15-r1140
[main] CMD: bwa mem -t 24 ../data/Bins/work_files/assembly.fa /home-3/karoraw1@jhu.edu/scratch/Processed_data_group/CB33_Summer17_NexteraXT/QCd/QC_Renamed_Seqs/CB_Zymo_Cellular_Ctrl_1.fastq /home-3/karoraw1@jhu.edu/scratch/Processed_data_group/CB33_Summer17_NexteraXT/QCd/QC_Renamed_Seqs/CB_Zymo_Cellular_Ctrl_2.fastq
[main] Real time: 559.575 sec; CPU: 2034.653 sec
[bam_sort_core] merging from 0 files and 24 in-memory blocks...

------------------------------------------------------------------------------------------------------------------------
-----                                                   Aligning                                                   -----
-----/home-3/karoraw1@jhu.edu/scratch/Processed_data_group/CB33_Summer17_NexteraXT/QCd/QC_Renamed_Seqs/CB_Zymo_DNA_Ctrl_1.fastq-----
-----                                                     and                                                      -----
-----/home-3/karoraw1@jhu.edu/scratch/Processed_data_group/CB33_Summer17_NexteraXT/QCd/QC_Renamed_Seqs/CB_Zymo_DNA_Ctrl_2.fastq-----
-----             back to assembly, sorting the alignment, and gathering statistics on insert lengths              -----
------------------------------------------------------------------------------------------------------------------------

[M::bwa_idx_load_from_disk] read 0 ALT contigs
[M::process] read 1271492 sequences (240000030 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (104, 605376, 31, 81)
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (157, 255, 369)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 793)
[M::mem_pestat] mean and std.dev: (260.66, 150.95)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1005)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (137, 211, 324)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 698)
[M::mem_pestat] mean and std.dev: (239.24, 137.64)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 885)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (140, 1228, 2758)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 7994)
[M::mem_pestat] mean and std.dev: (1356.10, 1248.13)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 10612)
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (114, 207, 303)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 681)
[M::mem_pestat] mean and std.dev: (212.04, 141.59)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 870)
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_pestat] skip orientation RR
[M::mem_process_seqs] Processed 1271492 reads in 193.502 CPU sec, 11.668 real sec
[M::process] read 1269166 sequences (240000300 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (123, 604447, 22, 77)
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (124, 215, 308)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 676)
[M::mem_pestat] mean and std.dev: (225.43, 126.91)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 860)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (137, 212, 326)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 704)
[M::mem_pestat] mean and std.dev: (240.57, 138.56)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 893)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (88, 1355, 2768)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 8128)
[M::mem_pestat] mean and std.dev: (1396.45, 1151.95)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 10808)
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (116, 219, 290)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 638)
[M::mem_pestat] mean and std.dev: (208.55, 115.91)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 812)
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_pestat] skip orientation RR
[M::mem_process_seqs] Processed 1269166 reads in 192.775 CPU sec, 10.657 real sec
[M::process] read 1261848 sequences (240000474 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (127, 600449, 26, 99)
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (126, 219, 327)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 729)
[M::mem_pestat] mean and std.dev: (221.90, 129.36)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 930)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (139, 215, 331)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 715)
[M::mem_pestat] mean and std.dev: (243.94, 141.19)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 907)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (124, 1290, 2635)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 7657)
[M::mem_pestat] mean and std.dev: (1459.73, 1467.55)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 10168)
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (113, 190, 287)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 635)
[M::mem_pestat] mean and std.dev: (202.21, 121.28)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 809)
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_pestat] skip orientation RR
[M::mem_process_seqs] Processed 1261848 reads in 206.557 CPU sec, 9.193 real sec
[M::process] read 754630 sequences (142860401 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (77, 359191, 18, 45)
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (161, 235, 368)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 782)
[M::mem_pestat] mean and std.dev: (268.51, 152.93)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 989)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (137, 212, 326)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 704)
[M::mem_pestat] mean and std.dev: (240.49, 137.96)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 893)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (188, 1424, 2728)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 7808)
[M::mem_pestat] mean and std.dev: (1949.06, 1759.03)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 10348)
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (140, 215, 376)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 848)
[M::mem_pestat] mean and std.dev: (226.88, 124.39)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1084)
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_pestat] skip orientation RR
[M::mem_process_seqs] Processed 754630 reads in 110.016 CPU sec, 4.887 real sec
[main] Version: 0.7.15-r1140
[main] CMD: bwa mem -t 24 ../data/Bins/work_files/assembly.fa /home-3/karoraw1@jhu.edu/scratch/Processed_data_group/CB33_Summer17_NexteraXT/QCd/QC_Renamed_Seqs/CB_Zymo_DNA_Ctrl_1.fastq /home-3/karoraw1@jhu.edu/scratch/Processed_data_group/CB33_Summer17_NexteraXT/QCd/QC_Renamed_Seqs/CB_Zymo_DNA_Ctrl_2.fastq
[main] Real time: 205.297 sec; CPU: 714.291 sec
[bam_sort_core] merging from 0 files and 24 in-memory blocks...

------------------------------------------------------------------------------------------------------------------------
-----                                                   Aligning                                                   -----
-----/home-3/karoraw1@jhu.edu/scratch/Processed_data_group/CB33_Summer17_NexteraXT/QCd/QC_Renamed_Seqs/SERC_051717_Sample11_1.fastq-----
-----                                                     and                                                      -----
-----/home-3/karoraw1@jhu.edu/scratch/Processed_data_group/CB33_Summer17_NexteraXT/QCd/QC_Renamed_Seqs/SERC_051717_Sample11_2.fastq-----
-----             back to assembly, sorting the alignment, and gathering statistics on insert lengths              -----
------------------------------------------------------------------------------------------------------------------------

[M::bwa_idx_load_from_disk] read 0 ALT contigs
[M::process] read 1362742 sequences (240000261 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (24, 410203, 25, 20)
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (73, 120, 188)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 418)
[M::mem_pestat] mean and std.dev: (124.52, 78.46)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 533)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (112, 163, 217)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 427)
[M::mem_pestat] mean and std.dev: (166.39, 78.88)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 532)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (69, 715, 1675)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 4887)
[M::mem_pestat] mean and std.dev: (819.04, 928.96)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 6493)
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (74, 103, 357)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 923)
[M::mem_pestat] mean and std.dev: (191.05, 174.09)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1206)
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_pestat] skip orientation RR
[M::mem_process_seqs] Processed 1362742 reads in 422.390 CPU sec, 23.992 real sec
[M::process] read 1371912 sequences (240000346 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (23, 412713, 6, 22)
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (54, 79, 176)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 420)
[M::mem_pestat] mean and std.dev: (117.41, 98.86)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 542)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (111, 161, 215)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 423)
[M::mem_pestat] mean and std.dev: (164.85, 77.74)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 527)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (68, 132, 253)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 623)
[M::mem_pestat] mean and std.dev: (154.65, 130.73)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 808)
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RR
[M::mem_process_seqs] Processed 1371912 reads in 416.711 CPU sec, 19.980 real sec
[M::process] read 1362596 sequences (240000291 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (20, 410672, 22, 30)
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (59, 105, 137)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 293)
[M::mem_pestat] mean and std.dev: (82.78, 46.76)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 371)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (113, 163, 216)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 422)
[M::mem_pestat] mean and std.dev: (166.18, 77.88)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 525)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (68, 184, 362)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 950)
[M::mem_pestat] mean and std.dev: (183.68, 171.06)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1244)
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (40, 90, 150)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 370)
[M::mem_pestat] mean and std.dev: (87.78, 65.95)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 480)
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_pestat] skip orientation RR
[M::mem_process_seqs] Processed 1362596 reads in 416.074 CPU sec, 18.340 real sec
[M::process] read 1365806 sequences (240000019 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (21, 411047, 17, 16)
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (91, 118, 196)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 406)
[M::mem_pestat] mean and std.dev: (123.90, 71.17)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 511)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (112, 162, 216)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 424)
[M::mem_pestat] mean and std.dev: (165.83, 78.09)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 528)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (46, 54, 217)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 559)
[M::mem_pestat] mean and std.dev: (69.64, 57.87)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 730)
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (49, 129, 259)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 679)
[M::mem_pestat] mean and std.dev: (144.38, 100.00)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 889)
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_pestat] skip orientation RR
[M::mem_process_seqs] Processed 1365806 reads in 414.814 CPU sec, 18.301 real sec
[M::process] read 1369338 sequences (240000281 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (27, 413752, 20, 18)
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (55, 82, 133)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 289)
[M::mem_pestat] mean and std.dev: (92.54, 67.69)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 367)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (112, 162, 215)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 421)
[M::mem_pestat] mean and std.dev: (165.18, 77.08)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 524)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (39, 747, 2091)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 6195)
[M::mem_pestat] mean and std.dev: (970.37, 1308.97)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 8247)
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (33, 80, 162)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 420)
[M::mem_pestat] mean and std.dev: (108.61, 80.48)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 549)
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_pestat] skip orientation RR
[M::mem_process_seqs] Processed 1369338 reads in 416.359 CPU sec, 18.376 real sec
[M::process] read 1354260 sequences (240000087 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (24, 403477, 37, 19)
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (60, 119, 207)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 501)
[M::mem_pestat] mean and std.dev: (143.58, 111.41)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 648)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (114, 164, 219)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 429)
[M::mem_pestat] mean and std.dev: (168.12, 79.11)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 534)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (46, 129, 1720)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 5068)
[M::mem_pestat] mean and std.dev: (692.69, 954.99)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 6742)
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (65, 156, 197)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 461)
[M::mem_pestat] mean and std.dev: (125.17, 88.54)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 593)
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_pestat] skip orientation RR
[M::mem_process_seqs] Processed 1354260 reads in 433.877 CPU sec, 19.131 real sec
[M::process] read 1364574 sequences (240000386 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (26, 408863, 34, 28)
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (48, 106, 180)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 444)
[M::mem_pestat] mean and std.dev: (127.52, 95.20)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 576)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (112, 162, 216)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 424)
[M::mem_pestat] mean and std.dev: (166.14, 77.83)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 528)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (39, 96, 453)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1281)
[M::mem_pestat] mean and std.dev: (214.07, 287.14)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1695)
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (60, 115, 241)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 603)
[M::mem_pestat] mean and std.dev: (142.59, 110.75)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 784)
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_pestat] skip orientation RR
[M::mem_process_seqs] Processed 1364574 reads in 422.504 CPU sec, 18.652 real sec
[M::process] read 1352074 sequences (240000216 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (30, 406935, 20, 22)
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (50, 120, 189)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 467)
[M::mem_pestat] mean and std.dev: (147.63, 132.68)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 678)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (113, 164, 219)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 431)
[M::mem_pestat] mean and std.dev: (167.85, 79.49)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 537)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (28, 207, 807)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 2365)
[M::mem_pestat] mean and std.dev: (218.00, 268.20)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 3144)
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (76, 190, 243)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 577)
[M::mem_pestat] mean and std.dev: (175.19, 120.57)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 744)
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_pestat] skip orientation RR
[M::mem_process_seqs] Processed 1352074 reads in 414.688 CPU sec, 18.272 real sec
[M::process] read 1358406 sequences (240000281 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (27, 407870, 13, 17)
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (61, 83, 136)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 286)
[M::mem_pestat] mean and std.dev: (101.96, 62.41)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 361)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (113, 163, 218)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 428)
[M::mem_pestat] mean and std.dev: (166.94, 78.93)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 533)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (42, 121, 711)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 2049)
[M::mem_pestat] mean and std.dev: (179.55, 216.10)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 2718)
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (66, 149, 248)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 612)
[M::mem_pestat] mean and std.dev: (160.69, 105.04)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 794)
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_pestat] skip orientation RR
[M::mem_process_seqs] Processed 1358406 reads in 419.687 CPU sec, 18.509 real sec
[M::process] read 998422 sequences (175337950 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (24, 301267, 13, 10)
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (82, 109, 196)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 424)
[M::mem_pestat] mean and std.dev: (113.52, 64.87)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 538)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (113, 162, 216)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 422)
[M::mem_pestat] mean and std.dev: (165.89, 77.26)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 525)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (100, 255, 582)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1546)
[M::mem_pestat] mean and std.dev: (310.31, 267.83)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 2028)
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (61, 65, 86)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (11, 136)
[M::mem_pestat] mean and std.dev: (62.67, 29.49)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 181)
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_pestat] skip orientation RR
[M::mem_process_seqs] Processed 998422 reads in 304.019 CPU sec, 13.383 real sec
[main] Version: 0.7.15-r1140
[main] CMD: bwa mem -t 24 ../data/Bins/work_files/assembly.fa /home-3/karoraw1@jhu.edu/scratch/Processed_data_group/CB33_Summer17_NexteraXT/QCd/QC_Renamed_Seqs/SERC_051717_Sample11_1.fastq /home-3/karoraw1@jhu.edu/scratch/Processed_data_group/CB33_Summer17_NexteraXT/QCd/QC_Renamed_Seqs/SERC_051717_Sample11_2.fastq
[main] Real time: 558.580 sec; CPU: 4108.014 sec
[bam_sort_core] merging from 0 files and 24 in-memory blocks...

########################################################################################################################
#####                                                RUNNING MAXBIN2                                               #####
########################################################################################################################


------------------------------------------------------------------------------------------------------------------------
-----                                          making contig depth file...                                         -----
------------------------------------------------------------------------------------------------------------------------

Output depth matrix to ../data/Bins/work_files/mb2_master_depth.txt
Calculating intra contig depth variance
Output matrix to ../data/Bins/work_files/mb2_master_depth.txt
Opening 15 bams
Consolidating headers
Processing bam files
Thread 1 finished: CB_Zymo_DNA_Ctrl.bam with 4576366 reads and 4448436 readsWellMapped
Thread 13 finished: SERC_517_9.bam with 8377637 reads and 5825594 readsWellMapped
Thread 0 finished: CB_Zymo_Cellular_Ctrl.bam with 15292742 reads and 14907468 readsWellMapped
Thread 2 finished: SERC_051717_Sample11.bam with 13508654 reads and 9018398 readsWellMapped
Thread 4 finished: SERC_517_11.bam with 12789508 reads and 7723794 readsWellMapped
Thread 14 finished: SERC_Zymo_Pos_Control.bam with 19449392 reads and 17675218 readsWellMapped
Thread 9 finished: SERC_517_5.bam with 17405486 reads and 9868114 readsWellMapped
Thread 3 finished: SERC_517_10.bam with 18794311 reads and 13128028 readsWellMapped
Thread 6 finished: SERC_517_13.bam with 21691040 reads and 14843474 readsWellMapped
Thread 12 finished: SERC_517_8.bam with 22709454 reads and 15073073 readsWellMapped
Thread 5 finished: SERC_517_12.bam with 22545145 reads and 15667871 readsWellMapped
Thread 11 finished: SERC_517_7.bam with 24523279 reads and 17174716 readsWellMapped
Thread 10 finished: SERC_517_6.bam with 28031937 reads and 17965078 readsWellMapped
Thread 8 finished: SERC_517_4.bam with 28234152 reads and 18678986 readsWellMapped
Thread 7 finished: SERC_517_3.bam with 36141272 reads and 24441270 readsWellMapped
Creating depth matrix file: ../data/Bins/work_files/mb2_master_depth.txt
Closing most bam files
Closing last bam file
Finished

------------------------------------------------------------------------------------------------------------------------
-----                    split master contig depth file into individual files for maxbin2 input                    -----
------------------------------------------------------------------------------------------------------------------------

processing CB_Zymo_Cellular_Ctrl.bam depth file...
processing CB_Zymo_DNA_Ctrl.bam depth file...
processing SERC_051717_Sample11.bam depth file...
processing SERC_517_10.bam depth file...
processing SERC_517_11.bam depth file...
processing SERC_517_12.bam depth file...
processing SERC_517_13.bam depth file...
processing SERC_517_3.bam depth file...
processing SERC_517_4.bam depth file...
processing SERC_517_5.bam depth file...
processing SERC_517_6.bam depth file...
processing SERC_517_7.bam depth file...
processing SERC_517_8.bam depth file...
processing SERC_517_9.bam depth file...
processing SERC_Zymo_Pos_Control.bam depth file...

------------------------------------------------------------------------------------------------------------------------
-----                                       Starting binning with MaxBin2...                                       -----
------------------------------------------------------------------------------------------------------------------------

readline() on closed filehandle FILE at /home-3/karoraw1@jhu.edu/scratch/miniconda2/envs/metawrap2-env/bin/run_MaxBin.pl line 1334.
MaxBin 2.2.4
Input contig: ../data/Bins/work_files/assembly.fa
Switch to 40 marker genes universal for bacteria and archaea.
Thread: 24
out header: ../data/Bins/work_files/maxbin2_out/bin
Located abundance file [/home-3/karoraw1@jhu.edu/scratch/Processed_data_group/repos/epicVCR/scripts/../data/Bins/work_files/mb2_CB_Zymo_Cellular_Ctrl.txt]
Located abundance file [/home-3/karoraw1@jhu.edu/scratch/Processed_data_group/repos/epicVCR/scripts/../data/Bins/work_files/mb2_CB_Zymo_DNA_Ctrl.txt]
Located abundance file [/home-3/karoraw1@jhu.edu/scratch/Processed_data_group/repos/epicVCR/scripts/../data/Bins/work_files/mb2_SERC_051717_Sample11.txt]
Located abundance file [/home-3/karoraw1@jhu.edu/scratch/Processed_data_group/repos/epicVCR/scripts/../data/Bins/work_files/mb2_SERC_517_10.txt]
Located abundance file [/home-3/karoraw1@jhu.edu/scratch/Processed_data_group/repos/epicVCR/scripts/../data/Bins/work_files/mb2_SERC_517_11.txt]
Located abundance file [/home-3/karoraw1@jhu.edu/scratch/Processed_data_group/repos/epicVCR/scripts/../data/Bins/work_files/mb2_SERC_517_12.txt]
Located abundance file [/home-3/karoraw1@jhu.edu/scratch/Processed_data_group/repos/epicVCR/scripts/../data/Bins/work_files/mb2_SERC_517_13.txt]
Located abundance file [/home-3/karoraw1@jhu.edu/scratch/Processed_data_group/repos/epicVCR/scripts/../data/Bins/work_files/mb2_SERC_517_3.txt]
Located abundance file [/home-3/karoraw1@jhu.edu/scratch/Processed_data_group/repos/epicVCR/scripts/../data/Bins/work_files/mb2_SERC_517_4.txt]
Located abundance file [/home-3/karoraw1@jhu.edu/scratch/Processed_data_group/repos/epicVCR/scripts/../data/Bins/work_files/mb2_SERC_517_5.txt]
Located abundance file [/home-3/karoraw1@jhu.edu/scratch/Processed_data_group/repos/epicVCR/scripts/../data/Bins/work_files/mb2_SERC_517_6.txt]
Located abundance file [/home-3/karoraw1@jhu.edu/scratch/Processed_data_group/repos/epicVCR/scripts/../data/Bins/work_files/mb2_SERC_517_7.txt]
Located abundance file [/home-3/karoraw1@jhu.edu/scratch/Processed_data_group/repos/epicVCR/scripts/../data/Bins/work_files/mb2_SERC_517_8.txt]
Located abundance file [/home-3/karoraw1@jhu.edu/scratch/Processed_data_group/repos/epicVCR/scripts/../data/Bins/work_files/mb2_SERC_517_9.txt]
Located abundance file [/home-3/karoraw1@jhu.edu/scratch/Processed_data_group/repos/epicVCR/scripts/../data/Bins/work_files/mb2_SERC_Zymo_Pos_Control.txt]
Searching against 40 marker genes to find starting seed contigs for [../data/Bins/work_files/assembly.fa]...
Running FragGeneScan....
Running HMMER hmmsearch....
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.contig.tmp  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.seed -out ../data/Bins/work_files/maxbin2_out/bin -min_contig_length 1000 -thread 24
Loaded 100000 sequences
Loaded 200000 sequences
Loaded 300000 sequences
Loaded 400000 sequences
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_10975 [0.014593] [0.000100] [1.146700] [2.400920] [2.182800] [2.759980] [5.823730] [3.787630] [1.547240] [0.132104] [2.953530] [5.533030] [7.070280] [0.615207] [0.000100]
	k141_20653 [0.000100] [0.000100] [0.072053] [0.025883] [0.029381] [0.160196] [1.394540] [2.828960] [1.370410] [0.039874] [0.107730] [0.079049] [0.139909] [0.190276] [0.000100]
	k141_23097 [0.015660] [0.003480] [0.395207] [1.382320] [0.395444] [1.783220] [1.099970] [1.573710] [1.900190] [0.361990] [0.947643] [2.311290] [1.464010] [0.609380] [0.046662]
	k141_29456 [0.000100] [0.000100] [0.283486] [0.915344] [0.665553] [2.409910] [1.392650] [8.163460] [4.969370] [1.025620] [0.167363] [2.191870] [2.993600] [1.242550] [0.000100]
	k141_47854 [0.000100] [0.000100] [0.110178] [1.681770] [0.308263] [2.007230] [1.559480] [3.023830] [2.426450] [0.145146] [0.238523] [0.600508] [1.742530] [0.676304] [0.000100]
	k141_52099 [0.000100] [0.000100] [1.072920] [5.073500] [1.676480] [7.083340] [6.921060] [8.656790] [5.220680] [1.154740] [3.726270] [5.727130] [5.931470] [1.659750] [0.000100]
	k141_54667 [0.006759] [0.004781] [4.989490] [12.603200] [8.806300] [14.404300] [21.440300] [9.565900] [3.964520] [2.187480] [17.828000] [24.807100] [23.365700] [5.912460] [0.009891]
	k141_56067 [0.000100] [0.000100] [0.367426] [0.665108] [0.614261] [0.786285] [0.615235] [2.260080] [0.855640] [0.408533] [0.754335] [1.303530] [1.099750] [0.522696] [0.000100]
	k141_68951 [0.005250] [0.005451] [20.275300] [70.497300] [45.154100] [80.774300] [95.062600] [57.046700] [23.202400] [12.106700] [95.347500] [133.472000] [113.758000] [34.280500] [0.079953]
	k141_79886 [0.001589] [0.000100] [1.558840] [2.840930] [2.262870] [2.703920] [3.134510] [0.594708] [0.649134] [0.053075] [3.049940] [4.270340] [4.921780] [1.144840] [0.001589]
	k141_80756 [0.000100] [0.000100] [0.885711] [1.547760] [0.909904] [2.202490] [2.079390] [1.330770] [1.701490] [0.126008] [2.422000] [4.435990] [3.426410] [0.884577] [0.004788]
	k141_116497 [0.025350] [0.000100] [1.112070] [1.651770] [0.692462] [1.173450] [1.208140] [1.991990] [1.106740] [0.585057] [1.553040] [2.807200] [0.637091] [0.332889] [0.000100]
	k141_127245 [0.002406] [0.002406] [5.290770] [1.915380] [6.442240] [1.596970] [3.857780] [9.289680] [16.954900] [0.539573] [0.236899] [0.712201] [5.710640] [2.408500] [0.009583]
	k141_155120 [0.000100] [0.000100] [0.090209] [0.239824] [0.168317] [0.475248] [0.702970] [0.843784] [0.314631] [0.090209] [0.182618] [1.073710] [0.508251] [0.000100] [0.000100]
	k141_155348 [0.000100] [0.000100] [0.024242] [0.265014] [0.279339] [0.585675] [0.485399] [1.133330] [0.288705] [0.027548] [0.309091] [1.445180] [1.018180] [0.064463] [0.000100]
	k141_164375 [0.000100] [0.000100] [0.179730] [19.467000] [0.246270] [9.910490] [3.431450] [57.183000] [13.829700] [5.273740] [9.771730] [34.761100] [5.307600] [0.691452] [0.000100]
	k141_165548 [0.000100] [0.000100] [0.179451] [0.313863] [0.000100] [9.704430] [11.116800] [1.141800] [0.863828] [0.015482] [0.053484] [0.159043] [9.147430] [0.864532] [0.000100]
	k141_166509 [0.000100] [0.000100] [0.326039] [0.441084] [0.255456] [0.880543] [0.541967] [5.239260] [1.380370] [0.386696] [0.450778] [1.095080] [1.104250] [0.372475] [0.000100]
	k141_181521 [49.250200] [37.939900] [0.072657] [0.065960] [0.062599] [0.062376] [0.087790] [0.090269] [0.063000] [0.059130] [0.133446] [0.069233] [0.074164] [0.028695] [151.748000]
	k141_197439 [0.000100] [0.000100] [0.067797] [0.437730] [0.086957] [0.290346] [0.537951] [3.362560] [1.898310] [0.370671] [0.955785] [1.527630] [1.123800] [0.058954] [0.000100]
	k141_199381 [0.073430] [0.000100] [0.000100] [0.514010] [0.000100] [0.460870] [0.668599] [1.025120] [0.545894] [0.081159] [0.071498] [0.057005] [0.759420] [0.781642] [0.036715]
	k141_210052 [0.006988] [0.003476] [1.415470] [0.735976] [1.520660] [0.749530] [2.480050] [1.405480] [1.104530] [0.439981] [5.240710] [2.475020] [6.172780] [0.812297] [0.010499]
	k141_213688 [0.000100] [0.000100] [0.100143] [0.241547] [0.012034] [0.694126] [3.112180] [0.211605] [0.343553] [0.017479] [0.126361] [0.348567] [2.573930] [0.408023] [0.000100]
	k141_220206 [0.000100] [0.000100] [1.350360] [3.556070] [2.119440] [5.251490] [7.253480] [18.173900] [10.382900] [2.015260] [1.951560] [5.613800] [10.912400] [2.328470] [0.000100]
	k141_221572 [0.060365] [0.000100] [0.244639] [1.027010] [0.411438] [0.142176] [0.287530] [2.539320] [0.202542] [0.212867] [0.861795] [0.495631] [0.523431] [0.098491] [0.000100]
	k141_228382 [0.000100] [0.000100] [0.027798] [0.728603] [0.000100] [0.813460] [1.722020] [6.149230] [4.039500] [0.595465] [2.649600] [0.722751] [0.236284] [0.212875] [0.000100]
	k141_231716 [0.000100] [0.000100] [1.226250] [0.107244] [1.971310] [3.024460] [1.963780] [0.759172] [0.017874] [0.000100] [0.054563] [1.690500] [2.391350] [1.300090] [0.000100]
	k141_245935 [0.000100] [0.000100] [0.090074] [0.050245] [0.023284] [3.948530] [0.092524] [0.193627] [1.964460] [0.023284] [0.074755] [4.070470] [0.239583] [0.023284] [0.000100]
	k141_246153 [0.000100] [0.000100] [0.192434] [0.000100] [0.369243] [0.031250] [0.000100] [1.742600] [3.986840] [0.226151] [0.031250] [0.064145] [0.125822] [0.031250] [0.000100]
	k141_246405 [0.000100] [0.000100] [0.731153] [0.746140] [0.474114] [2.984560] [1.099000] [11.026300] [25.097200] [0.034514] [0.900545] [1.694820] [1.864670] [1.109450] [0.000100]
	k141_247498 [0.001820] [0.000100] [0.642703] [0.649025] [0.720916] [0.412711] [0.705733] [3.023280] [1.827770] [0.913645] [1.330910] [2.133100] [2.442740] [0.199866] [0.005460]
	k141_256423 [0.000100] [0.000100] [0.042163] [1.083130] [0.004526] [2.005480] [2.740470] [0.959743] [1.028590] [0.144831] [0.097427] [0.732492] [8.959390] [2.003220] [0.004764]
	k141_257371 [0.008658] [0.000100] [0.096241] [1.198240] [0.298754] [3.413950] [1.971600] [2.449050] [2.761800] [0.197128] [0.841939] [0.912470] [1.274100] [0.835973] [0.006546]
	k141_267213 [0.000100] [0.000100] [1.317830] [1.672200] [0.529347] [0.870432] [3.622370] [4.643410] [4.415280] [3.689920] [1.483940] [0.086379] [1.682170] [0.559247] [0.000100]
	k141_297336 [0.000100] [0.000100] [0.043620] [0.098146] [0.000100] [0.576881] [1.043620] [1.042530] [0.494002] [0.000100] [0.085060] [1.093780] [0.621592] [0.041439] [0.000100]
	k141_302348 [0.000100] [0.000100] [0.382046] [13.172200] [0.521921] [14.800600] [16.267200] [25.334000] [4.471820] [0.085595] [1.050100] [7.171190] [3.444680] [5.616910] [0.000100]
	k141_309759 [0.000100] [0.000100] [0.000100] [0.143981] [0.853659] [1.870970] [1.985840] [0.298190] [0.166798] [0.061369] [0.976397] [0.413847] [0.720692] [0.353265] [0.029898]
	k141_328891 [0.005699] [0.008691] [1.833590] [2.030840] [1.354320] [3.366860] [2.723250] [21.049000] [6.656150] [2.059770] [2.683000] [4.727880] [4.972360] [1.726100] [0.000100]
	k141_332355 [0.000100] [0.000100] [0.039082] [2.868100] [0.316561] [0.590620] [0.039082] [1.386910] [11.284300] [0.155838] [4.639960] [2.247680] [9.319000] [0.713727] [0.000100]
	k141_332432 [0.000100] [0.000100] [0.034941] [0.174703] [0.139762] [0.568833] [1.444440] [0.334032] [0.392732] [0.027953] [0.386443] [1.036340] [4.416490] [0.295597] [0.000100]
	k141_343609 [0.000100] [0.000100] [0.658126] [7.594440] [1.785510] [12.068800] [16.472500] [18.463400] [17.317400] [2.083820] [0.217789] [9.063320] [15.600300] [5.669470] [0.000100]
	k141_349558 [0.005435] [0.000100] [0.116848] [0.534754] [0.216748] [1.174340] [0.900815] [3.615270] [1.666330] [0.328804] [0.442363] [0.968678] [1.365420] [0.562500] [0.008152]
	k141_356283 [0.000100] [0.000100] [0.034101] [0.712702] [0.016198] [0.796249] [1.420290] [0.536232] [0.075021] [0.000100] [0.697357] [3.271950] [0.562660] [0.421995] [0.000100]
	k141_357666 [0.016839] [0.005613] [0.024520] [1.049480] [0.042245] [2.004730] [0.159970] [2.686260] [1.351110] [0.006499] [0.925554] [1.679030] [0.443870] [0.683752] [0.000100]
	k141_364141 [0.000100] [0.010149] [0.166727] [2.288870] [0.155008] [7.140630] [6.770450] [2.784340] [3.847890] [0.056905] [0.276549] [0.499577] [1.215170] [0.317748] [0.015223]
	k141_370339 [30.984700] [15.043200] [0.131391] [0.157971] [0.134597] [0.246780] [0.215268] [0.358607] [0.340741] [0.156985] [0.303064] [0.193566] [0.168932] [0.070231] [75.847600]
	k141_383470 [0.009543] [0.000100] [0.680213] [2.148320] [1.038490] [0.601320] [0.680929] [4.493560] [2.229200] [3.989180] [20.943600] [1.288530] [1.949500] [0.284714] [0.003499]
	k141_391812 [0.005994] [0.000100] [0.170820] [0.635331] [0.088486] [2.653940] [1.709620] [3.991960] [3.216090] [0.439117] [0.851735] [1.134860] [1.726340] [1.320820] [0.005994]
	k141_395073 [0.000100] [0.000100] [0.050526] [0.568421] [0.544211] [0.884211] [0.537895] [0.508421] [0.082105] [0.084210] [0.421053] [0.042105] [0.469474] [0.000100] [0.000100]
	k141_396358 [0.000100] [0.000100] [0.026236] [0.324900] [0.018271] [1.029050] [0.612556] [1.293510] [1.156710] [0.046849] [0.111033] [0.436402] [0.587725] [0.267041] [0.000100]
	k141_403035 [0.050188] [0.000100] [2.460480] [6.124220] [2.502510] [5.522580] [4.956710] [23.608500] [14.143700] [2.093480] [3.546420] [8.673150] [12.274200] [2.351320] [0.000100]
	k141_407301 [0.014319] [0.000100] [0.043700] [0.258379] [0.035957] [0.361848] [0.656555] [21.344700] [4.067510] [0.046723] [0.166737] [0.182435] [0.252387] [0.078861] [0.002440]
	k141_422910 [0.000100] [0.001863] [0.297183] [1.398320] [0.955111] [1.798420] [2.335130] [1.420910] [0.817881] [0.200838] [1.239160] [2.098210] [3.657930] [1.831900] [0.000100]
	k141_453605 [0.000100] [0.019309] [0.794207] [1.552850] [0.560467] [2.428350] [0.514228] [8.800810] [5.866360] [1.303350] [2.313520] [3.423270] [4.731200] [0.812500] [0.038618]
	k141_455960 [0.027536] [0.000100] [0.380435] [0.854348] [0.442754] [1.100000] [0.053623] [0.826812] [2.789860] [0.226087] [1.330430] [2.669570] [0.856522] [0.030435] [0.000100]
	k141_461553 [0.000100] [0.000100] [0.296292] [1.240550] [0.419498] [1.670450] [1.824760] [6.638280] [3.951560] [0.740431] [1.179190] [2.150480] [2.249760] [0.796411] [0.004545]
	k141_461657 [0.003435] [0.000100] [0.574708] [1.196330] [0.880231] [4.791920] [1.867670] [1.666550] [3.365090] [0.076200] [2.385790] [2.114440] [1.680560] [0.618458] [0.000100]
	k141_462117 [0.000100] [0.000100] [0.034111] [0.107720] [0.000100] [0.594255] [4.462300] [0.070018] [0.018851] [0.000100] [0.039497] [0.111311] [2.396770] [0.035907] [0.000100]
	k141_464394 [0.001657] [0.000100] [0.255266] [0.891535] [0.451655] [1.856250] [1.300970] [5.813950] [3.119720] [0.653234] [2.394740] [1.891050] [1.330110] [0.609228] [0.000100]
	k141_475375 [0.000100] [0.000100] [11.199200] [27.900900] [21.452300] [37.807200] [50.003300] [27.753200] [11.431200] [5.433470] [37.991500] [57.000900] [60.029300] [14.360900] [0.003093]
	k141_475567 [0.000100] [0.000100] [0.047371] [0.067013] [0.025419] [0.877527] [0.596187] [2.748120] [2.558640] [0.000100] [0.045061] [0.046216] [0.570191] [0.575390] [0.000100]
	k141_477669 [27.666100] [32.643000] [0.015024] [0.043622] [0.040203] [0.057403] [0.065589] [0.086830] [0.056574] [0.030619] [0.070874] [0.054450] [0.061652] [0.025282] [141.763000]
	k141_485126 [0.000100] [0.000100] [0.012700] [10.340200] [0.185160] [18.468200] [0.666945] [1.758190] [6.259690] [0.046791] [3.999830] [8.787270] [1.042780] [3.445020] [0.000100]
	k141_486704 [0.000100] [0.000100] [0.178655] [0.397356] [0.227449] [0.671462] [0.617030] [4.543160] [1.608280] [0.308126] [0.791602] [0.901439] [0.507387] [0.319790] [0.007387]
	k141_495409 [0.000100] [0.000100] [0.000100] [0.000100] [0.549416] [0.414453] [0.583422] [0.127524] [0.085016] [0.000100] [1.296490] [1.247610] [1.076510] [0.128587] [0.000100]
	k141_521176 [0.002618] [0.001343] [0.176585] [0.866109] [0.173900] [2.645620] [3.348170] [4.256570] [2.180110] [0.229047] [0.219582] [1.372870] [2.603090] [0.876280] [0.002551]
	k141_536390 [0.000100] [0.000100] [0.545455] [5.147660] [0.976033] [6.284020] [7.578510] [1.700830] [4.777690] [0.042975] [0.672727] [7.596140] [9.599720] [3.053720] [0.000100]
	k141_550629 [0.000100] [0.000100] [0.240276] [1.182670] [0.112752] [0.740030] [1.127520] [0.594781] [0.853767] [0.092073] [0.945839] [1.454950] [0.906942] [0.624815] [0.000100]
	k141_563651 [0.000100] [0.000100] [0.894788] [2.306540] [1.895760] [5.281540] [3.445850] [18.709200] [5.999190] [0.789576] [1.294850] [3.697520] [5.611300] [1.971910] [0.000100]
	k141_571746 [0.000100] [0.000100] [0.526432] [0.447137] [0.596916] [0.044053] [0.534141] [3.227970] [0.000100] [0.753304] [0.572687] [0.147577] [0.044053] [0.409692] [0.000100]
	k141_585996 [0.000100] [0.000100] [7.859040] [20.009500] [7.803710] [33.897500] [27.987400] [90.867900] [51.800300] [11.351400] [12.507200] [36.027900] [39.885200] [12.697700] [0.042240]
	k141_596669 [0.000100] [0.000100] [0.137186] [2.817280] [0.077058] [1.771750] [0.531816] [0.467017] [0.370695] [0.099241] [0.102744] [0.872154] [1.316400] [0.053707] [0.000100]
	k141_635736 [0.030819] [0.000100] [1.813460] [10.558800] [5.093270] [6.536090] [13.345500] [3.721010] [1.360910] [1.406330] [11.532000] [16.962700] [16.798900] [3.598540] [0.000100]
	k141_652226 [0.000100] [0.000100] [0.074341] [1.337530] [0.022782] [1.160070] [0.202038] [1.074340] [0.131894] [0.022782] [2.298560] [3.253000] [0.560552] [0.000100] [0.000100]
	k141_668017 [0.000100] [0.000100] [0.302002] [1.055700] [0.000100] [8.454310] [20.390800] [0.716275] [0.107920] [0.000100] [0.135770] [3.042650] [13.714500] [3.791990] [0.033072]
	k141_683017 [0.000100] [0.000100] [54.548600] [3.289160] [61.567900] [2.697190] [33.917300] [1.163860] [1.937350] [17.495600] [110.338000] [6.021690] [39.343000] [1.715660] [0.000100]
	k141_683949 [0.010813] [0.002353] [0.504118] [1.376440] [0.523951] [2.168750] [1.447420] [12.260100] [3.645080] [1.070090] [0.949465] [2.961730] [2.917870] [1.009970] [0.002129]
	k141_705206 [0.000100] [0.000100] [0.445209] [1.978820] [0.765749] [1.236100] [0.857861] [2.698780] [1.738750] [0.454473] [3.001060] [1.672310] [2.099520] [0.583113] [0.000100]
	k141_708985 [0.000100] [0.000100] [2.799210] [0.969170] [2.777080] [0.065613] [0.182609] [27.747800] [21.289300] [17.191300] [5.720950] [2.001580] [0.572332] [0.422134] [0.000100]
	k141_712759 [0.007263] [0.000100] [0.030910] [86.023700] [0.041550] [64.083900] [67.431500] [189.970000] [42.350900] [0.160459] [0.765729] [81.127200] [14.092600] [23.534500] [0.009965]
	k141_716899 [0.000100] [0.000100] [0.000100] [7.675880] [0.000100] [2.277650] [0.213496] [1.387170] [0.042035] [0.000100] [1.686950] [4.502210] [0.618363] [1.609510] [0.000100]
	k141_722627 [0.000100] [0.000100] [0.624141] [0.043180] [0.041217] [2.007850] [0.484789] [3.522080] [1.311090] [0.461237] [0.805692] [0.420020] [0.127576] [0.037291] [0.000100]
	k141_758186 [0.000100] [0.000100] [1.461660] [1.829730] [1.334640] [1.309480] [1.261110] [3.331890] [2.054660] [1.116000] [2.510420] [6.936690] [6.040900] [1.837590] [0.000100]
	k141_763577 [0.000100] [0.000100] [0.000100] [0.041007] [0.000100] [0.037279] [0.035415] [1.697110] [1.217150] [0.281454] [0.382106] [0.856477] [0.037279] [0.731594] [0.000100]
	k141_816635 [0.006225] [0.003946] [0.773877] [2.070300] [0.867328] [2.865170] [4.582010] [0.347607] [0.576212] [0.078338] [0.246160] [5.295230] [7.952460] [1.384160] [0.004719]
	k141_829581 [0.000100] [0.000100] [0.034965] [9.472030] [0.033217] [1.950170] [0.187063] [1.988640] [0.850524] [0.608392] [3.885490] [4.828670] [1.041080] [1.292830] [0.000100]
	k141_856517 [0.000100] [0.037594] [0.077068] [0.556391] [0.227444] [0.000100] [0.456767] [0.123120] [0.505639] [0.040413] [0.630639] [0.274436] [0.721804] [0.000100] [0.000100]
	k141_856872 [0.000100] [0.000100] [6.421760] [29.954500] [12.370300] [31.756300] [42.184800] [25.026800] [8.734720] [3.250370] [29.790600] [55.522400] [54.979900] [19.231000] [0.000100]
	k141_861029 [0.000100] [0.000100] [4.035460] [10.577400] [6.008870] [9.869390] [9.622930] [9.319150] [9.382390] [2.550830] [14.180900] [18.228100] [15.855800] [5.843380] [0.000100]
	k141_862231 [0.005555] [0.006139] [0.078059] [1.536030] [0.097793] [3.117090] [0.154802] [0.154948] [0.051747] [0.043707] [0.242070] [4.611310] [0.070165] [0.034059] [0.024558]
	k141_871690 [0.000100] [0.000100] [0.698043] [0.740475] [0.840281] [0.545645] [0.857911] [0.336919] [0.205140] [0.081877] [1.883010] [2.095020] [1.694310] [0.589123] [0.005678]
	k141_913264 [0.106047] [0.000100] [0.000100] [0.497674] [0.035349] [0.040930] [0.074419] [2.573950] [3.254880] [0.217674] [1.119070] [0.152558] [0.077209] [0.000100] [0.000100]
	k141_924557 [0.000100] [0.000100] [0.000100] [0.303253] [0.722980] [1.548790] [0.501574] [0.086044] [0.873033] [0.000100] [0.041973] [0.000100] [0.079748] [0.394544] [0.000100]
	k141_925746 [0.000100] [0.000100] [0.570425] [2.563400] [0.367789] [4.251540] [0.113031] [0.818741] [0.143777] [0.322694] [0.760176] [9.041580] [0.980088] [0.820498] [0.000100]
	k141_937099 [0.000100] [0.000100] [0.360762] [2.210380] [0.147548] [3.451970] [2.325900] [6.083500] [3.508720] [0.844751] [0.015403] [1.442640] [3.124040] [1.544390] [0.000100]
	k141_1054841 [0.016337] [0.000100] [1.172830] [0.189596] [0.891230] [0.034394] [0.052021] [0.290628] [0.499570] [1.140150] [2.657780] [0.278160] [0.303955] [0.000100] [0.000100]
	k141_1062340 [0.000100] [0.000100] [0.226675] [0.682869] [0.128275] [0.192887] [0.406520] [1.107530] [2.198460] [0.401778] [0.576882] [0.523177] [1.049080] [0.293065] [0.004505]
	k141_1095128 [0.000100] [0.000100] [0.000100] [0.672185] [0.041943] [5.220750] [5.982340] [0.214128] [0.041943] [0.000100] [0.083885] [1.654530] [0.134658] [1.327810] [0.000100]
	k141_1097988 [0.012756] [0.000100] [0.832998] [5.917420] [0.338369] [2.028700] [2.216010] [6.054720] [7.141320] [1.996640] [6.783320] [3.713330] [0.836354] [1.111110] [0.000100]
	k141_1136772 [0.039638] [0.013213] [0.013213] [0.118220] [0.007997] [0.063630] [0.358136] [6.574410] [1.206190] [0.085883] [0.091447] [0.130389] [0.038595] [0.013213] [0.000100]
	k141_1137804 [0.000100] [0.000100] [0.000100] [0.141280] [0.000100] [0.105960] [0.208977] [1.500370] [0.329654] [0.120677] [0.206034] [0.138337] [1.035320] [0.713024] [0.000100]
	k141_1139636 [0.058327] [0.029163] [3.171910] [0.029163] [1.896390] [0.058327] [0.326938] [0.834996] [0.075211] [1.531850] [1.924020] [0.313891] [1.620870] [0.134305] [0.029163]
	k141_1147761 [0.000100] [0.000100] [1.421180] [2.185510] [0.913217] [1.074840] [1.703030] [5.800960] [6.999200] [0.857484] [1.794590] [2.223730] [4.158440] [2.617830] [0.000100]
	k141_1158817 [0.000100] [0.000100] [0.042781] [0.117647] [0.000100] [5.906950] [0.870588] [0.126203] [0.172193] [0.000100] [0.105882] [0.556150] [0.083422] [0.583957] [0.000100]
	k141_1170228 [0.000100] [0.000100] [0.000100] [0.024902] [0.000100] [1.195280] [2.302750] [0.529489] [0.203801] [0.000100] [0.000100] [0.090432] [3.117300] [0.231979] [0.000100]
	k141_1174997 [0.000100] [0.000100] [0.301766] [0.408507] [1.128410] [1.130020] [1.910510] [0.390851] [0.244382] [0.083066] [1.478730] [2.259630] [1.582660] [0.746790] [0.000100]
	k141_1175787 [0.545836] [2.001400] [0.027992] [0.057383] [0.026592] [0.026592] [0.137159] [0.055983] [0.011197] [0.027992] [0.030791] [0.000100] [0.053184] [0.000100] [4.572430]
	k141_1184551 [0.000100] [0.000100] [0.000100] [0.029851] [0.138256] [2.203460] [0.045562] [2.037710] [0.084053] [0.000100] [0.443833] [0.683425] [0.000100] [0.031422] [0.089552]
	k141_1187654 [0.000100] [0.000100] [0.486790] [3.181560] [0.569702] [5.072790] [3.402190] [15.657400] [8.525580] [0.573356] [0.267004] [7.599780] [13.186300] [3.654580] [0.000100]
	k141_1203833 [0.000100] [0.000100] [0.000100] [0.070980] [0.388235] [0.569020] [2.872550] [0.084314] [0.031373] [0.085098] [1.034900] [2.065100] [3.867840] [0.409804] [0.015686]
	k141_1210770 [0.000100] [0.000100] [0.000100] [0.655584] [0.000100] [0.085251] [0.649616] [4.070760] [0.795396] [0.000100] [0.032396] [0.248934] [0.042626] [0.175618] [0.064791]
	k141_1242831 [0.000100] [0.000100] [0.151228] [0.170616] [0.103404] [0.293839] [0.662215] [1.024130] [1.551060] [0.073675] [0.308919] [0.265403] [0.786730] [0.017234] [0.000100]
	k141_1252186 [0.028198] [0.000100] [0.023152] [1.511430] [0.000100] [1.899380] [0.034432] [0.182250] [1.500150] [0.005640] [0.809736] [4.757490] [0.061146] [0.659543] [0.011279]
	k141_1259092 [0.004972] [0.001954] [0.157582] [38.678400] [0.189241] [60.211800] [5.081680] [20.734200] [146.666000] [1.710420] [0.349295] [56.845500] [23.790200] [32.140200] [0.023880]
	k141_1263116 [0.000100] [0.000100] [0.446823] [0.339088] [0.027624] [1.165060] [0.421271] [0.687845] [1.230660] [0.055249] [0.741022] [0.100829] [2.310080] [0.510359] [0.000100]
	k141_1268677 [0.000100] [0.000100] [0.302053] [0.843597] [0.603128] [0.288856] [0.576735] [3.036660] [2.971160] [0.372923] [0.513196] [1.334800] [1.667640] [0.248289] [0.000100]
	k141_1269343 [0.000100] [0.028112] [0.054886] [0.000100] [0.025435] [0.038822] [2.208840] [0.056225] [0.307898] [0.000100] [0.064257] [0.025435] [3.627840] [0.253681] [0.028112]
	k141_1280063 [0.000100] [0.000100] [0.040386] [0.424934] [0.033363] [0.429324] [0.107111] [4.449520] [0.725198] [0.000100] [0.337138] [0.000100] [0.364355] [0.000100] [0.000100]
	k141_1288152 [0.000100] [0.000100] [0.132725] [2.503000] [0.257627] [0.940939] [0.613299] [8.410040] [26.954000] [1.155020] [2.068970] [1.300130] [0.328553] [0.098696] [0.000100]
	k141_1293699 [0.000100] [0.000100] [4.241950] [3.522930] [5.954150] [0.460488] [2.720000] [2.544390] [2.305370] [6.030240] [12.647800] [0.105366] [4.022440] [0.058537] [0.000100]
	k141_1315583 [0.004220] [0.008440] [0.040200] [0.302165] [0.024875] [0.057857] [0.143143] [6.489620] [0.128706] [0.029317] [0.197113] [0.296724] [0.031982] [0.012882] [0.000100]
	k141_1339888 [0.000100] [0.000100] [0.054579] [0.298797] [0.082331] [0.705365] [0.733580] [1.896390] [1.996760] [0.349676] [0.146161] [0.611471] [0.666975] [0.130897] [0.000100]
	k141_1366435 [0.000100] [0.000100] [0.408631] [1.401140] [1.369880] [0.788199] [0.909291] [18.364200] [8.720390] [4.071770] [0.321885] [0.833553] [2.580360] [0.762219] [0.000100]
	k141_1366889 [0.019891] [0.000100] [0.904028] [0.758826] [0.695674] [0.578319] [0.758826] [0.725012] [0.363003] [0.607161] [4.755350] [1.494780] [3.330680] [0.299851] [0.000100]
	k141_1376350 [0.015091] [0.000100] [0.395949] [0.465846] [0.192613] [0.473392] [0.525417] [1.889200] [2.844320] [0.621128] [0.503574] [1.351870] [1.468230] [0.189039] [0.000100]
	k141_1381456 [0.005952] [0.000100] [1.115180] [0.595833] [1.966370] [0.771280] [3.533930] [2.447470] [4.619200] [1.290920] [1.501190] [1.063990] [3.573810] [0.421280] [0.011607]
	k141_1383735 [0.000100] [0.000100] [0.183776] [0.341709] [0.071788] [1.087580] [0.589375] [1.580040] [1.965540] [0.673367] [0.809045] [1.461590] [1.359660] [0.232592] [0.000100]
	k141_1394383 [0.003365] [0.000100] [0.662623] [0.457894] [0.666431] [0.064465] [0.218188] [2.161250] [0.565837] [3.363410] [11.450400] [0.380767] [1.180200] [0.263438] [0.000100]
	k141_1423054 [83.866100] [33.923200] [0.103815] [0.058935] [0.071040] [0.053749] [0.088467] [0.083621] [0.066829] [0.102197] [0.149576] [0.064496] [0.072412] [0.025733] [147.596000]
	k141_1474200 [0.011106] [0.000100] [0.070521] [2.606510] [0.035747] [1.847300] [1.074270] [0.439994] [12.150100] [0.063233] [0.097522] [0.797182] [0.057403] [0.047616] [0.005969]
	k141_1497075 [0.000100] [0.000100] [0.142822] [0.139160] [0.161621] [0.126465] [0.561035] [3.415280] [0.545410] [0.300293] [0.506104] [0.334473] [1.355220] [0.200439] [0.000100]
	k141_1500019 [0.000100] [0.000100] [0.392917] [0.193929] [0.177909] [0.032040] [0.128162] [0.097808] [0.129005] [0.261383] [6.566610] [0.163575] [0.080101] [0.065767] [0.000100]
	k141_1502763 [0.006770] [0.006432] [0.027420] [1.774880] [0.733751] [1.014900] [0.996107] [0.283345] [0.318382] [0.062288] [1.265230] [2.300270] [2.135580] [0.647935] [0.019973]
	k141_1530498 [0.000100] [0.000100] [0.026761] [2.648590] [0.035211] [1.999300] [0.141549] [1.895070] [0.111268] [0.183803] [1.035210] [1.811970] [0.097887] [0.914789] [0.000100]
	k141_1533940 [0.005799] [0.000100] [1.383950] [0.736304] [1.930260] [4.433540] [4.851520] [0.167099] [0.065314] [0.065314] [1.146500] [0.847856] [1.558520] [0.342591] [0.000100]
	k141_1554957 [0.000100] [0.000100] [0.243679] [0.022593] [0.461538] [0.041958] [0.452932] [0.083378] [0.206563] [0.366326] [0.987090] [1.261970] [2.984940] [0.311458] [0.000100]
	k141_1565650 [0.000100] [0.000100] [0.000100] [0.000100] [0.065925] [0.420175] [0.069102] [0.975377] [0.804607] [0.230342] [1.015090] [0.239079] [1.118350] [0.000100] [0.000100]
	k141_1624723 [0.000100] [0.000100] [0.000100] [0.253722] [0.000100] [0.625243] [0.460841] [3.669260] [2.216830] [0.027185] [0.103560] [0.867314] [0.075081] [0.994175] [0.000100]
	k141_1670351 [0.000100] [0.000100] [0.000100] [0.000100] [0.279642] [0.261745] [0.079046] [0.123788] [0.058166] [0.058166] [2.224460] [0.519761] [0.387025] [0.353468] [0.000100]
	k141_1727385 [0.000100] [0.000100] [0.022988] [1.935630] [0.020690] [0.048276] [0.466667] [3.328740] [0.916092] [0.000100] [0.050575] [0.235632] [0.462069] [0.000100] [0.000100]
	k141_1740427 [0.015460] [0.000100] [0.458503] [1.102120] [1.226200] [1.398700] [1.719280] [2.969080] [2.135880] [0.133849] [0.714402] [0.745728] [0.436534] [0.252238] [0.015460]
	k141_1740772 [0.000100] [0.000100] [0.034823] [0.385955] [0.150900] [0.686013] [0.234185] [1.362740] [1.445150] [0.034243] [0.986941] [0.410041] [0.780905] [1.237090] [0.011608]
	k141_1778834 [0.000100] [0.000100] [0.000100] [0.213080] [0.259494] [0.082279] [0.129747] [0.390295] [1.241560] [0.874473] [0.126582] [0.126582] [0.040084] [0.042194] [0.000100]
	k141_1782021 [0.000100] [0.000100] [0.053877] [0.692510] [0.340999] [0.551248] [0.085414] [7.106440] [2.022340] [0.078844] [0.339028] [0.670828] [0.571616] [0.852825] [0.000100]
	k141_1792593 [0.000100] [0.000100] [0.426516] [0.695444] [0.307640] [0.950325] [1.236380] [4.415210] [0.785886] [0.078109] [0.170606] [0.416924] [0.610140] [0.186708] [0.000100]
	k141_1807435 [0.001674] [0.004764] [2.157970] [2.554820] [2.682810] [1.661780] [3.779960] [6.328800] [6.271330] [2.402770] [6.297010] [4.642940] [7.552070] [1.368970] [0.006867]
	k141_1807686 [0.000100] [0.000100] [0.013625] [0.066244] [0.047451] [0.056848] [0.085506] [0.111111] [0.087386] [0.039464] [5.472870] [0.042753] [0.042753] [0.000100] [0.018793]
	k141_1815739 [0.018331] [0.000100] [0.329474] [0.775687] [0.376749] [0.957549] [2.738540] [1.610710] [1.342980] [0.057887] [0.142788] [0.325615] [2.409070] [0.607815] [0.000100]
	k141_1857025 [0.000100] [0.000100] [0.112518] [0.116737] [0.000100] [2.182140] [0.611111] [0.356540] [0.760197] [0.047820] [0.139241] [0.059072] [0.594233] [0.056259] [0.000100]
	k141_1865601 [0.000100] [0.000100] [0.078751] [0.884461] [0.014945] [0.798812] [2.278020] [2.606630] [1.148500] [0.082775] [0.377084] [1.258100] [0.650508] [0.324583] [0.007664]
	k141_1872759 [0.000100] [0.000100] [0.030418] [0.594677] [0.028897] [7.209130] [0.561217] [1.374900] [0.488973] [0.028897] [0.062357] [2.952850] [0.094297] [0.048669] [0.000100]
	k141_1877104 [0.000100] [0.000100] [0.821053] [1.678540] [0.607287] [1.078950] [1.062750] [3.501210] [0.614170] [0.839676] [1.128740] [1.595140] [1.702430] [0.033198] [0.000100]
	k141_1885682 [0.000100] [0.000100] [0.488290] [1.657380] [0.325995] [1.059950] [1.229740] [3.274240] [2.309130] [0.804918] [0.406089] [0.916862] [1.522720] [0.300468] [0.000100]
	k141_1901529 [0.000100] [0.000100] [0.195675] [0.562307] [0.426365] [0.524202] [0.871267] [0.609681] [1.627190] [0.039135] [0.772400] [0.041195] [0.238929] [0.000100] [0.000100]
	k141_1908857 [0.000100] [0.000100] [0.737313] [0.223881] [0.605970] [0.028358] [1.197010] [1.338810] [0.113433] [1.162690] [1.165670] [1.379850] [1.338060] [0.116418] [0.000100]
	k141_1910465 [0.000100] [0.000100] [0.576735] [0.000100] [1.128050] [0.564027] [1.122190] [1.963830] [0.532747] [0.512219] [0.478983] [0.863148] [1.000980] [0.044966] [0.000100]
	k141_1919859 [0.000100] [0.000100] [0.081657] [0.262645] [0.056063] [0.091408] [0.887873] [2.891530] [1.065810] [0.341865] [0.078001] [0.722121] [1.023770] [0.000100] [0.000100]
	k141_1923220 [0.000100] [0.000100] [0.203864] [0.845032] [0.398659] [0.878943] [0.787461] [0.212145] [0.030757] [0.171924] [0.168770] [2.008280] [1.585170] [0.276814] [0.000100]
	k141_1955981 [0.000100] [0.000100] [0.262641] [0.498282] [0.542955] [3.591070] [0.846834] [0.351497] [0.058910] [0.039273] [0.256259] [0.889543] [0.502700] [0.061856] [0.000100]
	k141_1958172 [0.000100] [0.000100] [0.050721] [0.000100] [0.000100] [0.895677] [0.183285] [3.235160] [1.076660] [0.330259] [0.311239] [0.281268] [1.029390] [0.027089] [0.000100]
	k141_1959914 [0.000100] [0.000100] [0.669776] [0.942164] [0.140858] [0.867537] [0.767724] [4.642720] [2.237870] [0.807836] [1.217350] [3.425370] [2.228540] [1.414180] [0.000100]
	k141_1974740 [0.000100] [0.000100] [1.742920] [3.044920] [0.910850] [0.804423] [6.820320] [1.521770] [1.517620] [0.342778] [0.911541] [0.677263] [5.148580] [0.878369] [0.000100]
	k141_1988852 [0.000100] [0.000100] [0.072333] [0.424955] [0.000100] [0.820072] [0.427667] [1.996380] [0.891501] [0.034358] [0.421338] [0.764014] [1.623870] [0.437613] [0.000100]
	k141_2028820 [0.000100] [0.000100] [0.041439] [0.066521] [0.000100] [0.777535] [0.266085] [1.515810] [2.062160] [0.357688] [0.619956] [0.869684] [1.230100] [0.774809] [0.000100]
	k141_2060968 [0.029240] [0.000100] [0.346491] [4.427630] [0.000100] [1.100880] [0.418129] [2.078950] [0.923977] [0.130117] [0.456140] [1.904970] [0.837719] [0.681287] [0.000100]
	k141_2093600 [0.000100] [0.000100] [0.044944] [0.333833] [0.127591] [1.309360] [0.543321] [1.434710] [1.296880] [0.018976] [0.117104] [0.781773] [1.378030] [0.381773] [0.000100]
	k141_2124842 [0.000100] [0.000100] [0.090422] [0.322605] [0.707280] [0.000100] [0.523372] [0.856705] [0.869732] [0.269732] [0.586207] [0.485824] [0.616092] [0.029119] [0.000100]
	k141_2126727 [0.000100] [0.000100] [0.000100] [0.451630] [0.510515] [0.151420] [1.697160] [0.041009] [0.381703] [0.039958] [0.124080] [0.912198] [1.272870] [0.279706] [0.000100]
	k141_2142153 [0.000100] [0.000100] [0.076476] [0.541424] [0.021059] [3.579110] [0.054309] [0.608479] [3.455800] [0.223608] [5.302580] [1.673590] [0.044888] [0.661402] [0.128013]
	k141_2238111 [106.870000] [33.995400] [0.034890] [0.042198] [0.030771] [0.075047] [0.063297] [0.054628] [0.051762] [0.023177] [0.065733] [0.069423] [0.033565] [0.035213] [117.364000]
	k141_2241469 [0.036786] [0.000100] [0.040658] [4.160700] [0.757018] [6.767670] [5.253630] [5.970960] [24.761900] [0.000100] [1.944820] [4.488870] [9.134560] [3.672800] [0.073572]
	k141_2254457 [0.000100] [0.000100] [0.179355] [0.524988] [0.820645] [1.007940] [1.232130] [0.934143] [0.254554] [0.180290] [0.985521] [1.283050] [1.443720] [0.592247] [0.017749]
	k141_2264145 [0.000100] [0.000100] [2.433680] [9.226530] [6.797700] [10.035700] [15.676600] [5.707450] [1.337980] [0.873410] [9.533620] [14.330100] [13.050300] [8.240460] [0.024228]
	k141_2304359 [0.000100] [0.000100] [0.030722] [0.064516] [0.362519] [0.006144] [0.029186] [3.394010] [1.068360] [0.505376] [0.029186] [0.568356] [0.243472] [0.191244] [0.000100]
	k141_2304698 [0.000100] [0.000100] [0.000100] [0.370576] [0.052047] [2.512840] [0.111034] [0.208189] [0.157529] [0.029146] [0.000100] [3.708540] [0.018737] [0.013879] [0.000100]
	k141_2319063 [0.000100] [0.000100] [0.108601] [0.395773] [0.030612] [1.349130] [0.308309] [1.101310] [0.543732] [0.027697] [0.029154] [0.720117] [0.365160] [0.027697] [0.000100]
	k141_2356465 [0.000100] [0.000100] [0.000100] [1.782610] [0.000100] [0.106933] [0.047003] [2.933020] [0.870740] [0.000100] [0.044653] [0.049354] [0.000100] [0.000100] [0.000100]
	k141_2372008 [0.000100] [0.000100] [0.033670] [0.434343] [0.521465] [0.758417] [1.170030] [1.029880] [0.049663] [0.051347] [0.873737] [1.800510] [1.007580] [0.259680] [0.000100]
	k141_2393388 [0.000100] [0.000100] [0.089057] [0.066415] [0.411321] [0.596226] [0.950943] [12.003800] [1.007550] [0.000100] [0.473208] [0.031698] [0.058868] [0.000100] [0.028679]
	k141_2397433 [0.000100] [0.000100] [0.040230] [0.082376] [0.000100] [0.049808] [0.838123] [3.040230] [0.045977] [0.036399] [0.665709] [0.835249] [0.120690] [0.000100] [0.000100]
	k141_2410073 [99.742000] [26.206400] [0.180506] [0.042951] [0.128580] [0.061997] [0.069251] [0.127583] [0.080892] [0.299988] [0.244098] [0.072816] [0.090390] [0.016203] [99.675400]
	k141_2421773 [0.000100] [0.000100] [0.022552] [0.561424] [0.000100] [0.000100] [0.233828] [0.466469] [0.000100] [0.123442] [0.975074] [2.435610] [0.885460] [0.022552] [0.000100]
	k141_2425439 [0.000100] [0.000100] [0.519162] [2.591210] [0.659683] [1.117530] [1.765460] [4.203880] [0.130812] [0.250894] [2.414920] [3.814510] [0.835462] [0.262647] [0.000100]
	k141_2427671 [0.433225] [1.570030] [0.000100] [0.063518] [0.000100] [0.048046] [0.030945] [0.161238] [0.000100] [0.000100] [0.066775] [0.166124] [0.016287] [0.000100] [6.817590]
	k141_2433356 [0.000100] [0.000100] [0.022606] [0.327781] [0.046401] [0.059488] [0.509221] [4.897090] [3.139800] [0.000100] [0.098156] [0.011898] [0.384890] [0.177275] [0.000100]
	k141_2440330 [0.000100] [0.000100] [0.394068] [3.630300] [0.000100] [0.495763] [0.490466] [0.703390] [0.781780] [1.595340] [1.308260] [0.146186] [1.229870] [0.000100] [0.000100]
	k141_2442118 [0.000100] [0.000100] [0.000100] [0.465343] [0.155548] [1.141560] [0.499512] [2.260660] [2.428570] [0.198503] [0.080052] [0.846730] [1.465670] [0.455255] [0.000100]
	k141_2457732 [189.223000] [50.523900] [0.029051] [0.058709] [0.023465] [0.044335] [0.076397] [0.056550] [0.043066] [0.048956] [0.068007] [0.049353] [0.050376] [0.015075] [170.941000]
	k141_2466488 [0.000100] [0.023914] [0.488987] [0.327250] [0.170548] [0.054122] [0.787288] [1.275650] [2.039020] [0.587162] [1.597860] [1.154810] [1.988040] [0.404028] [0.023914]
	k141_2469645 [0.000100] [0.028309] [0.031139] [0.309271] [0.056617] [0.157113] [0.699929] [2.421800] [3.047420] [0.000100] [0.475584] [0.404105] [1.232840] [0.588818] [0.000100]
	k141_2484031 [0.000100] [0.000100] [0.080913] [0.099585] [0.520747] [0.928423] [0.551867] [1.017630] [0.168050] [0.082988] [0.285270] [0.621369] [1.614110] [0.252075] [0.000100]
	k141_2485487 [0.000100] [0.000100] [0.107656] [0.870016] [0.207735] [0.688198] [0.275518] [1.852070] [1.523130] [0.365231] [0.032695] [0.174641] [0.756778] [0.112839] [0.000100]
	k141_2487693 [0.000100] [0.000100] [0.048570] [0.000100] [0.352135] [0.929495] [0.200157] [1.681550] [0.647474] [0.512730] [0.435174] [0.846455] [0.761065] [0.138269] [0.000100]
	k141_2515662 [0.000100] [0.000100] [5.179650] [0.130156] [12.090700] [0.057745] [0.076994] [0.294225] [0.328139] [0.142988] [0.758937] [0.230981] [0.144821] [0.000100] [0.036664]
	k141_2515916 [0.000100] [0.000100] [0.490188] [0.750901] [0.046055] [0.150981] [0.674810] [2.964360] [3.646380] [0.963556] [0.677213] [0.736083] [0.374449] [0.052062] [0.000100]
	k141_2568761 [0.000100] [0.000100] [2.785640] [5.499470] [4.128830] [6.753960] [8.890180] [3.333690] [2.201690] [0.046462] [6.070750] [12.834200] [9.108760] [2.501580] [0.000100]
Get 196 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37
Iteration 38
Iteration 39
Iteration 40
Iteration 41
Iteration 42
Iteration 43
Iteration 44
Iteration 45
Iteration 46
Iteration 47
Iteration 48
Iteration 49
Iteration 50

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 28892 (6.10%)
Elapsed time:  0 days 08:16:50
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0003.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0003.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0003.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_167693 [0.000100] [0.000100] [0.676768] [0.640721] [0.493959] [2.613390] [2.171520] [3.888100] [2.107350] [0.442464] [0.864132] [1.218260] [1.048130] [0.493167] [0.040800]
	k141_1530373 [0.016227] [0.000100] [0.411359] [0.667748] [0.237323] [0.688032] [0.305477] [0.749290] [1.098990] [0.412576] [0.223935] [0.426369] [1.074240] [0.270588] [0.000100]
	k141_2302460 [0.005338] [0.000100] [0.455925] [1.510010] [0.671455] [1.846420] [1.414730] [2.325950] [1.756970] [0.462036] [1.322960] [2.046850] [1.647820] [0.763749] [0.002810]
Get 3 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 17 (0.73%)
Elapsed time:  0 days 00:00:25
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0004.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0004.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0004.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_815118 [0.000100] [0.000100] [0.565708] [2.873960] [1.033590] [1.700890] [4.887660] [0.010750] [0.988981] [0.043537] [0.379199] [5.272510] [7.245630] [1.695510] [0.010212]
	k141_1263617 [0.000100] [0.000100] [1.081130] [2.292710] [0.669106] [2.526570] [2.910280] [10.010800] [5.556790] [0.953866] [0.039453] [2.545980] [3.950680] [1.261220] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:19
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0005.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0005.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0005.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_138078 [0.000100] [0.000100] [0.071718] [0.975708] [0.187392] [1.260840] [1.222090] [2.496820] [2.762290] [0.166570] [1.026030] [1.122040] [0.644303] [0.844997] [0.000100]
	k141_1203201 [0.014857] [0.000100] [0.318359] [0.589671] [0.292890] [2.458790] [1.691020] [4.090020] [3.338520] [0.517156] [0.112133] [1.758930] [1.248850] [0.753626] [0.000100]
	k141_1306508 [0.000100] [0.000100] [0.169031] [1.205080] [0.309693] [0.682033] [1.661350] [3.819150] [4.666080] [0.923168] [0.391844] [1.050830] [2.570920] [0.337470] [0.000100]
Get 3 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:34
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0007.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0007.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0007.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_1519530 [0.000100] [0.000100] [5.632970] [15.883500] [6.129670] [12.446800] [14.200600] [17.709900] [11.487600] [3.294820] [18.180800] [28.693900] [26.308900] [7.655570] [0.000100]
	k141_1703206 [0.000100] [0.000100] [4.536500] [14.077300] [12.779600] [14.849800] [26.091400] [10.574800] [4.799430] [2.016300] [18.620800] [27.671900] [24.185700] [5.925580] [0.028349]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:22
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0010.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0010.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0010.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_1464784 [0.000100] [0.000100] [0.713510] [1.153940] [1.417380] [1.501830] [2.530090] [0.329491] [0.380029] [0.113488] [2.328270] [1.782330] [1.958880] [0.647567] [0.000100]
	k141_1784393 [0.000100] [0.000100] [1.891620] [3.322950] [2.554280] [2.698510] [3.654700] [0.559810] [0.636207] [0.062723] [3.491680] [4.975510] [4.515580] [1.264800] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:23
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0011.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0011.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0011.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_553270 [0.035858] [0.000100] [0.000100] [0.398028] [0.213357] [0.179740] [3.897360] [0.905872] [1.117880] [0.012550] [0.268041] [0.125504] [1.460330] [0.210220] [0.000100]
	k141_1535220 [0.000100] [0.000100] [0.048035] [2.065500] [0.900655] [0.233624] [1.151750] [2.482530] [0.213974] [0.542576] [0.027293] [0.237991] [0.236900] [0.044760] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37
Iteration 38
Iteration 39
Iteration 40
Iteration 41
Iteration 42
Iteration 43
Iteration 44
Iteration 45
Iteration 46
Iteration 47
Iteration 48
Iteration 49
Iteration 50

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:01:15
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0012.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0012.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0012.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_689055 [0.000100] [0.000100] [0.100577] [0.352844] [0.000100] [1.752680] [0.362737] [1.940640] [1.880460] [0.037922] [0.105523] [0.827700] [0.860676] [0.031327] [0.000100]
	k141_2118050 [0.000100] [0.000100] [0.035461] [1.829790] [0.000100] [1.218090] [0.091312] [0.429965] [0.924645] [0.000100] [0.042553] [0.035461] [0.767730] [0.035461] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37
Iteration 38
Iteration 39
Iteration 40
Iteration 41
Iteration 42
Iteration 43
Iteration 44
Iteration 45
Iteration 46
Iteration 47
Iteration 48
Iteration 49
Iteration 50

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:01:02
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0014.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0014.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0014.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_762711 [0.000100] [0.000100] [0.124038] [0.680354] [0.067294] [0.314229] [0.368691] [1.313370] [0.503564] [0.047619] [0.744226] [1.414310] [2.444250] [0.561449] [0.000100]
	k141_1086125 [0.000100] [0.000100] [0.084658] [0.384422] [0.018568] [0.119591] [0.326515] [1.058850] [0.688434] [0.011959] [1.234620] [1.038240] [1.281670] [0.321794] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:26
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0015.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0015.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0015.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_928025 [0.000100] [0.000100] [0.023762] [0.348515] [0.000100] [1.155780] [2.563700] [3.763700] [0.248845] [0.196700] [0.025083] [1.116170] [0.207921] [0.050165] [0.000100]
	k141_2321355 [0.000100] [0.000100] [0.334802] [2.288550] [0.408590] [0.099119] [0.887665] [3.361230] [0.366740] [0.711454] [1.447140] [1.442730] [0.138767] [0.000100] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37
Iteration 38
Iteration 39
Iteration 40
Iteration 41
Iteration 42
Iteration 43
Iteration 44
Iteration 45
Iteration 46
Iteration 47
Iteration 48
Iteration 49
Iteration 50

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:55
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0017.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0017.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0017.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_45331 [0.000100] [0.000100] [0.031470] [2.269150] [0.000100] [10.481600] [20.960200] [0.390890] [0.436439] [0.016563] [0.298137] [4.587990] [14.590100] [3.001660] [0.000100]
	k141_273475 [0.000100] [0.000100] [0.008254] [0.152259] [0.144005] [10.091400] [14.541500] [0.515639] [0.780408] [0.099044] [0.016942] [0.180278] [11.272200] [1.279970] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:20
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0020.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0020.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0020.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_653570 [0.000100] [0.000100] [0.423700] [0.687980] [0.375107] [0.587383] [0.478261] [2.000000] [1.699060] [0.274510] [1.339300] [0.220801] [1.467180] [0.415175] [0.000100]
	k141_1835855 [0.000100] [0.000100] [0.000100] [0.165627] [0.032571] [0.080388] [0.530146] [1.570340] [0.774082] [0.209286] [0.675676] [0.732502] [0.596674] [0.000100] [0.000100]
	k141_1889281 [0.000100] [0.000100] [0.000100] [0.469869] [0.799127] [0.103057] [0.139738] [2.547600] [0.862882] [0.121397] [1.052400] [0.863755] [0.910917] [0.448035] [0.000100]
Get 3 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37
Iteration 38
Iteration 39
Iteration 40
Iteration 41
Iteration 42
Iteration 43
Iteration 44
Iteration 45
Iteration 46
Iteration 47
Iteration 48
Iteration 49
Iteration 50

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 528 (11.39%)
Elapsed time:  0 days 00:00:56
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0029.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0029.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0029.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_816963 [0.000100] [0.000100] [0.019618] [0.085699] [0.019618] [0.110480] [0.060919] [1.903460] [6.364480] [0.209086] [0.154362] [0.060919] [3.203410] [0.000100] [0.000100]
	k141_1587826 [0.178404] [0.044601] [1.396710] [0.549296] [1.062210] [0.119718] [1.809860] [2.619720] [5.515260] [2.374410] [3.237090] [0.830986] [0.268779] [0.086855] [0.044601]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:27
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0031.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0031.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0031.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_448276 [0.000100] [0.000100] [0.022119] [1.066360] [0.256694] [0.324796] [0.316647] [3.294530] [1.825380] [0.022119] [0.389988] [0.332363] [0.208964] [0.077416] [0.000100]
	k141_716861 [0.000100] [0.000100] [0.447709] [1.251970] [0.678158] [0.281583] [0.529847] [3.578780] [1.680700] [1.488660] [1.287950] [2.025800] [2.517580] [0.052406] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:33
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0037.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0037.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0037.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_361009 [0.000100] [0.011422] [1.138970] [3.592870] [2.780800] [6.191460] [5.313570] [4.950780] [1.296710] [0.852325] [3.143320] [7.037530] [4.832740] [1.954310] [0.011422]
	k141_450328 [0.000100] [0.000100] [0.039755] [0.652905] [0.328746] [0.874618] [0.609327] [1.695720] [1.067280] [0.379205] [2.173550] [2.142200] [0.976300] [0.073395] [0.000100]
	k141_480650 [0.000100] [0.000100] [0.594359] [2.324380] [1.376760] [2.164540] [2.371390] [0.536602] [0.468099] [0.150437] [2.021490] [3.131630] [1.477500] [1.195430] [0.000100]
	k141_1140789 [0.000100] [0.000100] [0.529893] [2.693520] [1.023910] [4.463180] [5.554440] [4.603520] [0.840151] [1.208310] [2.419130] [5.361230] [3.857770] [0.915670] [0.000100]
	k141_1174863 [0.013852] [0.009388] [0.400801] [1.263080] [0.815684] [1.885860] [1.477050] [0.985690] [0.445106] [0.587292] [1.737150] [4.151800] [3.001140] [0.901546] [0.018546]
Get 5 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37
Iteration 38
Iteration 39
Iteration 40
Iteration 41
Iteration 42
Iteration 43
Iteration 44
Iteration 45
Iteration 46
Iteration 47
Iteration 48
Iteration 49
Iteration 50

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 17 (0.78%)
Elapsed time:  0 days 00:00:36
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0038.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0038.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0038.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_566524 [0.000100] [0.000100] [1.215440] [2.108850] [1.614990] [1.680560] [2.062340] [23.942500] [12.955100] [4.192830] [1.138570] [0.590116] [2.704460] [1.305560] [0.000100]
	k141_730107 [0.000100] [0.000100] [0.955620] [4.813310] [1.415820] [5.949830] [8.418230] [17.515700] [13.487200] [0.697057] [1.122050] [6.078630] [9.352630] [4.527740] [0.000100]
	k141_1325627 [0.000100] [0.042389] [1.797690] [3.396920] [2.453760] [8.481700] [7.526010] [15.578000] [13.198500] [0.973988] [2.958570] [6.996150] [8.463390] [3.899810] [0.000100]
Get 3 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 5 (0.30%)
Elapsed time:  0 days 00:00:22
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0043.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0043.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0043.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_306277 [0.000100] [0.011154] [0.022309] [1.038760] [0.021194] [9.154210] [0.212214] [0.875070] [0.760736] [0.044060] [0.107641] [2.327110] [0.077803] [0.046291] [0.000100]
	k141_536716 [0.000100] [0.000100] [0.045270] [0.456761] [0.022635] [4.654090] [3.405110] [0.048752] [0.023215] [0.000100] [0.116077] [1.049910] [0.023215] [2.496810] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:24
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0047.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0047.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0047.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_1223436 [0.000100] [0.000100] [2.852360] [1.331520] [6.021740] [0.220109] [1.625910] [1.522640] [4.634960] [8.660330] [16.468300] [0.573370] [3.894020] [0.441123] [0.000100]
	k141_2491377 [0.000100] [0.000100] [1.139810] [3.848540] [0.407767] [0.073786] [0.930097] [2.143690] [4.415530] [6.317480] [19.001900] [1.881550] [2.118450] [0.000100] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:25
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0055.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0055.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0055.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_1284935 [0.000100] [0.000100] [0.049875] [2.550500] [0.000100] [5.378430] [0.224439] [0.082294] [0.000100] [0.000100] [0.232544] [6.130920] [0.117830] [0.023691] [0.000100]
	k141_2488885 [0.012630] [0.006153] [0.044041] [6.149130] [0.113342] [1.425360] [0.404955] [1.547280] [0.195920] [0.037241] [1.151390] [4.873700] [0.226522] [0.894916] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:28
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0060.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0060.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0060.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_331166 [0.000100] [0.000100] [16.110000] [26.625900] [21.331100] [34.002300] [48.199500] [26.072600] [11.037400] [5.308390] [34.953500] [51.639500] [58.100900] [11.960300] [0.000100]
	k141_1463445 [0.000100] [0.000100] [12.707700] [40.616300] [21.666300] [45.256500] [60.583100] [24.808000] [9.358290] [2.690510] [40.811000] [64.603600] [62.921800] [21.386900] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:20
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0066.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0066.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0066.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_351816 [0.006536] [0.001280] [0.047709] [0.829313] [0.078437] [2.523110] [3.288610] [4.238140] [1.940870] [0.081503] [0.133053] [1.379110] [2.790500] [0.687129] [0.006402]
	k141_2071591 [0.000100] [0.000100] [3.205610] [2.312560] [3.171340] [1.835930] [1.253370] [5.899270] [6.025960] [1.142260] [4.826580] [8.591900] [3.492210] [1.627210] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:24
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0082.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0082.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0082.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_256976 [0.000100] [0.000100] [0.369335] [0.809668] [0.378399] [0.649547] [0.890483] [3.472050] [2.140480] [0.434290] [0.706193] [2.657860] [0.462236] [0.000100] [0.000100]
	k141_562430 [0.000100] [0.000100] [0.025150] [0.362874] [0.131737] [0.369461] [0.623353] [1.124550] [1.479640] [0.115569] [0.325749] [0.716168] [1.185630] [0.244311] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:31
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0085.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0085.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0085.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_200804 [0.000100] [0.000100] [0.675117] [2.350230] [0.628315] [2.419460] [1.732640] [1.772820] [1.119150] [0.630070] [2.226210] [4.667710] [3.108420] [1.229910] [0.000100]
	k141_656782 [0.000100] [0.041215] [1.329720] [2.362260] [0.490239] [1.587850] [0.850325] [1.696310] [1.440350] [1.016270] [3.159440] [2.050980] [3.711500] [0.515184] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37
Iteration 38
Iteration 39
Iteration 40
Iteration 41
Iteration 42
Iteration 43
Iteration 44

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:34
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0087.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0087.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0087.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_787818 [0.000100] [0.000100] [0.000100] [0.061085] [0.039495] [0.218009] [0.127962] [0.342285] [3.522380] [0.021064] [2.544500] [0.312796] [0.094787] [0.246972] [0.000100]
	k141_2497959 [0.000100] [0.000100] [0.020127] [0.743114] [0.116525] [1.148830] [0.404661] [0.062500] [0.700742] [0.030720] [0.041314] [1.770130] [0.162076] [0.563030] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:30
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0091.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0091.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0091.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_252854 [0.000100] [0.000100] [0.295317] [0.820619] [0.388595] [0.345544] [0.255287] [0.336858] [0.218656] [0.129909] [0.632931] [1.902190] [1.577040] [0.199773] [0.000100]
	k141_2416317 [0.000100] [0.000100] [0.344725] [0.077266] [0.267831] [0.030461] [0.827266] [0.058692] [0.202080] [0.057950] [0.911961] [1.186850] [2.197990] [0.169391] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37
Iteration 38
Iteration 39
Iteration 40
Iteration 41

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:46
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0092.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0092.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0092.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_1958172 [0.000100] [0.000100] [0.050721] [0.000100] [0.000100] [0.895677] [0.183285] [3.235160] [1.076660] [0.330259] [0.311239] [0.281268] [1.029390] [0.027089] [0.000100]
	k141_2515916 [0.000100] [0.000100] [0.490188] [0.750901] [0.046055] [0.150981] [0.674810] [2.964360] [3.646380] [0.963556] [0.677213] [0.736083] [0.374449] [0.052062] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37
Iteration 38
Iteration 39
Iteration 40
Iteration 41
Iteration 42
Iteration 43
Iteration 44
Iteration 45
Iteration 46
Iteration 47
Iteration 48
Iteration 49
Iteration 50

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:40
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0093.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0093.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0093.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_87857 [218.837000] [40.877800] [0.312746] [0.055191] [0.287779] [0.072273] [0.019273] [0.213316] [0.024967] [0.928603] [0.452475] [0.066141] [0.123522] [0.000100] [131.661000]
	k141_2457732 [189.223000] [50.523900] [0.029051] [0.058709] [0.023465] [0.044335] [0.076397] [0.056550] [0.043066] [0.048956] [0.068007] [0.049353] [0.050376] [0.015075] [170.941000]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:18
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0095.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0095.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0095.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_1007763 [0.000100] [0.000100] [0.000100] [1.187430] [0.044893] [3.167230] [4.797980] [6.422000] [6.400670] [0.000100] [0.085297] [1.361390] [3.557800] [2.221100] [0.000100]
	k141_2421903 [0.000100] [0.000100] [0.663891] [2.800530] [0.423921] [3.589330] [3.085160] [5.452310] [7.564350] [0.666541] [1.109390] [3.151400] [4.422410] [1.463290] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:21
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0097.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0097.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0097.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_2148177 [0.000100] [0.000100] [0.044393] [0.000100] [0.044393] [0.625000] [0.095794] [0.198598] [0.433411] [0.000100] [1.803740] [0.140187] [0.375000] [0.000100] [0.000100]
	k141_2283815 [0.000100] [0.000100] [0.049984] [0.555271] [0.000100] [0.504326] [0.598526] [2.314000] [1.774750] [0.162768] [0.323935] [0.731176] [0.912848] [0.208907] [0.000100]
	k141_2465949 [0.012125] [0.011519] [0.251288] [0.522431] [0.277963] [0.297818] [0.188087] [1.920890] [2.528340] [0.698697] [0.478933] [0.500758] [1.636100] [0.206426] [0.012125]
Get 3 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37
Iteration 38
Iteration 39
Iteration 40
Iteration 41
Iteration 42
Iteration 43
Iteration 44
Iteration 45
Iteration 46
Iteration 47
Iteration 48
Iteration 49
Iteration 50

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 341 (7.04%)
Elapsed time:  0 days 00:00:58
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0100.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0100.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0100.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_240517 [0.000100] [0.000100] [0.000100] [0.567735] [0.257497] [0.372285] [0.775595] [0.700103] [2.754910] [0.084798] [0.214064] [0.295760] [0.000100] [0.080662] [0.000100]
	k141_1573677 [0.000100] [0.000100] [0.021505] [0.398415] [0.045275] [0.089417] [0.070175] [6.117150] [1.375780] [0.045275] [0.096208] [0.336729] [0.101868] [0.000100] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37
Iteration 38
Iteration 39
Iteration 40
Iteration 41
Iteration 42
Iteration 43
Iteration 44
Iteration 45
Iteration 46
Iteration 47
Iteration 48
Iteration 49
Iteration 50

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:01:02
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0101.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0101.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0101.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_793383 [0.010388] [0.000100] [0.389068] [3.599800] [0.227554] [1.319070] [0.515953] [1.317590] [1.023000] [0.373485] [0.673015] [1.794710] [1.444220] [1.128120] [0.000100]
	k141_1007842 [0.000100] [0.000100] [0.041850] [2.832600] [0.000100] [1.834800] [0.345815] [0.475771] [0.325991] [0.281938] [0.661894] [1.053960] [0.707048] [0.063877] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37
Iteration 38
Iteration 39
Iteration 40
Iteration 41

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:46
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0108.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0108.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0108.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_928231 [0.000100] [0.000100] [0.719925] [0.833333] [0.496867] [0.809524] [0.515664] [1.580830] [1.327690] [0.075188] [0.378446] [0.548872] [1.036970] [0.051378] [0.000100]
	k141_1965419 [0.000100] [0.000100] [0.108668] [0.760673] [0.428849] [0.694696] [0.050453] [0.645537] [1.029110] [0.100906] [0.076326] [0.596378] [0.643596] [0.319534] [0.000100]
	k141_2219530 [0.000100] [0.000100] [0.052945] [1.850430] [0.225017] [0.625414] [1.870280] [3.627400] [1.996030] [0.000100] [0.130377] [2.029780] [0.796161] [0.161482] [0.000100]
Get 3 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37
Iteration 38
Iteration 39
Iteration 40
Iteration 41
Iteration 42
Iteration 43
Iteration 44
Iteration 45
Iteration 46
Iteration 47
Iteration 48

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 167 (4.88%)
Elapsed time:  0 days 00:00:45
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0111.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0111.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0111.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_1325705 [0.000100] [0.000100] [0.035581] [0.037453] [0.395131] [1.828650] [1.411050] [0.478464] [1.135770] [0.000100] [1.649810] [0.057116] [0.540262] [0.774345] [0.000100]
	k141_1871816 [0.000100] [0.000100] [0.229685] [0.366417] [0.217991] [0.316342] [1.052770] [2.833580] [0.605697] [0.456972] [1.875860] [0.699250] [2.257270] [0.114843] [0.011394]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37
Iteration 38

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:45
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0117.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0117.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0117.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_1956123 [0.000100] [0.000100] [0.165299] [0.461899] [0.000100] [0.949004] [1.817120] [0.710434] [0.480657] [0.026964] [0.565651] [1.156510] [2.755570] [0.192263] [0.000100]
	k141_1983881 [0.000100] [0.000100] [0.065339] [0.052067] [0.194487] [0.750893] [3.338950] [0.073507] [0.236856] [0.000100] [0.034201] [0.107198] [3.273610] [0.265442] [0.000100]
	k141_2358760 [0.000100] [0.000100] [0.018887] [0.266402] [0.021869] [0.971670] [4.397610] [0.292247] [0.061630] [0.019881] [0.020875] [0.280815] [0.928429] [0.499006] [0.000100]
Get 3 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37
Iteration 38
Iteration 39
Iteration 40
Iteration 41
Iteration 42

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 47 (2.45%)
Elapsed time:  0 days 00:00:31
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0123.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0123.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0123.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_76250 [0.000100] [0.000100] [1.178630] [0.072357] [0.920859] [0.120407] [0.144149] [2.766530] [4.681180] [2.028260] [0.994347] [0.247032] [0.115319] [0.317128] [0.000100]
	k141_1001676 [0.000100] [0.000100] [0.110590] [0.073102] [0.139644] [0.208997] [0.151828] [1.162140] [1.697280] [1.390820] [0.078725] [0.035614] [0.110590] [0.035614] [0.000100]
	k141_1639215 [0.000100] [0.000100] [0.109339] [0.034928] [0.073652] [0.063781] [0.028854] [4.993930] [0.636295] [0.536826] [0.223994] [1.330300] [0.139711] [0.060744] [0.000100]
Get 3 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37
Iteration 38
Iteration 39
Iteration 40
Iteration 41
Iteration 42
Iteration 43
Iteration 44
Iteration 45
Iteration 46
Iteration 47
Iteration 48
Iteration 49
Iteration 50

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 192 (4.15%)
Elapsed time:  0 days 00:00:58
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0124.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0124.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0124.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_235028 [0.000100] [0.000100] [0.884892] [0.914323] [0.962067] [1.221710] [1.743620] [0.377371] [1.921520] [0.317855] [5.858730] [3.051670] [3.706340] [0.860039] [0.000100]
	k141_739400 [0.000100] [0.007361] [0.445176] [0.392484] [0.918830] [0.792329] [1.114300] [0.306470] [0.190430] [0.018210] [1.912240] [2.098990] [2.048430] [0.613522] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:24
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0125.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0125.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0125.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_1507638 [0.000100] [0.000100] [0.290672] [1.289230] [0.185105] [1.251630] [0.027477] [0.793926] [0.913955] [0.486623] [1.046280] [1.580620] [1.587130] [0.310195] [0.000100]
	k141_2072172 [0.000100] [0.000100] [0.000100] [0.575029] [0.775498] [0.487104] [0.424385] [1.329430] [2.592610] [0.361665] [0.695193] [0.459555] [2.195190] [0.227433] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:25
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0126.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0126.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0126.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_560929 [0.000100] [0.000100] [0.512681] [2.949880] [1.051330] [0.887077] [2.443840] [0.651570] [0.112923] [0.022947] [1.919080] [2.478260] [2.239130] [0.829106] [0.000100]
	k141_1724315 [0.000100] [0.000100] [0.822099] [1.176800] [0.868508] [1.101660] [2.800000] [0.337017] [0.672928] [0.225414] [0.801105] [2.782320] [2.276240] [0.046409] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:25
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0131.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0131.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0131.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_591590 [0.000100] [0.000100] [0.434354] [0.000100] [0.000100] [0.846827] [0.177243] [1.282280] [1.644420] [0.000100] [0.885120] [0.863239] [0.000100] [0.000100] [0.000100]
	k141_1142106 [0.000100] [0.000100] [0.271338] [0.488038] [0.444667] [0.680198] [0.929310] [3.488960] [1.125640] [0.194629] [1.016210] [0.496836] [1.475230] [0.307609] [0.000100]
	k141_1978791 [0.010703] [0.009487] [0.038677] [0.081975] [0.035028] [0.163221] [0.054975] [0.767453] [4.506690] [2.413770] [0.594989] [0.130625] [0.214790] [0.009730] [0.000100]
Get 3 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 50 (1.86%)
Elapsed time:  0 days 00:00:34
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0133.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0133.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0133.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_636052 [0.042889] [0.000100] [0.000100] [0.444695] [1.392780] [0.415350] [0.224605] [0.124154] [0.590293] [0.130926] [0.414221] [0.094808] [1.082390] [1.407450] [0.046275]
	k141_2550648 [0.000100] [0.000100] [0.062151] [0.404781] [1.478880] [2.012750] [2.992830] [0.206374] [0.119522] [0.000100] [0.097211] [0.033466] [0.539442] [0.000100] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:54
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0134.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0134.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0134.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_1610576 [0.093596] [0.000100] [0.197865] [2.389160] [0.750410] [0.550082] [1.463050] [4.788180] [0.080460] [0.138752] [0.938424] [3.324300] [1.485220] [0.353859] [0.000100]
	k141_2563924 [0.000100] [0.000100] [0.273092] [1.207110] [0.251291] [0.698221] [1.435460] [4.084910] [0.559954] [0.568560] [0.974182] [4.045320] [0.734940] [0.043603] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:31
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0135.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0135.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0135.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_422910 [0.000100] [0.001863] [0.297183] [1.398320] [0.955111] [1.798420] [2.335130] [1.420910] [0.817881] [0.200838] [1.239160] [2.098210] [3.657930] [1.831900] [0.000100]
	k141_1710113 [0.000100] [0.000100] [1.269160] [1.066580] [2.096200] [4.964580] [5.350910] [0.203767] [0.113138] [0.131856] [0.962445] [0.777515] [1.248070] [0.599929] [0.004502]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:35
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0136.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0136.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0136.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_910595 [0.000100] [0.000100] [1.415600] [0.035806] [0.863171] [0.099744] [0.058824] [0.175192] [0.315857] [6.184140] [0.955243] [0.384910] [0.109974] [0.010230] [0.000100]
	k141_1358685 [0.030189] [0.000100] [0.478491] [0.120755] [2.430940] [0.117736] [0.089057] [0.122264] [0.080000] [2.292830] [0.058868] [0.104151] [0.074717] [0.028679] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:30
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0140.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0140.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0140.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_1857193 [0.006436] [0.009654] [0.046339] [5.336280] [0.189863] [1.528080] [0.248753] [2.139820] [0.271440] [0.023813] [0.874819] [4.115210] [0.059533] [0.959453] [0.000100]
	k141_2269569 [0.000100] [0.000100] [0.028490] [1.425930] [0.480057] [1.254270] [0.175214] [0.290598] [0.158120] [0.000100] [0.113960] [0.847578] [0.055556] [0.028490] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37
Iteration 38
Iteration 39
Iteration 40
Iteration 41
Iteration 42
Iteration 43
Iteration 44
Iteration 45
Iteration 46
Iteration 47

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:47
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0141.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0141.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0141.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_444131 [0.027036] [0.000100] [0.026392] [0.670100] [0.025427] [0.596073] [0.561313] [2.362090] [1.299000] [0.038622] [0.191503] [0.413582] [0.397811] [0.599936] [0.000100]
	k141_1934538 [0.000100] [0.000100] [0.000100] [0.035714] [0.000100] [0.272556] [0.330827] [2.480260] [0.824248] [0.238722] [0.671053] [0.687030] [1.279140] [0.000100] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:28
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0146.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0146.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0146.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_687874 [0.000100] [0.000100] [0.872599] [1.357870] [0.368758] [1.278490] [4.242000] [7.992960] [6.159410] [3.792570] [2.114600] [0.708707] [2.214470] [1.278490] [0.000100]
	k141_1442606 [0.001692] [0.001607] [2.053720] [2.254310] [2.171360] [1.400000] [3.610700] [4.795690] [5.501950] [2.170090] [5.885660] [3.546150] [6.276860] [1.232830] [0.004992]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:21
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0153.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0153.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0153.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_601256 [0.000100] [0.000100] [0.275000] [0.154167] [0.306250] [0.671875] [0.613542] [1.415620] [0.567708] [0.410417] [0.491667] [1.144790] [1.118750] [0.514583] [0.000100]
	k141_2248305 [0.000100] [0.000100] [0.397184] [0.334471] [0.388652] [0.622014] [0.583191] [3.641640] [2.933020] [0.220990] [0.369881] [0.377560] [2.065700] [1.056310] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:26
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0157.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0157.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0157.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_491101 [0.000100] [0.000100] [0.025833] [0.215500] [0.025833] [0.458872] [0.570360] [0.848402] [2.029230] [0.025833] [0.352821] [0.000100] [0.286880] [0.296397] [0.000100]
	k141_2388561 [0.052306] [0.000100] [0.027529] [3.026840] [0.399174] [1.073640] [0.083964] [1.889880] [1.367520] [0.415692] [2.059880] [2.587750] [0.026153] [0.331727] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37
Iteration 38
Iteration 39
Iteration 40
Iteration 41
Iteration 42
Iteration 43
Iteration 44
Iteration 45
Iteration 46
Iteration 47
Iteration 48
Iteration 49
Iteration 50

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:42
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0159.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0159.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0159.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_275491 [0.000100] [0.000100] [0.160000] [0.033044] [0.646957] [3.887830] [0.859130] [0.137391] [0.358261] [0.389565] [0.517391] [0.125217] [0.757391] [0.067826] [0.000100]
	k141_1360372 [0.000100] [0.000100] [0.047836] [0.344723] [0.405467] [0.993166] [2.014430] [0.050114] [0.355353] [0.000100] [0.766135] [0.362946] [0.733485] [0.734244] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37
Iteration 38
Iteration 39
Iteration 40
Iteration 41
Iteration 42
Iteration 43
Iteration 44
Iteration 45
Iteration 46
Iteration 47
Iteration 48
Iteration 49
Iteration 50

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:49
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0160.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0160.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0160.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_428066 [0.000100] [0.000100] [2.388950] [0.042508] [2.500530] [0.024442] [0.000100] [0.236982] [0.133900] [5.539850] [0.522848] [0.040383] [0.443146] [0.042508] [0.000100]
	k141_2409951 [0.000100] [0.000100] [4.706630] [0.237245] [2.872450] [0.215816] [0.551020] [1.223980] [0.460714] [1.395410] [5.476020] [0.245918] [1.441840] [0.112755] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37
Iteration 38
Iteration 39
Iteration 40
Iteration 41
Iteration 42
Iteration 43
Iteration 44
Iteration 45
Iteration 46
Iteration 47
Iteration 48
Iteration 49
Iteration 50

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:38
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0161.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0161.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0161.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_946193 [0.000100] [0.000100] [0.000100] [1.069540] [0.588802] [1.118900] [1.489160] [6.938890] [7.945210] [0.962071] [0.652619] [1.964480] [4.541240] [0.467489] [0.000100]
	k141_1198307 [0.000100] [0.000100] [0.695394] [0.767094] [0.910969] [0.766857] [1.487650] [5.796530] [5.070280] [0.567901] [1.245730] [1.661440] [3.265670] [1.223880] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:29
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0166.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0166.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0166.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_243560 [0.000100] [0.000100] [0.166978] [0.171028] [0.177570] [0.293458] [1.313400] [2.221180] [0.963240] [0.203738] [0.101869] [0.362305] [1.405920] [0.280374] [0.000100]
	k141_486913 [0.000100] [0.000100] [0.000100] [0.041572] [0.000100] [1.224110] [2.465610] [0.546485] [0.455782] [0.044596] [0.014361] [0.666289] [2.196150] [0.685941] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:21
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0168.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0168.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0168.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_604873 [0.009880] [0.000100] [0.630440] [1.173610] [1.247940] [1.217360] [1.303930] [5.640080] [3.127970] [0.326511] [0.253823] [2.666430] [2.040230] [1.386030] [0.000100]
	k141_1430440 [0.018417] [0.000100] [0.056220] [1.806140] [0.021325] [1.825360] [0.831179] [0.109370] [0.983037] [0.076252] [0.552342] [1.770270] [1.078840] [0.136995] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:24
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0169.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0169.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0169.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_860926 [0.000100] [0.000100] [0.011589] [0.365050] [0.035377] [6.141810] [0.249161] [0.328759] [2.632210] [0.465691] [0.524245] [0.922842] [0.163160] [0.368710] [0.000100]
	k141_1877957 [0.000100] [0.000100] [0.930526] [0.808421] [0.252632] [3.174740] [0.463158] [0.723158] [4.912630] [0.556842] [6.228420] [2.071580] [0.104211] [0.945263] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:28
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0171.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0171.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0171.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_456926 [0.007697] [0.000100] [0.266154] [5.479440] [0.324286] [8.538180] [6.358720] [7.379380] [23.757300] [0.741949] [1.755110] [4.887380] [7.855380] [4.569580] [0.000100]
	k141_1667064 [0.000100] [0.000100] [1.038040] [6.845560] [2.009790] [13.005500] [17.350300] [20.122100] [12.555800] [0.995216] [0.459681] [8.774940] [12.003900] [5.204560] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:21
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0172.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0172.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0172.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_99438 [0.000100] [0.004948] [1.367800] [1.256160] [2.002470] [7.121950] [4.363470] [0.526131] [0.075869] [0.068962] [1.279350] [1.897230] [1.313370] [0.466344] [0.004948]
	k141_99879 [0.000100] [0.000100] [0.216236] [0.512159] [0.303404] [0.595585] [0.042649] [1.031430] [0.382342] [0.183315] [1.003740] [1.745230] [1.295550] [0.741863] [0.000100]
	k141_371796 [0.000100] [0.000100] [0.047619] [0.786023] [0.230983] [1.380950] [0.950216] [1.770560] [1.290970] [0.013605] [1.162960] [1.298700] [0.927025] [0.615646] [0.000100]
	k141_469919 [0.000100] [0.000100] [0.071813] [0.757630] [0.000100] [0.336625] [1.455120] [0.853680] [0.071813] [0.513465] [0.346499] [0.111311] [1.508980] [0.315978] [0.000100]
	k141_995612 [0.000100] [0.093333] [0.031111] [1.188890] [0.097037] [0.574074] [1.358520] [0.511852] [0.451111] [0.000100] [0.637037] [1.460740] [0.653333] [0.393333] [0.062222]
	k141_1116544 [0.019843] [0.000100] [0.349869] [0.543603] [0.210444] [1.369190] [0.513316] [0.747781] [0.071541] [0.043864] [0.904439] [2.364490] [0.997911] [0.908616] [0.019843]
	k141_1297237 [0.026893] [0.000100] [0.720807] [2.090230] [0.879689] [3.966030] [2.228950] [3.887470] [2.685420] [0.403397] [2.541050] [4.201340] [4.840410] [1.296890] [0.013447]
	k141_2022902 [0.000100] [0.000100] [0.094500] [0.442293] [0.029434] [0.158017] [0.066615] [0.371805] [0.385747] [0.000100] [0.301317] [1.884590] [1.187450] [0.213013] [0.000100]
Get 8 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37
Iteration 38
Iteration 39
Iteration 40
Iteration 41
Iteration 42
Iteration 43
Iteration 44
Iteration 45
Iteration 46
Iteration 47
Iteration 48
Iteration 49
Iteration 50

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 206 (5.39%)
Elapsed time:  0 days 00:00:53
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0174.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0174.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0174.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_1831667 [0.000100] [0.000100] [0.499624] [0.187359] [0.015801] [0.671181] [0.420617] [1.669680] [2.738900] [0.625282] [0.366441] [0.629797] [0.812641] [0.237020] [0.000100]
	k141_2295079 [0.009536] [0.000100] [0.132497] [0.191970] [0.009536] [0.839649] [0.951317] [3.230870] [2.922710] [0.030113] [0.079297] [0.428356] [0.530238] [0.405019] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:27
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0176.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0176.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0176.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_1128102 [0.026008] [0.000100] [0.377113] [0.000100] [0.040312] [0.026008] [0.124837] [0.728218] [0.985696] [0.381664] [0.960988] [0.000100] [1.254880] [0.000100] [0.000100]
	k141_1401858 [0.000100] [0.000100] [0.169114] [1.051650] [0.289114] [0.060760] [0.707342] [0.725570] [0.301772] [0.019241] [0.398481] [0.926076] [2.821770] [0.218734] [0.000100]
	k141_1650716 [0.000100] [0.000100] [0.133506] [0.934970] [0.413867] [0.280792] [0.349699] [0.804479] [2.126620] [0.792420] [0.293282] [0.133506] [0.266581] [0.000100] [0.000100]
Get 3 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37
Iteration 38
Iteration 39
Iteration 40
Iteration 41
Iteration 42
Iteration 43
Iteration 44
Iteration 45
Iteration 46
Iteration 47
Iteration 48
Iteration 49
Iteration 50

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 176 (2.67%)
Elapsed time:  0 days 00:01:13
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0177.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0177.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0177.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_1217407 [0.000100] [0.000100] [0.081301] [0.106707] [0.000100] [0.166667] [3.009150] [0.268293] [0.000100] [0.000100] [0.455285] [0.470528] [0.000100] [0.471545] [0.000100]
	k141_2447518 [0.000100] [0.000100] [1.129030] [1.301710] [0.041746] [0.944023] [1.550280] [0.404175] [0.229602] [0.000100] [2.305500] [3.186910] [1.567360] [1.945920] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37
Iteration 38
Iteration 39
Iteration 40

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:38
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0178.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0178.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0178.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_391976 [0.000100] [0.000100] [0.250363] [0.214804] [0.091437] [0.105225] [0.531205] [4.664730] [0.944848] [0.059506] [0.165457] [0.066763] [0.574746] [0.000100] [0.000100]
	k141_1653328 [0.000100] [0.006103] [0.143272] [0.363993] [0.150538] [1.125690] [1.063930] [2.286840] [1.751530] [0.104911] [0.179454] [0.766056] [1.097360] [0.071491] [0.006103]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:49
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0182.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0182.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0182.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_185732 [0.000100] [0.000100] [0.045983] [0.283640] [0.018393] [0.039690] [0.328654] [1.940460] [0.166989] [0.036786] [1.225560] [3.361080] [0.056147] [0.040658] [0.000100]
	k141_2029464 [0.000100] [0.000100] [0.414070] [2.009050] [0.402010] [0.044221] [0.436181] [2.577890] [0.086432] [0.104523] [1.597990] [1.634170] [0.393970] [0.184925] [0.084422]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37
Iteration 38
Iteration 39

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:49
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0185.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0185.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0185.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_371720 [0.022248] [0.000100] [0.070258] [0.071429] [0.574356] [0.522834] [2.199650] [1.162180] [0.395785] [0.044497] [3.083720] [0.179742] [0.570258] [0.000100] [0.000100]
	k141_2524578 [0.000100] [0.000100] [0.000100] [0.081985] [0.000100] [1.571740] [0.531823] [0.537217] [1.898600] [0.000100] [0.521036] [0.549083] [1.250270] [0.636462] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37
Iteration 38
Iteration 39
Iteration 40
Iteration 41
Iteration 42
Iteration 43
Iteration 44
Iteration 45
Iteration 46
Iteration 47
Iteration 48
Iteration 49
Iteration 50

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:01:10
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0190.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0190.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0190.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_590125 [0.000100] [0.050476] [0.052958] [0.643773] [0.476624] [0.935871] [1.986760] [2.203560] [2.811340] [0.065370] [0.168804] [0.548614] [0.775755] [0.388084] [0.067853]
	k141_601662 [0.000100] [0.028470] [0.434164] [1.320280] [0.281851] [0.478292] [0.438434] [1.866900] [0.340925] [0.000100] [0.027046] [0.212100] [0.448399] [0.000100] [0.000100]
	k141_683892 [0.000100] [0.000100] [0.396127] [0.492077] [0.054578] [0.070422] [1.092430] [1.150530] [1.044010] [0.035211] [1.688380] [1.861800] [1.828350] [0.674296] [0.000100]
	k141_1110352 [0.000100] [0.000100] [0.000100] [1.407980] [0.088692] [0.090909] [0.409091] [1.294900] [0.000100] [0.000100] [0.077605] [0.577605] [0.613082] [0.000100] [0.000100]
	k141_1144961 [0.000100] [0.000100] [0.205935] [0.127698] [1.037470] [0.556355] [1.162170] [0.492506] [0.128597] [0.038669] [1.122300] [1.046460] [1.303660] [0.270683] [0.000100]
	k141_1821187 [0.000100] [0.000100] [0.168508] [0.636050] [0.000100] [0.200276] [1.268650] [0.937155] [1.500000] [0.000100] [0.087017] [0.197514] [0.622238] [1.962020] [0.000100]
	k141_2425676 [0.000100] [0.000100] [0.000100] [0.039054] [0.150051] [0.932169] [1.247690] [0.807811] [0.078109] [0.279548] [1.684480] [0.043166] [1.474820] [0.322713] [0.000100]
Get 7 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37
Iteration 38
Iteration 39
Iteration 40
Iteration 41
Iteration 42
Iteration 43
Iteration 44
Iteration 45
Iteration 46
Iteration 47
Iteration 48
Iteration 49
Iteration 50

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 397 (8.59%)
Elapsed time:  0 days 00:01:00
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0192.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0192.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0192.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_848293 [0.000100] [0.000100] [0.719130] [0.880870] [1.857390] [0.573043] [1.533910] [0.532174] [0.000100] [0.000100] [2.665220] [0.016522] [1.652170] [0.279130] [0.000100]
	k141_1748871 [0.011667] [0.023334] [0.015352] [0.387780] [0.012281] [5.021800] [0.804728] [0.109303] [0.154744] [0.036844] [0.093951] [0.050353] [0.011974] [1.010130] [0.011667]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:42
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0193.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0193.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0193.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_1492758 [0.000100] [0.000100] [0.000100] [1.433140] [0.000100] [0.837714] [0.180571] [1.013710] [0.091429] [0.000100] [0.045714] [0.416000] [0.048000] [0.000100] [0.000100]
	k141_1976397 [0.000100] [0.000100] [0.000100] [0.372671] [0.055211] [0.596273] [0.026225] [0.857833] [0.384403] [0.000100] [0.353347] [0.622498] [1.231880] [0.469979] [0.000100]
	k141_2438432 [0.034420] [0.000100] [0.036232] [0.835145] [0.034420] [5.662140] [0.412138] [0.304348] [0.125000] [0.053442] [0.300725] [0.052536] [0.036232] [1.687500] [0.000100]
Get 3 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 66 (1.82%)
Elapsed time:  0 days 00:00:37
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0196.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0196.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0196.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_236889 [0.000100] [0.000100] [2.936620] [5.036090] [2.148330] [4.551060] [6.187500] [2.400530] [1.082310] [0.526849] [4.296650] [7.055020] [7.599470] [1.957750] [0.000100]
	k141_1496075 [0.000100] [0.000100] [2.696410] [10.772300] [4.875690] [10.515300] [17.185600] [7.817590] [3.119080] [0.933002] [12.900500] [17.228000] [18.967000] [4.803190] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37
Iteration 38
Iteration 39
Iteration 40
Iteration 41
Iteration 42
Iteration 43
Iteration 44
Iteration 45
Iteration 46
Iteration 47
Iteration 48
Iteration 49
Iteration 50

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:32
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0005.out.0003.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0005.out.0003.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0005.out.0003.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_1203201 [0.014857] [0.000100] [0.318359] [0.589671] [0.292890] [2.458790] [1.691020] [4.090020] [3.338520] [0.517156] [0.112133] [1.758930] [1.248850] [0.753626] [0.000100]
	k141_1306508 [0.000100] [0.000100] [0.169031] [1.205080] [0.309693] [0.682033] [1.661350] [3.819150] [4.666080] [0.923168] [0.391844] [1.050830] [2.570920] [0.337470] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:22
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0007.out.0002.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0007.out.0002.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0007.out.0002.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_1519530 [0.000100] [0.000100] [5.632970] [15.883500] [6.129670] [12.446800] [14.200600] [17.709900] [11.487600] [3.294820] [18.180800] [28.693900] [26.308900] [7.655570] [0.000100]
	k141_1703206 [0.000100] [0.000100] [4.536500] [14.077300] [12.779600] [14.849800] [26.091400] [10.574800] [4.799430] [2.016300] [18.620800] [27.671900] [24.185700] [5.925580] [0.028349]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:19
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0010.out.0002.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0010.out.0002.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0010.out.0002.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_1464784 [0.000100] [0.000100] [0.713510] [1.153940] [1.417380] [1.501830] [2.530090] [0.329491] [0.380029] [0.113488] [2.328270] [1.782330] [1.958880] [0.647567] [0.000100]
	k141_1784393 [0.000100] [0.000100] [1.891620] [3.322950] [2.554280] [2.698510] [3.654700] [0.559810] [0.636207] [0.062723] [3.491680] [4.975510] [4.515580] [1.264800] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:20
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0012.out.0001.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0012.out.0001.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0012.out.0001.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_689055 [0.000100] [0.000100] [0.100577] [0.352844] [0.000100] [1.752680] [0.362737] [1.940640] [1.880460] [0.037922] [0.105523] [0.827700] [0.860676] [0.031327] [0.000100]
	k141_2118050 [0.000100] [0.000100] [0.035461] [1.829790] [0.000100] [1.218090] [0.091312] [0.429965] [0.924645] [0.000100] [0.042553] [0.035461] [0.767730] [0.035461] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:23
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0012.out.0002.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0012.out.0002.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0012.out.0002.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_886035 [0.000100] [0.000100] [0.000100] [0.073858] [0.494655] [0.534500] [0.040816] [0.824101] [0.038873] [0.361516] [0.207969] [0.409135] [0.000100] [0.463557] [0.000100]
	k141_905749 [0.000100] [0.000100] [0.786650] [0.613849] [0.524641] [0.597006] [3.267000] [0.148472] [0.642545] [0.129757] [0.143481] [1.378660] [1.830320] [0.024953] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37
Iteration 38
Iteration 39
Iteration 40
Iteration 41
Iteration 42
Iteration 43
Iteration 44
Iteration 45
Iteration 46
Iteration 47
Iteration 48
Iteration 49
Iteration 50

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:46
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0020.out.0001.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0020.out.0001.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0020.out.0001.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_137901 [0.000100] [0.000100] [0.521455] [0.770909] [0.055273] [1.153450] [0.653818] [4.015270] [1.359270] [0.072727] [0.492364] [0.255273] [0.091636] [0.027636] [0.000100]
	k141_482594 [0.000100] [0.000100] [0.164200] [2.261100] [0.399051] [1.027930] [0.819045] [1.301310] [0.549009] [0.473331] [1.795030] [2.972070] [1.961460] [0.338453] [0.000100]
	k141_1418728 [0.000100] [0.000100] [0.393972] [0.525296] [0.312164] [0.534984] [0.579117] [1.511300] [0.567277] [1.153930] [1.820240] [2.698600] [0.124865] [0.000100] [0.000100]
Get 3 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37
Iteration 38
Iteration 39
Iteration 40
Iteration 41
Iteration 42
Iteration 43
Iteration 44
Iteration 45
Iteration 46
Iteration 47
Iteration 48
Iteration 49
Iteration 50

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 120 (11.05%)
Elapsed time:  0 days 00:00:27
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0029.out.0002.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0029.out.0002.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0029.out.0002.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_1751229 [0.000100] [0.000100] [0.000100] [0.050955] [0.000100] [0.247700] [0.108988] [0.779193] [3.702760] [1.457180] [0.283086] [0.000100] [0.000100] [0.000100] [0.000100]
	k141_2412532 [0.000100] [0.000100] [0.000100] [0.000100] [0.054667] [0.025333] [0.158000] [1.166670] [7.088670] [4.082000] [0.097333] [0.000100] [0.026667] [0.025333] [0.050667]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:23
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0037.out.0001.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0037.out.0001.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0037.out.0001.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_361009 [0.000100] [0.011422] [1.138970] [3.592870] [2.780800] [6.191460] [5.313570] [4.950780] [1.296710] [0.852325] [3.143320] [7.037530] [4.832740] [1.954310] [0.011422]
	k141_1140789 [0.000100] [0.000100] [0.529893] [2.693520] [1.023910] [4.463180] [5.554440] [4.603520] [0.840151] [1.208310] [2.419130] [5.361230] [3.857770] [0.915670] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:18
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0037.out.0005.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0037.out.0005.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0037.out.0005.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_480650 [0.000100] [0.000100] [0.594359] [2.324380] [1.376760] [2.164540] [2.371390] [0.536602] [0.468099] [0.150437] [2.021490] [3.131630] [1.477500] [1.195430] [0.000100]
	k141_1174863 [0.013852] [0.009388] [0.400801] [1.263080] [0.815684] [1.885860] [1.477050] [0.985690] [0.445106] [0.587292] [1.737150] [4.151800] [3.001140] [0.901546] [0.018546]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:18
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0038.out.0002.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0038.out.0002.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0038.out.0002.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_730107 [0.000100] [0.000100] [0.955620] [4.813310] [1.415820] [5.949830] [8.418230] [17.515700] [13.487200] [0.697057] [1.122050] [6.078630] [9.352630] [4.527740] [0.000100]
	k141_1325627 [0.000100] [0.042389] [1.797690] [3.396920] [2.453760] [8.481700] [7.526010] [15.578000] [13.198500] [0.973988] [2.958570] [6.996150] [8.463390] [3.899810] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:22
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0060.out.0001.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0060.out.0001.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0060.out.0001.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_331166 [0.000100] [0.000100] [16.110000] [26.625900] [21.331100] [34.002300] [48.199500] [26.072600] [11.037400] [5.308390] [34.953500] [51.639500] [58.100900] [11.960300] [0.000100]
	k141_1463445 [0.000100] [0.000100] [12.707700] [40.616300] [21.666300] [45.256500] [60.583100] [24.808000] [9.358290] [2.690510] [40.811000] [64.603600] [62.921800] [21.386900] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:20
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0092.out.0002.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0092.out.0002.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0092.out.0002.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_1087710 [0.000100] [0.000100] [0.095360] [0.568225] [0.036809] [0.591680] [0.361411] [8.442390] [0.785996] [0.102893] [0.398904] [0.720253] [0.060435] [0.007191] [0.006506]
	k141_2076735 [0.000100] [0.000100] [0.371257] [0.445291] [0.288514] [0.064235] [0.702776] [1.428420] [4.735440] [0.731083] [0.203048] [0.371257] [0.372891] [0.249320] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37
Iteration 38
Iteration 39
Iteration 40
Iteration 41
Iteration 42
Iteration 43

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:26
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0093.out.0002.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0093.out.0002.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0093.out.0002.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_87857 [218.837000] [40.877800] [0.312746] [0.055191] [0.287779] [0.072273] [0.019273] [0.213316] [0.024967] [0.928603] [0.452475] [0.066141] [0.123522] [0.000100] [131.661000]
	k141_2457732 [189.223000] [50.523900] [0.029051] [0.058709] [0.023465] [0.044335] [0.076397] [0.056550] [0.043066] [0.048956] [0.068007] [0.049353] [0.050376] [0.015075] [170.941000]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:18
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0095.out.0002.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0095.out.0002.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0095.out.0002.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_404743 [0.000100] [0.000100] [0.551753] [6.688230] [0.404007] [5.757930] [7.896700] [2.065940] [4.681970] [0.000100] [0.372287] [6.675710] [10.339900] [2.208060] [0.000100]
	k141_2421903 [0.000100] [0.000100] [0.663891] [2.800530] [0.423921] [3.589330] [3.085160] [5.452310] [7.564350] [0.666541] [1.109390] [3.151400] [4.422410] [1.463290] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:20
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0108.out.0003.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0108.out.0003.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0108.out.0003.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_1089506 [0.000100] [0.000100] [0.000100] [5.055300] [0.855991] [2.500000] [0.957373] [2.377880] [1.102530] [0.476959] [0.862903] [1.245390] [0.829493] [0.440092] [0.000100]
	k141_1351111 [0.000100] [0.000100] [0.000100] [0.970486] [0.043403] [0.363715] [0.039931] [0.961806] [0.920139] [0.290799] [1.647570] [1.206600] [0.035590] [0.000100] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37
Iteration 38
Iteration 39
Iteration 40
Iteration 41
Iteration 42
Iteration 43
Iteration 44
Iteration 45
Iteration 46
Iteration 47
Iteration 48
Iteration 49
Iteration 50

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:28
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0111.out.0002.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0111.out.0002.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0111.out.0002.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_338724 [0.000100] [0.000100] [0.314470] [1.231200] [0.147534] [1.289010] [0.791431] [1.601860] [2.819730] [0.906225] [1.055380] [2.044460] [0.899758] [0.655618] [0.000100]
	k141_777336 [0.000100] [0.000100] [0.336564] [0.072247] [0.301322] [0.068723] [1.107490] [6.644930] [1.694270] [0.741850] [0.269604] [0.185022] [0.628194] [0.033480] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:30
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0117.out.0003.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0117.out.0003.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0117.out.0003.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_1983881 [0.000100] [0.000100] [0.065339] [0.052067] [0.194487] [0.750893] [3.338950] [0.073507] [0.236856] [0.000100] [0.034201] [0.107198] [3.273610] [0.265442] [0.000100]
	k141_2358760 [0.000100] [0.000100] [0.018887] [0.266402] [0.021869] [0.971670] [4.397610] [0.292247] [0.061630] [0.019881] [0.020875] [0.280815] [0.928429] [0.499006] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:20
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0124.out.0001.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0124.out.0001.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0124.out.0001.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_1378654 [0.000100] [0.000100] [0.069369] [0.790090] [0.809910] [0.700450] [1.001350] [0.556757] [0.453604] [0.255405] [3.159460] [2.977930] [2.107210] [0.722973] [0.000100]
	k141_1965993 [0.000100] [0.000100] [1.145110] [1.159400] [0.669925] [0.623308] [1.181950] [0.581203] [1.145110] [0.279699] [4.254510] [1.046240] [3.514290] [0.789474] [0.030075]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:22
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0131.out.0001.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0131.out.0001.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0131.out.0001.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_304826 [0.000100] [0.000100] [1.534940] [0.505155] [1.978240] [1.578470] [0.948454] [0.335624] [0.373425] [3.217640] [2.298970] [0.334479] [1.340210] [0.045819] [0.000100]
	k141_1978791 [0.010703] [0.009487] [0.038677] [0.081975] [0.035028] [0.163221] [0.054975] [0.767453] [4.506690] [2.413770] [0.594989] [0.130625] [0.214790] [0.009730] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:21
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0134.out.0002.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0134.out.0002.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0134.out.0002.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_689600 [0.000100] [0.000100] [0.101202] [0.994307] [0.182163] [0.758381] [0.994307] [3.234660] [1.128400] [0.225174] [1.239090] [1.956360] [0.278305] [0.051866] [0.000100]
	k141_2360205 [0.000100] [0.000100] [0.000100] [1.972410] [0.482759] [0.648276] [0.216749] [0.485714] [0.647291] [1.223650] [1.615760] [1.140890] [0.037438] [0.345813] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:34
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0135.out.0001.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0135.out.0001.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0135.out.0001.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_422910 [0.000100] [0.001863] [0.297183] [1.398320] [0.955111] [1.798420] [2.335130] [1.420910] [0.817881] [0.200838] [1.239160] [2.098210] [3.657930] [1.831900] [0.000100]
	k141_1710113 [0.000100] [0.000100] [1.269160] [1.066580] [2.096200] [4.964580] [5.350910] [0.203767] [0.113138] [0.131856] [0.962445] [0.777515] [1.248070] [0.599929] [0.004502]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:26
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0157.out.0001.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0157.out.0001.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0157.out.0001.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_390805 [0.026823] [0.000100] [1.590960] [1.245360] [1.341640] [1.234870] [1.378950] [0.968535] [0.498453] [0.444292] [4.050720] [2.779920] [2.222490] [0.348865] [0.013067]
	k141_2388561 [0.052306] [0.000100] [0.027529] [3.026840] [0.399174] [1.073640] [0.083964] [1.889880] [1.367520] [0.415692] [2.059880] [2.587750] [0.026153] [0.331727] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37
Iteration 38
Iteration 39
Iteration 40
Iteration 41
Iteration 42
Iteration 43
Iteration 44

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:30
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0157.out.0002.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0157.out.0002.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0157.out.0002.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_1860698 [0.000100] [0.000100] [0.444985] [0.270437] [0.414936] [0.874945] [0.745912] [1.399030] [1.473710] [0.246133] [2.590810] [1.885550] [1.447190] [0.021211] [0.000100]
	k141_2169551 [0.000100] [0.000100] [0.000100] [0.220690] [0.043678] [0.555172] [0.973563] [0.617241] [0.045977] [0.000100] [1.088510] [0.486207] [0.000100] [0.000100] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:24
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0172.out.0008.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0172.out.0008.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0172.out.0008.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_371796 [0.000100] [0.000100] [0.047619] [0.786023] [0.230983] [1.380950] [0.950216] [1.770560] [1.290970] [0.013605] [1.162960] [1.298700] [0.927025] [0.615646] [0.000100]
	k141_469919 [0.000100] [0.000100] [0.071813] [0.757630] [0.000100] [0.336625] [1.455120] [0.853680] [0.071813] [0.513465] [0.346499] [0.111311] [1.508980] [0.315978] [0.000100]
	k141_995612 [0.000100] [0.093333] [0.031111] [1.188890] [0.097037] [0.574074] [1.358520] [0.511852] [0.451111] [0.000100] [0.637037] [1.460740] [0.653333] [0.393333] [0.062222]
	k141_1116544 [0.019843] [0.000100] [0.349869] [0.543603] [0.210444] [1.369190] [0.513316] [0.747781] [0.071541] [0.043864] [0.904439] [2.364490] [0.997911] [0.908616] [0.019843]
	k141_2022902 [0.000100] [0.000100] [0.094500] [0.442293] [0.029434] [0.158017] [0.066615] [0.371805] [0.385747] [0.000100] [0.301317] [1.884590] [1.187450] [0.213013] [0.000100]
Get 5 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37
Iteration 38
Iteration 39
Iteration 40
Iteration 41
Iteration 42

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 84 (11.04%)
Elapsed time:  0 days 00:00:23
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0174.out.0002.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0174.out.0002.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0174.out.0002.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_833875 [0.003287] [0.000100] [0.024984] [0.131492] [0.019395] [0.674885] [0.580210] [3.101580] [2.457920] [0.024984] [0.144970] [0.488823] [0.672584] [0.394149] [0.000100]
	k141_2196116 [0.022844] [0.000100] [0.021702] [0.044546] [0.021702] [0.068532] [0.270131] [3.356370] [1.844660] [0.731011] [0.070817] [0.130211] [0.264991] [0.065106] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37
Iteration 38
Iteration 39

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:28
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0176.out.0001.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0176.out.0001.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0176.out.0001.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_1128102 [0.026008] [0.000100] [0.377113] [0.000100] [0.040312] [0.026008] [0.124837] [0.728218] [0.985696] [0.381664] [0.960988] [0.000100] [1.254880] [0.000100] [0.000100]
	k141_1401858 [0.000100] [0.000100] [0.169114] [1.051650] [0.289114] [0.060760] [0.707342] [0.725570] [0.301772] [0.019241] [0.398481] [0.926076] [2.821770] [0.218734] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:24
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0176.out.0002.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0176.out.0002.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0176.out.0002.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_82763 [0.016177] [0.000100] [0.032354] [0.501490] [0.201788] [0.385270] [0.908897] [0.975734] [0.917837] [0.132822] [0.856109] [0.717327] [1.850570] [0.416773] [0.000100]
	k141_320939 [0.000100] [0.000100] [0.000100] [0.668053] [0.062370] [0.428274] [0.041580] [1.178790] [3.363130] [0.422037] [0.174636] [0.320166] [0.382536] [0.242550] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:26
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0177.out.0002.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0177.out.0002.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0177.out.0002.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_1217407 [0.000100] [0.000100] [0.081301] [0.106707] [0.000100] [0.166667] [3.009150] [0.268293] [0.000100] [0.000100] [0.455285] [0.470528] [0.000100] [0.471545] [0.000100]
	k141_2447518 [0.000100] [0.000100] [1.129030] [1.301710] [0.041746] [0.944023] [1.550280] [0.404175] [0.229602] [0.000100] [2.305500] [3.186910] [1.567360] [1.945920] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37
Iteration 38

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:30
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0190.out.0003.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0190.out.0003.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0190.out.0003.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_590125 [0.000100] [0.050476] [0.052958] [0.643773] [0.476624] [0.935871] [1.986760] [2.203560] [2.811340] [0.065370] [0.168804] [0.548614] [0.775755] [0.388084] [0.067853]
	k141_601662 [0.000100] [0.028470] [0.434164] [1.320280] [0.281851] [0.478292] [0.438434] [1.866900] [0.340925] [0.000100] [0.027046] [0.212100] [0.448399] [0.000100] [0.000100]
	k141_683892 [0.000100] [0.000100] [0.396127] [0.492077] [0.054578] [0.070422] [1.092430] [1.150530] [1.044010] [0.035211] [1.688380] [1.861800] [1.828350] [0.674296] [0.000100]
	k141_1110352 [0.000100] [0.000100] [0.000100] [1.407980] [0.088692] [0.090909] [0.409091] [1.294900] [0.000100] [0.000100] [0.077605] [0.577605] [0.613082] [0.000100] [0.000100]
Get 4 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37
Iteration 38
Iteration 39
Iteration 40
Iteration 41
Iteration 42
Iteration 43
Iteration 44
Iteration 45
Iteration 46
Iteration 47
Iteration 48
Iteration 49
Iteration 50

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 35 (5.24%)
Elapsed time:  0 days 00:00:23
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0190.out.0007.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0190.out.0007.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0190.out.0007.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_43021 [0.000100] [0.000100] [0.034327] [2.826560] [0.000100] [0.257453] [0.046071] [1.621500] [1.511290] [0.000100] [0.000100] [0.952123] [0.039747] [0.058717] [0.000100]
	k141_2431479 [0.000100] [0.000100] [0.413400] [0.651461] [0.084818] [1.346400] [0.801853] [0.754811] [0.933713] [0.000100] [0.362081] [0.285103] [0.851034] [0.372060] [0.027085]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37
Iteration 38
Iteration 39
Iteration 40
Iteration 41
Iteration 42
Iteration 43
Iteration 44
Iteration 45
Iteration 46
Iteration 47
Iteration 48
Iteration 49
Iteration 50

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:27
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0192.out.0001.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0192.out.0001.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0192.out.0001.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_1083982 [0.000100] [0.000100] [0.052562] [0.052562] [0.310775] [0.562418] [0.819317] [2.356770] [1.105780] [0.053877] [0.764783] [0.356110] [0.076216] [0.027595] [0.000100]
	k141_2111563 [0.000100] [0.000100] [0.639944] [0.388186] [0.997187] [1.440230] [1.617440] [3.381150] [1.735580] [0.321378] [0.059072] [0.560478] [0.990858] [0.854430] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37
Iteration 38
Iteration 39
Iteration 40
Iteration 41
Iteration 42
Iteration 43
Iteration 44
Iteration 45
Iteration 46
Iteration 47
Iteration 48
Iteration 49
Iteration 50

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:41
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0193.out.0002.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0193.out.0002.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0193.out.0002.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_689331 [0.000100] [0.000100] [0.035191] [1.134160] [0.027859] [1.770530] [0.092375] [0.819648] [0.000100] [0.027859] [0.057185] [0.077713] [0.094575] [0.725073] [0.000100]
	k141_2557397 [0.111328] [0.000100] [0.041016] [0.879883] [0.000100] [0.956055] [0.203125] [2.234380] [0.261719] [0.562500] [0.039062] [0.476562] [0.686523] [0.000100] [0.037109]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:24
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0196.out.0001.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0196.out.0001.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0196.out.0001.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_174016 [0.000100] [0.000100] [2.104840] [4.643150] [2.853830] [2.587700] [3.944560] [0.730847] [1.032260] [0.697581] [4.208670] [7.432460] [7.479840] [2.314520] [0.000100]
	k141_851593 [0.000100] [0.020325] [1.820120] [4.294720] [4.786590] [8.323680] [10.116900] [2.833330] [1.697150] [0.909045] [7.803350] [10.529500] [11.166200] [2.883640] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:20
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0005.out.0003.out.0001.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0005.out.0003.out.0001.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0005.out.0003.out.0001.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_1203201 [0.014857] [0.000100] [0.318359] [0.589671] [0.292890] [2.458790] [1.691020] [4.090020] [3.338520] [0.517156] [0.112133] [1.758930] [1.248850] [0.753626] [0.000100]
	k141_1306508 [0.000100] [0.000100] [0.169031] [1.205080] [0.309693] [0.682033] [1.661350] [3.819150] [4.666080] [0.923168] [0.391844] [1.050830] [2.570920] [0.337470] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:20
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0005.out.0003.out.0002.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0005.out.0003.out.0002.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0005.out.0003.out.0002.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_496980 [0.000100] [0.000100] [0.000100] [0.910345] [0.703448] [4.221840] [3.452870] [9.754020] [5.335630] [0.444828] [0.262069] [0.632184] [3.828740] [1.626440] [0.000100]
	k141_2258439 [0.000100] [0.000100] [0.473967] [3.008590] [0.329576] [2.764900] [2.393990] [4.931290] [5.187330] [0.023618] [0.347826] [1.851850] [4.258190] [0.850242] [0.000100]
	k141_2294521 [0.000100] [0.000100] [0.577220] [1.058400] [0.210907] [1.909750] [1.992280] [5.389960] [3.754340] [0.473938] [0.217664] [1.574810] [2.148170] [0.332046] [0.000100]
Get 3 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37
Iteration 38
Iteration 39
Iteration 40
Iteration 41
Iteration 42
Iteration 43
Iteration 44
Iteration 45
Iteration 46
Iteration 47
Iteration 48
Iteration 49
Iteration 50

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 34 (6.16%)
Elapsed time:  0 days 00:00:22
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0012.out.0001.out.0001.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0012.out.0001.out.0001.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0012.out.0001.out.0001.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_689055 [0.000100] [0.000100] [0.100577] [0.352844] [0.000100] [1.752680] [0.362737] [1.940640] [1.880460] [0.037922] [0.105523] [0.827700] [0.860676] [0.031327] [0.000100]
	k141_2118050 [0.000100] [0.000100] [0.035461] [1.829790] [0.000100] [1.218090] [0.091312] [0.429965] [0.924645] [0.000100] [0.042553] [0.035461] [0.767730] [0.035461] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:25
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0020.out.0001.out.0003.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0020.out.0001.out.0003.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0020.out.0001.out.0003.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_482594 [0.000100] [0.000100] [0.164200] [2.261100] [0.399051] [1.027930] [0.819045] [1.301310] [0.549009] [0.473331] [1.795030] [2.972070] [1.961460] [0.338453] [0.000100]
	k141_1077760 [0.000100] [0.000100] [0.022274] [1.257910] [0.695193] [0.560961] [0.656506] [2.039860] [0.404455] [0.941383] [1.092030] [1.524030] [0.610785] [0.000100] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37
Iteration 38
Iteration 39
Iteration 40
Iteration 41
Iteration 42
Iteration 43
Iteration 44
Iteration 45
Iteration 46
Iteration 47
Iteration 48
Iteration 49
Iteration 50

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:20
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0060.out.0001.out.0002.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0060.out.0001.out.0002.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0060.out.0001.out.0002.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_331166 [0.000100] [0.000100] [16.110000] [26.625900] [21.331100] [34.002300] [48.199500] [26.072600] [11.037400] [5.308390] [34.953500] [51.639500] [58.100900] [11.960300] [0.000100]
	k141_1463445 [0.000100] [0.000100] [12.707700] [40.616300] [21.666300] [45.256500] [60.583100] [24.808000] [9.358290] [2.690510] [40.811000] [64.603600] [62.921800] [21.386900] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:18
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0092.out.0002.out.0002.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0092.out.0002.out.0002.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0092.out.0002.out.0002.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_1087710 [0.000100] [0.000100] [0.095360] [0.568225] [0.036809] [0.591680] [0.361411] [8.442390] [0.785996] [0.102893] [0.398904] [0.720253] [0.060435] [0.007191] [0.006506]
	k141_2076735 [0.000100] [0.000100] [0.371257] [0.445291] [0.288514] [0.064235] [0.702776] [1.428420] [4.735440] [0.731083] [0.203048] [0.371257] [0.372891] [0.249320] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37
Iteration 38
Iteration 39
Iteration 40
Iteration 41
Iteration 42
Iteration 43
Iteration 44
Iteration 45
Iteration 46
Iteration 47
Iteration 48
Iteration 49
Iteration 50

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:23
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0134.out.0002.out.0002.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0134.out.0002.out.0002.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0134.out.0002.out.0002.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_689600 [0.000100] [0.000100] [0.101202] [0.994307] [0.182163] [0.758381] [0.994307] [3.234660] [1.128400] [0.225174] [1.239090] [1.956360] [0.278305] [0.051866] [0.000100]
	k141_2360205 [0.000100] [0.000100] [0.000100] [1.972410] [0.482759] [0.648276] [0.216749] [0.485714] [0.647291] [1.223650] [1.615760] [1.140890] [0.037438] [0.345813] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37
Iteration 38
Iteration 39
Iteration 40
Iteration 41
Iteration 42
Iteration 43
Iteration 44
Iteration 45
Iteration 46
Iteration 47
Iteration 48

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:28
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0135.out.0001.out.0002.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0135.out.0001.out.0002.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0135.out.0001.out.0002.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_422910 [0.000100] [0.001863] [0.297183] [1.398320] [0.955111] [1.798420] [2.335130] [1.420910] [0.817881] [0.200838] [1.239160] [2.098210] [3.657930] [1.831900] [0.000100]
	k141_1710113 [0.000100] [0.000100] [1.269160] [1.066580] [2.096200] [4.964580] [5.350910] [0.203767] [0.113138] [0.131856] [0.962445] [0.777515] [1.248070] [0.599929] [0.004502]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:21
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0190.out.0003.out.0001.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0190.out.0003.out.0001.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0190.out.0003.out.0001.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_479646 [0.000100] [0.000100] [0.691262] [4.418450] [0.285437] [1.160190] [2.906800] [3.022330] [0.938835] [0.206796] [1.677670] [3.383500] [2.461160] [0.366990] [0.000100]
	k141_1096659 [0.022485] [0.000100] [0.028402] [0.175148] [0.000100] [0.194675] [1.168640] [3.224850] [2.005330] [0.088757] [0.173965] [0.143195] [1.461540] [0.292308] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:17
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0190.out.0007.out.0001.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0190.out.0007.out.0001.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0190.out.0007.out.0001.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_43021 [0.000100] [0.000100] [0.034327] [2.826560] [0.000100] [0.257453] [0.046071] [1.621500] [1.511290] [0.000100] [0.000100] [0.952123] [0.039747] [0.058717] [0.000100]
	k141_2431479 [0.000100] [0.000100] [0.413400] [0.651461] [0.084818] [1.346400] [0.801853] [0.754811] [0.933713] [0.000100] [0.362081] [0.285103] [0.851034] [0.372060] [0.027085]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:19
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0196.out.0001.out.0001.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0196.out.0001.out.0001.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0196.out.0001.out.0001.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_174016 [0.000100] [0.000100] [2.104840] [4.643150] [2.853830] [2.587700] [3.944560] [0.730847] [1.032260] [0.697581] [4.208670] [7.432460] [7.479840] [2.314520] [0.000100]
	k141_851593 [0.000100] [0.020325] [1.820120] [4.294720] [4.786590] [8.323680] [10.116900] [2.833330] [1.697150] [0.909045] [7.803350] [10.529500] [11.166200] [2.883640] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:20
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0012.out.0001.out.0001.out.0002.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0012.out.0001.out.0001.out.0002.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0012.out.0001.out.0001.out.0002.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_689055 [0.000100] [0.000100] [0.100577] [0.352844] [0.000100] [1.752680] [0.362737] [1.940640] [1.880460] [0.037922] [0.105523] [0.827700] [0.860676] [0.031327] [0.000100]
	k141_2118050 [0.000100] [0.000100] [0.035461] [1.829790] [0.000100] [1.218090] [0.091312] [0.429965] [0.924645] [0.000100] [0.042553] [0.035461] [0.767730] [0.035461] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:21
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0020.out.0001.out.0003.out.0001.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0020.out.0001.out.0003.out.0001.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0020.out.0001.out.0003.out.0001.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_482594 [0.000100] [0.000100] [0.164200] [2.261100] [0.399051] [1.027930] [0.819045] [1.301310] [0.549009] [0.473331] [1.795030] [2.972070] [1.961460] [0.338453] [0.000100]
	k141_1077760 [0.000100] [0.000100] [0.022274] [1.257910] [0.695193] [0.560961] [0.656506] [2.039860] [0.404455] [0.941383] [1.092030] [1.524030] [0.610785] [0.000100] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:18
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0134.out.0002.out.0002.out.0001.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0134.out.0002.out.0002.out.0001.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0134.out.0002.out.0002.out.0001.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_1298501 [0.000100] [0.000100] [0.740264] [0.454768] [0.252377] [1.119900] [0.795462] [2.392210] [0.145967] [0.399264] [0.905244] [1.394050] [0.319227] [0.253910] [0.000100]
	k141_1977487 [0.000100] [0.000100] [0.013378] [0.711706] [0.026421] [0.742809] [0.466890] [1.652840] [1.024410] [1.255180] [1.263550] [0.598662] [0.081605] [0.113712] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37
Iteration 38
Iteration 39
Iteration 40
Iteration 41

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:22
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0134.out.0002.out.0002.out.0002.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0134.out.0002.out.0002.out.0002.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0134.out.0002.out.0002.out.0002.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_689600 [0.000100] [0.000100] [0.101202] [0.994307] [0.182163] [0.758381] [0.994307] [3.234660] [1.128400] [0.225174] [1.239090] [1.956360] [0.278305] [0.051866] [0.000100]
	k141_2360205 [0.000100] [0.000100] [0.000100] [1.972410] [0.482759] [0.648276] [0.216749] [0.485714] [0.647291] [1.223650] [1.615760] [1.140890] [0.037438] [0.345813] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:23
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0190.out.0007.out.0001.out.0002.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0190.out.0007.out.0001.out.0002.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0190.out.0007.out.0001.out.0002.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_43021 [0.000100] [0.000100] [0.034327] [2.826560] [0.000100] [0.257453] [0.046071] [1.621500] [1.511290] [0.000100] [0.000100] [0.952123] [0.039747] [0.058717] [0.000100]
	k141_2431479 [0.000100] [0.000100] [0.413400] [0.651461] [0.084818] [1.346400] [0.801853] [0.754811] [0.933713] [0.000100] [0.362081] [0.285103] [0.851034] [0.372060] [0.027085]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37
Iteration 38
Iteration 39
Iteration 40
Iteration 41
Iteration 42
Iteration 43
Iteration 44
Iteration 45
Iteration 46
Iteration 47
Iteration 48
Iteration 49
Iteration 50

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:22
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0012.out.0001.out.0001.out.0002.out.0001.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0012.out.0001.out.0001.out.0002.out.0001.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0012.out.0001.out.0001.out.0002.out.0001.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_689055 [0.000100] [0.000100] [0.100577] [0.352844] [0.000100] [1.752680] [0.362737] [1.940640] [1.880460] [0.037922] [0.105523] [0.827700] [0.860676] [0.031327] [0.000100]
	k141_2118050 [0.000100] [0.000100] [0.035461] [1.829790] [0.000100] [1.218090] [0.091312] [0.429965] [0.924645] [0.000100] [0.042553] [0.035461] [0.767730] [0.035461] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37
Iteration 38
Iteration 39
Iteration 40
Iteration 41
Iteration 42
Iteration 43
Iteration 44
Iteration 45
Iteration 46
Iteration 47
Iteration 48
Iteration 49
Iteration 50

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:23
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0020.out.0001.out.0003.out.0001.out.0001.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0020.out.0001.out.0003.out.0001.out.0001.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0020.out.0001.out.0003.out.0001.out.0001.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_137901 [0.000100] [0.000100] [0.521455] [0.770909] [0.055273] [1.153450] [0.653818] [4.015270] [1.359270] [0.072727] [0.492364] [0.255273] [0.091636] [0.027636] [0.000100]
	k141_482594 [0.000100] [0.000100] [0.164200] [2.261100] [0.399051] [1.027930] [0.819045] [1.301310] [0.549009] [0.473331] [1.795030] [2.972070] [1.961460] [0.338453] [0.000100]
	k141_1418728 [0.000100] [0.000100] [0.393972] [0.525296] [0.312164] [0.534984] [0.579117] [1.511300] [0.567277] [1.153930] [1.820240] [2.698600] [0.124865] [0.000100] [0.000100]
Get 3 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:17
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0012.out.0001.out.0001.out.0002.out.0001.out.0002.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0012.out.0001.out.0001.out.0002.out.0001.out.0002.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0012.out.0001.out.0001.out.0002.out.0001.out.0002.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_689055 [0.000100] [0.000100] [0.100577] [0.352844] [0.000100] [1.752680] [0.362737] [1.940640] [1.880460] [0.037922] [0.105523] [0.827700] [0.860676] [0.031327] [0.000100]
	k141_2118050 [0.000100] [0.000100] [0.035461] [1.829790] [0.000100] [1.218090] [0.091312] [0.429965] [0.924645] [0.000100] [0.042553] [0.035461] [0.767730] [0.035461] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37
Iteration 38
Iteration 39
Iteration 40
Iteration 41
Iteration 42
Iteration 43
Iteration 44
Iteration 45
Iteration 46
Iteration 47
Iteration 48
Iteration 49
Iteration 50

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:20
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0020.out.0001.out.0003.out.0001.out.0001.out.0002.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0020.out.0001.out.0003.out.0001.out.0001.out.0002.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0020.out.0001.out.0003.out.0001.out.0001.out.0002.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_482594 [0.000100] [0.000100] [0.164200] [2.261100] [0.399051] [1.027930] [0.819045] [1.301310] [0.549009] [0.473331] [1.795030] [2.972070] [1.961460] [0.338453] [0.000100]
	k141_1077760 [0.000100] [0.000100] [0.022274] [1.257910] [0.695193] [0.560961] [0.656506] [2.039860] [0.404455] [0.941383] [1.092030] [1.524030] [0.610785] [0.000100] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:17
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0012.out.0001.out.0001.out.0002.out.0001.out.0002.out.0002.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0012.out.0001.out.0001.out.0002.out.0001.out.0002.out.0002.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0012.out.0001.out.0001.out.0002.out.0001.out.0002.out.0002.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_689055 [0.000100] [0.000100] [0.100577] [0.352844] [0.000100] [1.752680] [0.362737] [1.940640] [1.880460] [0.037922] [0.105523] [0.827700] [0.860676] [0.031327] [0.000100]
	k141_2118050 [0.000100] [0.000100] [0.035461] [1.829790] [0.000100] [1.218090] [0.091312] [0.429965] [0.924645] [0.000100] [0.042553] [0.035461] [0.767730] [0.035461] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:18
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0020.out.0001.out.0003.out.0001.out.0001.out.0002.out.0001.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0020.out.0001.out.0003.out.0001.out.0001.out.0002.out.0001.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0020.out.0001.out.0003.out.0001.out.0001.out.0002.out.0001.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_482594 [0.000100] [0.000100] [0.164200] [2.261100] [0.399051] [1.027930] [0.819045] [1.301310] [0.549009] [0.473331] [1.795030] [2.972070] [1.961460] [0.338453] [0.000100]
	k141_1077760 [0.000100] [0.000100] [0.022274] [1.257910] [0.695193] [0.560961] [0.656506] [2.039860] [0.404455] [0.941383] [1.092030] [1.524030] [0.610785] [0.000100] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:18
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0012.out.0001.out.0001.out.0002.out.0001.out.0002.out.0002.out.0002.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0012.out.0001.out.0001.out.0002.out.0001.out.0002.out.0002.out.0002.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0012.out.0001.out.0001.out.0002.out.0001.out.0002.out.0002.out.0002.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_689055 [0.000100] [0.000100] [0.100577] [0.352844] [0.000100] [1.752680] [0.362737] [1.940640] [1.880460] [0.037922] [0.105523] [0.827700] [0.860676] [0.031327] [0.000100]
	k141_2118050 [0.000100] [0.000100] [0.035461] [1.829790] [0.000100] [1.218090] [0.091312] [0.429965] [0.924645] [0.000100] [0.042553] [0.035461] [0.767730] [0.035461] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:18
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0012.out.0001.out.0001.out.0002.out.0001.out.0002.out.0002.out.0002.out.0002.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0012.out.0001.out.0001.out.0002.out.0001.out.0002.out.0002.out.0002.out.0002.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0012.out.0001.out.0001.out.0002.out.0001.out.0002.out.0002.out.0002.out.0002.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_689055 [0.000100] [0.000100] [0.100577] [0.352844] [0.000100] [1.752680] [0.362737] [1.940640] [1.880460] [0.037922] [0.105523] [0.827700] [0.860676] [0.031327] [0.000100]
	k141_2118050 [0.000100] [0.000100] [0.035461] [1.829790] [0.000100] [1.218090] [0.091312] [0.429965] [0.924645] [0.000100] [0.042553] [0.035461] [0.767730] [0.035461] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:17
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0012.out.0001.out.0001.out.0002.out.0001.out.0002.out.0002.out.0002.out.0002.out.0002.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0012.out.0001.out.0001.out.0002.out.0001.out.0002.out.0002.out.0002.out.0002.out.0002.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0012.out.0001.out.0001.out.0002.out.0001.out.0002.out.0002.out.0002.out.0002.out.0002.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_689055 [0.000100] [0.000100] [0.100577] [0.352844] [0.000100] [1.752680] [0.362737] [1.940640] [1.880460] [0.037922] [0.105523] [0.827700] [0.860676] [0.031327] [0.000100]
	k141_2118050 [0.000100] [0.000100] [0.035461] [1.829790] [0.000100] [1.218090] [0.091312] [0.429965] [0.924645] [0.000100] [0.042553] [0.035461] [0.767730] [0.035461] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37
Iteration 38
Iteration 39
Iteration 40
Iteration 41
Iteration 42

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:17
Done data collection. Running MaxBin...
Command: /scratch/users/karoraw1@jhu.edu/miniconda2/envs/metawrap2-env/bin/src/MaxBin -fasta ../data/Bins/work_files/maxbin2_out/bin.0012.out.0001.out.0001.out.0002.out.0001.out.0002.out.0002.out.0002.out.0002.out.0002.out.0002.fasta  -abund ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund1 -abund2 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund2 -abund3 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund3 -abund4 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund4 -abund5 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund5 -abund6 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund6 -abund7 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund7 -abund8 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund8 -abund9 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund9 -abund10 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund10 -abund11 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund11 -abund12 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund12 -abund13 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund13 -abund14 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund14 -abund15 ../data/Bins/work_files/maxbin2_out/bin.contig.tmp.abund15 -seed ../data/Bins/work_files/maxbin2_out/bin.0012.out.0001.out.0001.out.0002.out.0001.out.0002.out.0002.out.0002.out.0002.out.0002.out.0002.out.seed -out ../data/Bins/work_files/maxbin2_out/bin.0012.out.0001.out.0001.out.0002.out.0001.out.0002.out.0002.out.0002.out.0002.out.0002.out.0002.out -min_contig_length 1000 -thread 24
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_689055 [0.000100] [0.000100] [0.100577] [0.352844] [0.000100] [1.752680] [0.362737] [1.940640] [1.880460] [0.037922] [0.105523] [0.827700] [0.860676] [0.031327] [0.000100]
	k141_2118050 [0.000100] [0.000100] [0.035461] [1.829790] [0.000100] [1.218090] [0.091312] [0.429965] [0.924645] [0.000100] [0.042553] [0.035461] [0.767730] [0.035461] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:17
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_10975 [0.014593] [0.000100] [1.146700] [2.400920] [2.182800] [2.759980] [5.823730] [3.787630] [1.547240] [0.132104] [2.953530] [5.533030] [7.070280] [0.615207] [0.000100]
	k141_20653 [0.000100] [0.000100] [0.072053] [0.025883] [0.029381] [0.160196] [1.394540] [2.828960] [1.370410] [0.039874] [0.107730] [0.079049] [0.139909] [0.190276] [0.000100]
	k141_23097 [0.015660] [0.003480] [0.395207] [1.382320] [0.395444] [1.783220] [1.099970] [1.573710] [1.900190] [0.361990] [0.947643] [2.311290] [1.464010] [0.609380] [0.046662]
	k141_29456 [0.000100] [0.000100] [0.283486] [0.915344] [0.665553] [2.409910] [1.392650] [8.163460] [4.969370] [1.025620] [0.167363] [2.191870] [2.993600] [1.242550] [0.000100]
	k141_47854 [0.000100] [0.000100] [0.110178] [1.681770] [0.308263] [2.007230] [1.559480] [3.023830] [2.426450] [0.145146] [0.238523] [0.600508] [1.742530] [0.676304] [0.000100]
	k141_52099 [0.000100] [0.000100] [1.072920] [5.073500] [1.676480] [7.083340] [6.921060] [8.656790] [5.220680] [1.154740] [3.726270] [5.727130] [5.931470] [1.659750] [0.000100]
	k141_54667 [0.006759] [0.004781] [4.989490] [12.603200] [8.806300] [14.404300] [21.440300] [9.565900] [3.964520] [2.187480] [17.828000] [24.807100] [23.365700] [5.912460] [0.009891]
	k141_56067 [0.000100] [0.000100] [0.367426] [0.665108] [0.614261] [0.786285] [0.615235] [2.260080] [0.855640] [0.408533] [0.754335] [1.303530] [1.099750] [0.522696] [0.000100]
	k141_68951 [0.005250] [0.005451] [20.275300] [70.497300] [45.154100] [80.774300] [95.062600] [57.046700] [23.202400] [12.106700] [95.347500] [133.472000] [113.758000] [34.280500] [0.079953]
	k141_79886 [0.001589] [0.000100] [1.558840] [2.840930] [2.262870] [2.703920] [3.134510] [0.594708] [0.649134] [0.053075] [3.049940] [4.270340] [4.921780] [1.144840] [0.001589]
	k141_80756 [0.000100] [0.000100] [0.885711] [1.547760] [0.909904] [2.202490] [2.079390] [1.330770] [1.701490] [0.126008] [2.422000] [4.435990] [3.426410] [0.884577] [0.004788]
	k141_116497 [0.025350] [0.000100] [1.112070] [1.651770] [0.692462] [1.173450] [1.208140] [1.991990] [1.106740] [0.585057] [1.553040] [2.807200] [0.637091] [0.332889] [0.000100]
	k141_127245 [0.002406] [0.002406] [5.290770] [1.915380] [6.442240] [1.596970] [3.857780] [9.289680] [16.954900] [0.539573] [0.236899] [0.712201] [5.710640] [2.408500] [0.009583]
	k141_155120 [0.000100] [0.000100] [0.090209] [0.239824] [0.168317] [0.475248] [0.702970] [0.843784] [0.314631] [0.090209] [0.182618] [1.073710] [0.508251] [0.000100] [0.000100]
	k141_155348 [0.000100] [0.000100] [0.024242] [0.265014] [0.279339] [0.585675] [0.485399] [1.133330] [0.288705] [0.027548] [0.309091] [1.445180] [1.018180] [0.064463] [0.000100]
	k141_164375 [0.000100] [0.000100] [0.179730] [19.467000] [0.246270] [9.910490] [3.431450] [57.183000] [13.829700] [5.273740] [9.771730] [34.761100] [5.307600] [0.691452] [0.000100]
	k141_165548 [0.000100] [0.000100] [0.179451] [0.313863] [0.000100] [9.704430] [11.116800] [1.141800] [0.863828] [0.015482] [0.053484] [0.159043] [9.147430] [0.864532] [0.000100]
	k141_166509 [0.000100] [0.000100] [0.326039] [0.441084] [0.255456] [0.880543] [0.541967] [5.239260] [1.380370] [0.386696] [0.450778] [1.095080] [1.104250] [0.372475] [0.000100]
	k141_181521 [49.250200] [37.939900] [0.072657] [0.065960] [0.062599] [0.062376] [0.087790] [0.090269] [0.063000] [0.059130] [0.133446] [0.069233] [0.074164] [0.028695] [151.748000]
	k141_197439 [0.000100] [0.000100] [0.067797] [0.437730] [0.086957] [0.290346] [0.537951] [3.362560] [1.898310] [0.370671] [0.955785] [1.527630] [1.123800] [0.058954] [0.000100]
	k141_199381 [0.073430] [0.000100] [0.000100] [0.514010] [0.000100] [0.460870] [0.668599] [1.025120] [0.545894] [0.081159] [0.071498] [0.057005] [0.759420] [0.781642] [0.036715]
	k141_210052 [0.006988] [0.003476] [1.415470] [0.735976] [1.520660] [0.749530] [2.480050] [1.405480] [1.104530] [0.439981] [5.240710] [2.475020] [6.172780] [0.812297] [0.010499]
	k141_213688 [0.000100] [0.000100] [0.100143] [0.241547] [0.012034] [0.694126] [3.112180] [0.211605] [0.343553] [0.017479] [0.126361] [0.348567] [2.573930] [0.408023] [0.000100]
	k141_220206 [0.000100] [0.000100] [1.350360] [3.556070] [2.119440] [5.251490] [7.253480] [18.173900] [10.382900] [2.015260] [1.951560] [5.613800] [10.912400] [2.328470] [0.000100]
	k141_221572 [0.060365] [0.000100] [0.244639] [1.027010] [0.411438] [0.142176] [0.287530] [2.539320] [0.202542] [0.212867] [0.861795] [0.495631] [0.523431] [0.098491] [0.000100]
	k141_228382 [0.000100] [0.000100] [0.027798] [0.728603] [0.000100] [0.813460] [1.722020] [6.149230] [4.039500] [0.595465] [2.649600] [0.722751] [0.236284] [0.212875] [0.000100]
	k141_231716 [0.000100] [0.000100] [1.226250] [0.107244] [1.971310] [3.024460] [1.963780] [0.759172] [0.017874] [0.000100] [0.054563] [1.690500] [2.391350] [1.300090] [0.000100]
	k141_245935 [0.000100] [0.000100] [0.090074] [0.050245] [0.023284] [3.948530] [0.092524] [0.193627] [1.964460] [0.023284] [0.074755] [4.070470] [0.239583] [0.023284] [0.000100]
	k141_246153 [0.000100] [0.000100] [0.192434] [0.000100] [0.369243] [0.031250] [0.000100] [1.742600] [3.986840] [0.226151] [0.031250] [0.064145] [0.125822] [0.031250] [0.000100]
	k141_246405 [0.000100] [0.000100] [0.731153] [0.746140] [0.474114] [2.984560] [1.099000] [11.026300] [25.097200] [0.034514] [0.900545] [1.694820] [1.864670] [1.109450] [0.000100]
	k141_247498 [0.001820] [0.000100] [0.642703] [0.649025] [0.720916] [0.412711] [0.705733] [3.023280] [1.827770] [0.913645] [1.330910] [2.133100] [2.442740] [0.199866] [0.005460]
	k141_256423 [0.000100] [0.000100] [0.042163] [1.083130] [0.004526] [2.005480] [2.740470] [0.959743] [1.028590] [0.144831] [0.097427] [0.732492] [8.959390] [2.003220] [0.004764]
	k141_257371 [0.008658] [0.000100] [0.096241] [1.198240] [0.298754] [3.413950] [1.971600] [2.449050] [2.761800] [0.197128] [0.841939] [0.912470] [1.274100] [0.835973] [0.006546]
	k141_267213 [0.000100] [0.000100] [1.317830] [1.672200] [0.529347] [0.870432] [3.622370] [4.643410] [4.415280] [3.689920] [1.483940] [0.086379] [1.682170] [0.559247] [0.000100]
	k141_297336 [0.000100] [0.000100] [0.043620] [0.098146] [0.000100] [0.576881] [1.043620] [1.042530] [0.494002] [0.000100] [0.085060] [1.093780] [0.621592] [0.041439] [0.000100]
	k141_302348 [0.000100] [0.000100] [0.382046] [13.172200] [0.521921] [14.800600] [16.267200] [25.334000] [4.471820] [0.085595] [1.050100] [7.171190] [3.444680] [5.616910] [0.000100]
	k141_309759 [0.000100] [0.000100] [0.000100] [0.143981] [0.853659] [1.870970] [1.985840] [0.298190] [0.166798] [0.061369] [0.976397] [0.413847] [0.720692] [0.353265] [0.029898]
	k141_328891 [0.005699] [0.008691] [1.833590] [2.030840] [1.354320] [3.366860] [2.723250] [21.049000] [6.656150] [2.059770] [2.683000] [4.727880] [4.972360] [1.726100] [0.000100]
	k141_332355 [0.000100] [0.000100] [0.039082] [2.868100] [0.316561] [0.590620] [0.039082] [1.386910] [11.284300] [0.155838] [4.639960] [2.247680] [9.319000] [0.713727] [0.000100]
	k141_332432 [0.000100] [0.000100] [0.034941] [0.174703] [0.139762] [0.568833] [1.444440] [0.334032] [0.392732] [0.027953] [0.386443] [1.036340] [4.416490] [0.295597] [0.000100]
	k141_343609 [0.000100] [0.000100] [0.658126] [7.594440] [1.785510] [12.068800] [16.472500] [18.463400] [17.317400] [2.083820] [0.217789] [9.063320] [15.600300] [5.669470] [0.000100]
	k141_349558 [0.005435] [0.000100] [0.116848] [0.534754] [0.216748] [1.174340] [0.900815] [3.615270] [1.666330] [0.328804] [0.442363] [0.968678] [1.365420] [0.562500] [0.008152]
	k141_356283 [0.000100] [0.000100] [0.034101] [0.712702] [0.016198] [0.796249] [1.420290] [0.536232] [0.075021] [0.000100] [0.697357] [3.271950] [0.562660] [0.421995] [0.000100]
	k141_357666 [0.016839] [0.005613] [0.024520] [1.049480] [0.042245] [2.004730] [0.159970] [2.686260] [1.351110] [0.006499] [0.925554] [1.679030] [0.443870] [0.683752] [0.000100]
	k141_364141 [0.000100] [0.010149] [0.166727] [2.288870] [0.155008] [7.140630] [6.770450] [2.784340] [3.847890] [0.056905] [0.276549] [0.499577] [1.215170] [0.317748] [0.015223]
	k141_370339 [30.984700] [15.043200] [0.131391] [0.157971] [0.134597] [0.246780] [0.215268] [0.358607] [0.340741] [0.156985] [0.303064] [0.193566] [0.168932] [0.070231] [75.847600]
	k141_383470 [0.009543] [0.000100] [0.680213] [2.148320] [1.038490] [0.601320] [0.680929] [4.493560] [2.229200] [3.989180] [20.943600] [1.288530] [1.949500] [0.284714] [0.003499]
	k141_391812 [0.005994] [0.000100] [0.170820] [0.635331] [0.088486] [2.653940] [1.709620] [3.991960] [3.216090] [0.439117] [0.851735] [1.134860] [1.726340] [1.320820] [0.005994]
	k141_395073 [0.000100] [0.000100] [0.050526] [0.568421] [0.544211] [0.884211] [0.537895] [0.508421] [0.082105] [0.084210] [0.421053] [0.042105] [0.469474] [0.000100] [0.000100]
	k141_396358 [0.000100] [0.000100] [0.026236] [0.324900] [0.018271] [1.029050] [0.612556] [1.293510] [1.156710] [0.046849] [0.111033] [0.436402] [0.587725] [0.267041] [0.000100]
	k141_403035 [0.050188] [0.000100] [2.460480] [6.124220] [2.502510] [5.522580] [4.956710] [23.608500] [14.143700] [2.093480] [3.546420] [8.673150] [12.274200] [2.351320] [0.000100]
	k141_407301 [0.014319] [0.000100] [0.043700] [0.258379] [0.035957] [0.361848] [0.656555] [21.344700] [4.067510] [0.046723] [0.166737] [0.182435] [0.252387] [0.078861] [0.002440]
	k141_422910 [0.000100] [0.001863] [0.297183] [1.398320] [0.955111] [1.798420] [2.335130] [1.420910] [0.817881] [0.200838] [1.239160] [2.098210] [3.657930] [1.831900] [0.000100]
	k141_453605 [0.000100] [0.019309] [0.794207] [1.552850] [0.560467] [2.428350] [0.514228] [8.800810] [5.866360] [1.303350] [2.313520] [3.423270] [4.731200] [0.812500] [0.038618]
	k141_455960 [0.027536] [0.000100] [0.380435] [0.854348] [0.442754] [1.100000] [0.053623] [0.826812] [2.789860] [0.226087] [1.330430] [2.669570] [0.856522] [0.030435] [0.000100]
	k141_461553 [0.000100] [0.000100] [0.296292] [1.240550] [0.419498] [1.670450] [1.824760] [6.638280] [3.951560] [0.740431] [1.179190] [2.150480] [2.249760] [0.796411] [0.004545]
	k141_461657 [0.003435] [0.000100] [0.574708] [1.196330] [0.880231] [4.791920] [1.867670] [1.666550] [3.365090] [0.076200] [2.385790] [2.114440] [1.680560] [0.618458] [0.000100]
	k141_462117 [0.000100] [0.000100] [0.034111] [0.107720] [0.000100] [0.594255] [4.462300] [0.070018] [0.018851] [0.000100] [0.039497] [0.111311] [2.396770] [0.035907] [0.000100]
	k141_464394 [0.001657] [0.000100] [0.255266] [0.891535] [0.451655] [1.856250] [1.300970] [5.813950] [3.119720] [0.653234] [2.394740] [1.891050] [1.330110] [0.609228] [0.000100]
	k141_475375 [0.000100] [0.000100] [11.199200] [27.900900] [21.452300] [37.807200] [50.003300] [27.753200] [11.431200] [5.433470] [37.991500] [57.000900] [60.029300] [14.360900] [0.003093]
	k141_475567 [0.000100] [0.000100] [0.047371] [0.067013] [0.025419] [0.877527] [0.596187] [2.748120] [2.558640] [0.000100] [0.045061] [0.046216] [0.570191] [0.575390] [0.000100]
	k141_477669 [27.666100] [32.643000] [0.015024] [0.043622] [0.040203] [0.057403] [0.065589] [0.086830] [0.056574] [0.030619] [0.070874] [0.054450] [0.061652] [0.025282] [141.763000]
	k141_485126 [0.000100] [0.000100] [0.012700] [10.340200] [0.185160] [18.468200] [0.666945] [1.758190] [6.259690] [0.046791] [3.999830] [8.787270] [1.042780] [3.445020] [0.000100]
	k141_486704 [0.000100] [0.000100] [0.178655] [0.397356] [0.227449] [0.671462] [0.617030] [4.543160] [1.608280] [0.308126] [0.791602] [0.901439] [0.507387] [0.319790] [0.007387]
	k141_495409 [0.000100] [0.000100] [0.000100] [0.000100] [0.549416] [0.414453] [0.583422] [0.127524] [0.085016] [0.000100] [1.296490] [1.247610] [1.076510] [0.128587] [0.000100]
	k141_521176 [0.002618] [0.001343] [0.176585] [0.866109] [0.173900] [2.645620] [3.348170] [4.256570] [2.180110] [0.229047] [0.219582] [1.372870] [2.603090] [0.876280] [0.002551]
	k141_536390 [0.000100] [0.000100] [0.545455] [5.147660] [0.976033] [6.284020] [7.578510] [1.700830] [4.777690] [0.042975] [0.672727] [7.596140] [9.599720] [3.053720] [0.000100]
	k141_550629 [0.000100] [0.000100] [0.240276] [1.182670] [0.112752] [0.740030] [1.127520] [0.594781] [0.853767] [0.092073] [0.945839] [1.454950] [0.906942] [0.624815] [0.000100]
	k141_563651 [0.000100] [0.000100] [0.894788] [2.306540] [1.895760] [5.281540] [3.445850] [18.709200] [5.999190] [0.789576] [1.294850] [3.697520] [5.611300] [1.971910] [0.000100]
	k141_571746 [0.000100] [0.000100] [0.526432] [0.447137] [0.596916] [0.044053] [0.534141] [3.227970] [0.000100] [0.753304] [0.572687] [0.147577] [0.044053] [0.409692] [0.000100]
	k141_585996 [0.000100] [0.000100] [7.859040] [20.009500] [7.803710] [33.897500] [27.987400] [90.867900] [51.800300] [11.351400] [12.507200] [36.027900] [39.885200] [12.697700] [0.042240]
	k141_596669 [0.000100] [0.000100] [0.137186] [2.817280] [0.077058] [1.771750] [0.531816] [0.467017] [0.370695] [0.099241] [0.102744] [0.872154] [1.316400] [0.053707] [0.000100]
	k141_635736 [0.030819] [0.000100] [1.813460] [10.558800] [5.093270] [6.536090] [13.345500] [3.721010] [1.360910] [1.406330] [11.532000] [16.962700] [16.798900] [3.598540] [0.000100]
	k141_652226 [0.000100] [0.000100] [0.074341] [1.337530] [0.022782] [1.160070] [0.202038] [1.074340] [0.131894] [0.022782] [2.298560] [3.253000] [0.560552] [0.000100] [0.000100]
	k141_668017 [0.000100] [0.000100] [0.302002] [1.055700] [0.000100] [8.454310] [20.390800] [0.716275] [0.107920] [0.000100] [0.135770] [3.042650] [13.714500] [3.791990] [0.033072]
	k141_683017 [0.000100] [0.000100] [54.548600] [3.289160] [61.567900] [2.697190] [33.917300] [1.163860] [1.937350] [17.495600] [110.338000] [6.021690] [39.343000] [1.715660] [0.000100]
	k141_683949 [0.010813] [0.002353] [0.504118] [1.376440] [0.523951] [2.168750] [1.447420] [12.260100] [3.645080] [1.070090] [0.949465] [2.961730] [2.917870] [1.009970] [0.002129]
	k141_705206 [0.000100] [0.000100] [0.445209] [1.978820] [0.765749] [1.236100] [0.857861] [2.698780] [1.738750] [0.454473] [3.001060] [1.672310] [2.099520] [0.583113] [0.000100]
	k141_708985 [0.000100] [0.000100] [2.799210] [0.969170] [2.777080] [0.065613] [0.182609] [27.747800] [21.289300] [17.191300] [5.720950] [2.001580] [0.572332] [0.422134] [0.000100]
	k141_712759 [0.007263] [0.000100] [0.030910] [86.023700] [0.041550] [64.083900] [67.431500] [189.970000] [42.350900] [0.160459] [0.765729] [81.127200] [14.092600] [23.534500] [0.009965]
	k141_716899 [0.000100] [0.000100] [0.000100] [7.675880] [0.000100] [2.277650] [0.213496] [1.387170] [0.042035] [0.000100] [1.686950] [4.502210] [0.618363] [1.609510] [0.000100]
	k141_722627 [0.000100] [0.000100] [0.624141] [0.043180] [0.041217] [2.007850] [0.484789] [3.522080] [1.311090] [0.461237] [0.805692] [0.420020] [0.127576] [0.037291] [0.000100]
	k141_758186 [0.000100] [0.000100] [1.461660] [1.829730] [1.334640] [1.309480] [1.261110] [3.331890] [2.054660] [1.116000] [2.510420] [6.936690] [6.040900] [1.837590] [0.000100]
	k141_763577 [0.000100] [0.000100] [0.000100] [0.041007] [0.000100] [0.037279] [0.035415] [1.697110] [1.217150] [0.281454] [0.382106] [0.856477] [0.037279] [0.731594] [0.000100]
	k141_816635 [0.006225] [0.003946] [0.773877] [2.070300] [0.867328] [2.865170] [4.582010] [0.347607] [0.576212] [0.078338] [0.246160] [5.295230] [7.952460] [1.384160] [0.004719]
	k141_829581 [0.000100] [0.000100] [0.034965] [9.472030] [0.033217] [1.950170] [0.187063] [1.988640] [0.850524] [0.608392] [3.885490] [4.828670] [1.041080] [1.292830] [0.000100]
	k141_856517 [0.000100] [0.037594] [0.077068] [0.556391] [0.227444] [0.000100] [0.456767] [0.123120] [0.505639] [0.040413] [0.630639] [0.274436] [0.721804] [0.000100] [0.000100]
	k141_856872 [0.000100] [0.000100] [6.421760] [29.954500] [12.370300] [31.756300] [42.184800] [25.026800] [8.734720] [3.250370] [29.790600] [55.522400] [54.979900] [19.231000] [0.000100]
	k141_861029 [0.000100] [0.000100] [4.035460] [10.577400] [6.008870] [9.869390] [9.622930] [9.319150] [9.382390] [2.550830] [14.180900] [18.228100] [15.855800] [5.843380] [0.000100]
	k141_862231 [0.005555] [0.006139] [0.078059] [1.536030] [0.097793] [3.117090] [0.154802] [0.154948] [0.051747] [0.043707] [0.242070] [4.611310] [0.070165] [0.034059] [0.024558]
	k141_871690 [0.000100] [0.000100] [0.698043] [0.740475] [0.840281] [0.545645] [0.857911] [0.336919] [0.205140] [0.081877] [1.883010] [2.095020] [1.694310] [0.589123] [0.005678]
	k141_913264 [0.106047] [0.000100] [0.000100] [0.497674] [0.035349] [0.040930] [0.074419] [2.573950] [3.254880] [0.217674] [1.119070] [0.152558] [0.077209] [0.000100] [0.000100]
	k141_924557 [0.000100] [0.000100] [0.000100] [0.303253] [0.722980] [1.548790] [0.501574] [0.086044] [0.873033] [0.000100] [0.041973] [0.000100] [0.079748] [0.394544] [0.000100]
	k141_925746 [0.000100] [0.000100] [0.570425] [2.563400] [0.367789] [4.251540] [0.113031] [0.818741] [0.143777] [0.322694] [0.760176] [9.041580] [0.980088] [0.820498] [0.000100]
	k141_937099 [0.000100] [0.000100] [0.360762] [2.210380] [0.147548] [3.451970] [2.325900] [6.083500] [3.508720] [0.844751] [0.015403] [1.442640] [3.124040] [1.544390] [0.000100]
	k141_1054841 [0.016337] [0.000100] [1.172830] [0.189596] [0.891230] [0.034394] [0.052021] [0.290628] [0.499570] [1.140150] [2.657780] [0.278160] [0.303955] [0.000100] [0.000100]
	k141_1062340 [0.000100] [0.000100] [0.226675] [0.682869] [0.128275] [0.192887] [0.406520] [1.107530] [2.198460] [0.401778] [0.576882] [0.523177] [1.049080] [0.293065] [0.004505]
	k141_1095128 [0.000100] [0.000100] [0.000100] [0.672185] [0.041943] [5.220750] [5.982340] [0.214128] [0.041943] [0.000100] [0.083885] [1.654530] [0.134658] [1.327810] [0.000100]
	k141_1097988 [0.012756] [0.000100] [0.832998] [5.917420] [0.338369] [2.028700] [2.216010] [6.054720] [7.141320] [1.996640] [6.783320] [3.713330] [0.836354] [1.111110] [0.000100]
	k141_1136772 [0.039638] [0.013213] [0.013213] [0.118220] [0.007997] [0.063630] [0.358136] [6.574410] [1.206190] [0.085883] [0.091447] [0.130389] [0.038595] [0.013213] [0.000100]
	k141_1137804 [0.000100] [0.000100] [0.000100] [0.141280] [0.000100] [0.105960] [0.208977] [1.500370] [0.329654] [0.120677] [0.206034] [0.138337] [1.035320] [0.713024] [0.000100]
	k141_1139636 [0.058327] [0.029163] [3.171910] [0.029163] [1.896390] [0.058327] [0.326938] [0.834996] [0.075211] [1.531850] [1.924020] [0.313891] [1.620870] [0.134305] [0.029163]
	k141_1147761 [0.000100] [0.000100] [1.421180] [2.185510] [0.913217] [1.074840] [1.703030] [5.800960] [6.999200] [0.857484] [1.794590] [2.223730] [4.158440] [2.617830] [0.000100]
	k141_1158817 [0.000100] [0.000100] [0.042781] [0.117647] [0.000100] [5.906950] [0.870588] [0.126203] [0.172193] [0.000100] [0.105882] [0.556150] [0.083422] [0.583957] [0.000100]
	k141_1170228 [0.000100] [0.000100] [0.000100] [0.024902] [0.000100] [1.195280] [2.302750] [0.529489] [0.203801] [0.000100] [0.000100] [0.090432] [3.117300] [0.231979] [0.000100]
	k141_1174997 [0.000100] [0.000100] [0.301766] [0.408507] [1.128410] [1.130020] [1.910510] [0.390851] [0.244382] [0.083066] [1.478730] [2.259630] [1.582660] [0.746790] [0.000100]
	k141_1175787 [0.545836] [2.001400] [0.027992] [0.057383] [0.026592] [0.026592] [0.137159] [0.055983] [0.011197] [0.027992] [0.030791] [0.000100] [0.053184] [0.000100] [4.572430]
	k141_1184551 [0.000100] [0.000100] [0.000100] [0.029851] [0.138256] [2.203460] [0.045562] [2.037710] [0.084053] [0.000100] [0.443833] [0.683425] [0.000100] [0.031422] [0.089552]
	k141_1187654 [0.000100] [0.000100] [0.486790] [3.181560] [0.569702] [5.072790] [3.402190] [15.657400] [8.525580] [0.573356] [0.267004] [7.599780] [13.186300] [3.654580] [0.000100]
	k141_1203833 [0.000100] [0.000100] [0.000100] [0.070980] [0.388235] [0.569020] [2.872550] [0.084314] [0.031373] [0.085098] [1.034900] [2.065100] [3.867840] [0.409804] [0.015686]
	k141_1210770 [0.000100] [0.000100] [0.000100] [0.655584] [0.000100] [0.085251] [0.649616] [4.070760] [0.795396] [0.000100] [0.032396] [0.248934] [0.042626] [0.175618] [0.064791]
	k141_1242831 [0.000100] [0.000100] [0.151228] [0.170616] [0.103404] [0.293839] [0.662215] [1.024130] [1.551060] [0.073675] [0.308919] [0.265403] [0.786730] [0.017234] [0.000100]
	k141_1252186 [0.028198] [0.000100] [0.023152] [1.511430] [0.000100] [1.899380] [0.034432] [0.182250] [1.500150] [0.005640] [0.809736] [4.757490] [0.061146] [0.659543] [0.011279]
	k141_1259092 [0.004972] [0.001954] [0.157582] [38.678400] [0.189241] [60.211800] [5.081680] [20.734200] [146.666000] [1.710420] [0.349295] [56.845500] [23.790200] [32.140200] [0.023880]
	k141_1263116 [0.000100] [0.000100] [0.446823] [0.339088] [0.027624] [1.165060] [0.421271] [0.687845] [1.230660] [0.055249] [0.741022] [0.100829] [2.310080] [0.510359] [0.000100]
	k141_1268677 [0.000100] [0.000100] [0.302053] [0.843597] [0.603128] [0.288856] [0.576735] [3.036660] [2.971160] [0.372923] [0.513196] [1.334800] [1.667640] [0.248289] [0.000100]
	k141_1269343 [0.000100] [0.028112] [0.054886] [0.000100] [0.025435] [0.038822] [2.208840] [0.056225] [0.307898] [0.000100] [0.064257] [0.025435] [3.627840] [0.253681] [0.028112]
	k141_1280063 [0.000100] [0.000100] [0.040386] [0.424934] [0.033363] [0.429324] [0.107111] [4.449520] [0.725198] [0.000100] [0.337138] [0.000100] [0.364355] [0.000100] [0.000100]
	k141_1288152 [0.000100] [0.000100] [0.132725] [2.503000] [0.257627] [0.940939] [0.613299] [8.410040] [26.954000] [1.155020] [2.068970] [1.300130] [0.328553] [0.098696] [0.000100]
	k141_1293699 [0.000100] [0.000100] [4.241950] [3.522930] [5.954150] [0.460488] [2.720000] [2.544390] [2.305370] [6.030240] [12.647800] [0.105366] [4.022440] [0.058537] [0.000100]
	k141_1315583 [0.004220] [0.008440] [0.040200] [0.302165] [0.024875] [0.057857] [0.143143] [6.489620] [0.128706] [0.029317] [0.197113] [0.296724] [0.031982] [0.012882] [0.000100]
	k141_1339888 [0.000100] [0.000100] [0.054579] [0.298797] [0.082331] [0.705365] [0.733580] [1.896390] [1.996760] [0.349676] [0.146161] [0.611471] [0.666975] [0.130897] [0.000100]
	k141_1366435 [0.000100] [0.000100] [0.408631] [1.401140] [1.369880] [0.788199] [0.909291] [18.364200] [8.720390] [4.071770] [0.321885] [0.833553] [2.580360] [0.762219] [0.000100]
	k141_1366889 [0.019891] [0.000100] [0.904028] [0.758826] [0.695674] [0.578319] [0.758826] [0.725012] [0.363003] [0.607161] [4.755350] [1.494780] [3.330680] [0.299851] [0.000100]
	k141_1376350 [0.015091] [0.000100] [0.395949] [0.465846] [0.192613] [0.473392] [0.525417] [1.889200] [2.844320] [0.621128] [0.503574] [1.351870] [1.468230] [0.189039] [0.000100]
	k141_1381456 [0.005952] [0.000100] [1.115180] [0.595833] [1.966370] [0.771280] [3.533930] [2.447470] [4.619200] [1.290920] [1.501190] [1.063990] [3.573810] [0.421280] [0.011607]
	k141_1383735 [0.000100] [0.000100] [0.183776] [0.341709] [0.071788] [1.087580] [0.589375] [1.580040] [1.965540] [0.673367] [0.809045] [1.461590] [1.359660] [0.232592] [0.000100]
	k141_1394383 [0.003365] [0.000100] [0.662623] [0.457894] [0.666431] [0.064465] [0.218188] [2.161250] [0.565837] [3.363410] [11.450400] [0.380767] [1.180200] [0.263438] [0.000100]
	k141_1423054 [83.866100] [33.923200] [0.103815] [0.058935] [0.071040] [0.053749] [0.088467] [0.083621] [0.066829] [0.102197] [0.149576] [0.064496] [0.072412] [0.025733] [147.596000]
	k141_1474200 [0.011106] [0.000100] [0.070521] [2.606510] [0.035747] [1.847300] [1.074270] [0.439994] [12.150100] [0.063233] [0.097522] [0.797182] [0.057403] [0.047616] [0.005969]
	k141_1497075 [0.000100] [0.000100] [0.142822] [0.139160] [0.161621] [0.126465] [0.561035] [3.415280] [0.545410] [0.300293] [0.506104] [0.334473] [1.355220] [0.200439] [0.000100]
	k141_1500019 [0.000100] [0.000100] [0.392917] [0.193929] [0.177909] [0.032040] [0.128162] [0.097808] [0.129005] [0.261383] [6.566610] [0.163575] [0.080101] [0.065767] [0.000100]
	k141_1502763 [0.006770] [0.006432] [0.027420] [1.774880] [0.733751] [1.014900] [0.996107] [0.283345] [0.318382] [0.062288] [1.265230] [2.300270] [2.135580] [0.647935] [0.019973]
	k141_1530498 [0.000100] [0.000100] [0.026761] [2.648590] [0.035211] [1.999300] [0.141549] [1.895070] [0.111268] [0.183803] [1.035210] [1.811970] [0.097887] [0.914789] [0.000100]
	k141_1533940 [0.005799] [0.000100] [1.383950] [0.736304] [1.930260] [4.433540] [4.851520] [0.167099] [0.065314] [0.065314] [1.146500] [0.847856] [1.558520] [0.342591] [0.000100]
	k141_1554957 [0.000100] [0.000100] [0.243679] [0.022593] [0.461538] [0.041958] [0.452932] [0.083378] [0.206563] [0.366326] [0.987090] [1.261970] [2.984940] [0.311458] [0.000100]
	k141_1565650 [0.000100] [0.000100] [0.000100] [0.000100] [0.065925] [0.420175] [0.069102] [0.975377] [0.804607] [0.230342] [1.015090] [0.239079] [1.118350] [0.000100] [0.000100]
	k141_1624723 [0.000100] [0.000100] [0.000100] [0.253722] [0.000100] [0.625243] [0.460841] [3.669260] [2.216830] [0.027185] [0.103560] [0.867314] [0.075081] [0.994175] [0.000100]
	k141_1670351 [0.000100] [0.000100] [0.000100] [0.000100] [0.279642] [0.261745] [0.079046] [0.123788] [0.058166] [0.058166] [2.224460] [0.519761] [0.387025] [0.353468] [0.000100]
	k141_1727385 [0.000100] [0.000100] [0.022988] [1.935630] [0.020690] [0.048276] [0.466667] [3.328740] [0.916092] [0.000100] [0.050575] [0.235632] [0.462069] [0.000100] [0.000100]
	k141_1740427 [0.015460] [0.000100] [0.458503] [1.102120] [1.226200] [1.398700] [1.719280] [2.969080] [2.135880] [0.133849] [0.714402] [0.745728] [0.436534] [0.252238] [0.015460]
	k141_1740772 [0.000100] [0.000100] [0.034823] [0.385955] [0.150900] [0.686013] [0.234185] [1.362740] [1.445150] [0.034243] [0.986941] [0.410041] [0.780905] [1.237090] [0.011608]
	k141_1778834 [0.000100] [0.000100] [0.000100] [0.213080] [0.259494] [0.082279] [0.129747] [0.390295] [1.241560] [0.874473] [0.126582] [0.126582] [0.040084] [0.042194] [0.000100]
	k141_1782021 [0.000100] [0.000100] [0.053877] [0.692510] [0.340999] [0.551248] [0.085414] [7.106440] [2.022340] [0.078844] [0.339028] [0.670828] [0.571616] [0.852825] [0.000100]
	k141_1792593 [0.000100] [0.000100] [0.426516] [0.695444] [0.307640] [0.950325] [1.236380] [4.415210] [0.785886] [0.078109] [0.170606] [0.416924] [0.610140] [0.186708] [0.000100]
	k141_1807435 [0.001674] [0.004764] [2.157970] [2.554820] [2.682810] [1.661780] [3.779960] [6.328800] [6.271330] [2.402770] [6.297010] [4.642940] [7.552070] [1.368970] [0.006867]
	k141_1807686 [0.000100] [0.000100] [0.013625] [0.066244] [0.047451] [0.056848] [0.085506] [0.111111] [0.087386] [0.039464] [5.472870] [0.042753] [0.042753] [0.000100] [0.018793]
	k141_1815739 [0.018331] [0.000100] [0.329474] [0.775687] [0.376749] [0.957549] [2.738540] [1.610710] [1.342980] [0.057887] [0.142788] [0.325615] [2.409070] [0.607815] [0.000100]
	k141_1857025 [0.000100] [0.000100] [0.112518] [0.116737] [0.000100] [2.182140] [0.611111] [0.356540] [0.760197] [0.047820] [0.139241] [0.059072] [0.594233] [0.056259] [0.000100]
	k141_1865601 [0.000100] [0.000100] [0.078751] [0.884461] [0.014945] [0.798812] [2.278020] [2.606630] [1.148500] [0.082775] [0.377084] [1.258100] [0.650508] [0.324583] [0.007664]
	k141_1872759 [0.000100] [0.000100] [0.030418] [0.594677] [0.028897] [7.209130] [0.561217] [1.374900] [0.488973] [0.028897] [0.062357] [2.952850] [0.094297] [0.048669] [0.000100]
	k141_1877104 [0.000100] [0.000100] [0.821053] [1.678540] [0.607287] [1.078950] [1.062750] [3.501210] [0.614170] [0.839676] [1.128740] [1.595140] [1.702430] [0.033198] [0.000100]
	k141_1885682 [0.000100] [0.000100] [0.488290] [1.657380] [0.325995] [1.059950] [1.229740] [3.274240] [2.309130] [0.804918] [0.406089] [0.916862] [1.522720] [0.300468] [0.000100]
	k141_1901529 [0.000100] [0.000100] [0.195675] [0.562307] [0.426365] [0.524202] [0.871267] [0.609681] [1.627190] [0.039135] [0.772400] [0.041195] [0.238929] [0.000100] [0.000100]
	k141_1908857 [0.000100] [0.000100] [0.737313] [0.223881] [0.605970] [0.028358] [1.197010] [1.338810] [0.113433] [1.162690] [1.165670] [1.379850] [1.338060] [0.116418] [0.000100]
	k141_1910465 [0.000100] [0.000100] [0.576735] [0.000100] [1.128050] [0.564027] [1.122190] [1.963830] [0.532747] [0.512219] [0.478983] [0.863148] [1.000980] [0.044966] [0.000100]
	k141_1919859 [0.000100] [0.000100] [0.081657] [0.262645] [0.056063] [0.091408] [0.887873] [2.891530] [1.065810] [0.341865] [0.078001] [0.722121] [1.023770] [0.000100] [0.000100]
	k141_1923220 [0.000100] [0.000100] [0.203864] [0.845032] [0.398659] [0.878943] [0.787461] [0.212145] [0.030757] [0.171924] [0.168770] [2.008280] [1.585170] [0.276814] [0.000100]
	k141_1955981 [0.000100] [0.000100] [0.262641] [0.498282] [0.542955] [3.591070] [0.846834] [0.351497] [0.058910] [0.039273] [0.256259] [0.889543] [0.502700] [0.061856] [0.000100]
	k141_1958172 [0.000100] [0.000100] [0.050721] [0.000100] [0.000100] [0.895677] [0.183285] [3.235160] [1.076660] [0.330259] [0.311239] [0.281268] [1.029390] [0.027089] [0.000100]
	k141_1959914 [0.000100] [0.000100] [0.669776] [0.942164] [0.140858] [0.867537] [0.767724] [4.642720] [2.237870] [0.807836] [1.217350] [3.425370] [2.228540] [1.414180] [0.000100]
	k141_1974740 [0.000100] [0.000100] [1.742920] [3.044920] [0.910850] [0.804423] [6.820320] [1.521770] [1.517620] [0.342778] [0.911541] [0.677263] [5.148580] [0.878369] [0.000100]
	k141_1988852 [0.000100] [0.000100] [0.072333] [0.424955] [0.000100] [0.820072] [0.427667] [1.996380] [0.891501] [0.034358] [0.421338] [0.764014] [1.623870] [0.437613] [0.000100]
	k141_2028820 [0.000100] [0.000100] [0.041439] [0.066521] [0.000100] [0.777535] [0.266085] [1.515810] [2.062160] [0.357688] [0.619956] [0.869684] [1.230100] [0.774809] [0.000100]
	k141_2060968 [0.029240] [0.000100] [0.346491] [4.427630] [0.000100] [1.100880] [0.418129] [2.078950] [0.923977] [0.130117] [0.456140] [1.904970] [0.837719] [0.681287] [0.000100]
	k141_2093600 [0.000100] [0.000100] [0.044944] [0.333833] [0.127591] [1.309360] [0.543321] [1.434710] [1.296880] [0.018976] [0.117104] [0.781773] [1.378030] [0.381773] [0.000100]
	k141_2124842 [0.000100] [0.000100] [0.090422] [0.322605] [0.707280] [0.000100] [0.523372] [0.856705] [0.869732] [0.269732] [0.586207] [0.485824] [0.616092] [0.029119] [0.000100]
	k141_2126727 [0.000100] [0.000100] [0.000100] [0.451630] [0.510515] [0.151420] [1.697160] [0.041009] [0.381703] [0.039958] [0.124080] [0.912198] [1.272870] [0.279706] [0.000100]
	k141_2142153 [0.000100] [0.000100] [0.076476] [0.541424] [0.021059] [3.579110] [0.054309] [0.608479] [3.455800] [0.223608] [5.302580] [1.673590] [0.044888] [0.661402] [0.128013]
	k141_2238111 [106.870000] [33.995400] [0.034890] [0.042198] [0.030771] [0.075047] [0.063297] [0.054628] [0.051762] [0.023177] [0.065733] [0.069423] [0.033565] [0.035213] [117.364000]
	k141_2241469 [0.036786] [0.000100] [0.040658] [4.160700] [0.757018] [6.767670] [5.253630] [5.970960] [24.761900] [0.000100] [1.944820] [4.488870] [9.134560] [3.672800] [0.073572]
	k141_2254457 [0.000100] [0.000100] [0.179355] [0.524988] [0.820645] [1.007940] [1.232130] [0.934143] [0.254554] [0.180290] [0.985521] [1.283050] [1.443720] [0.592247] [0.017749]
	k141_2264145 [0.000100] [0.000100] [2.433680] [9.226530] [6.797700] [10.035700] [15.676600] [5.707450] [1.337980] [0.873410] [9.533620] [14.330100] [13.050300] [8.240460] [0.024228]
	k141_2304359 [0.000100] [0.000100] [0.030722] [0.064516] [0.362519] [0.006144] [0.029186] [3.394010] [1.068360] [0.505376] [0.029186] [0.568356] [0.243472] [0.191244] [0.000100]
	k141_2304698 [0.000100] [0.000100] [0.000100] [0.370576] [0.052047] [2.512840] [0.111034] [0.208189] [0.157529] [0.029146] [0.000100] [3.708540] [0.018737] [0.013879] [0.000100]
	k141_2319063 [0.000100] [0.000100] [0.108601] [0.395773] [0.030612] [1.349130] [0.308309] [1.101310] [0.543732] [0.027697] [0.029154] [0.720117] [0.365160] [0.027697] [0.000100]
	k141_2356465 [0.000100] [0.000100] [0.000100] [1.782610] [0.000100] [0.106933] [0.047003] [2.933020] [0.870740] [0.000100] [0.044653] [0.049354] [0.000100] [0.000100] [0.000100]
	k141_2372008 [0.000100] [0.000100] [0.033670] [0.434343] [0.521465] [0.758417] [1.170030] [1.029880] [0.049663] [0.051347] [0.873737] [1.800510] [1.007580] [0.259680] [0.000100]
	k141_2393388 [0.000100] [0.000100] [0.089057] [0.066415] [0.411321] [0.596226] [0.950943] [12.003800] [1.007550] [0.000100] [0.473208] [0.031698] [0.058868] [0.000100] [0.028679]
	k141_2397433 [0.000100] [0.000100] [0.040230] [0.082376] [0.000100] [0.049808] [0.838123] [3.040230] [0.045977] [0.036399] [0.665709] [0.835249] [0.120690] [0.000100] [0.000100]
	k141_2410073 [99.742000] [26.206400] [0.180506] [0.042951] [0.128580] [0.061997] [0.069251] [0.127583] [0.080892] [0.299988] [0.244098] [0.072816] [0.090390] [0.016203] [99.675400]
	k141_2421773 [0.000100] [0.000100] [0.022552] [0.561424] [0.000100] [0.000100] [0.233828] [0.466469] [0.000100] [0.123442] [0.975074] [2.435610] [0.885460] [0.022552] [0.000100]
	k141_2425439 [0.000100] [0.000100] [0.519162] [2.591210] [0.659683] [1.117530] [1.765460] [4.203880] [0.130812] [0.250894] [2.414920] [3.814510] [0.835462] [0.262647] [0.000100]
	k141_2427671 [0.433225] [1.570030] [0.000100] [0.063518] [0.000100] [0.048046] [0.030945] [0.161238] [0.000100] [0.000100] [0.066775] [0.166124] [0.016287] [0.000100] [6.817590]
	k141_2433356 [0.000100] [0.000100] [0.022606] [0.327781] [0.046401] [0.059488] [0.509221] [4.897090] [3.139800] [0.000100] [0.098156] [0.011898] [0.384890] [0.177275] [0.000100]
	k141_2440330 [0.000100] [0.000100] [0.394068] [3.630300] [0.000100] [0.495763] [0.490466] [0.703390] [0.781780] [1.595340] [1.308260] [0.146186] [1.229870] [0.000100] [0.000100]
	k141_2442118 [0.000100] [0.000100] [0.000100] [0.465343] [0.155548] [1.141560] [0.499512] [2.260660] [2.428570] [0.198503] [0.080052] [0.846730] [1.465670] [0.455255] [0.000100]
	k141_2457732 [189.223000] [50.523900] [0.029051] [0.058709] [0.023465] [0.044335] [0.076397] [0.056550] [0.043066] [0.048956] [0.068007] [0.049353] [0.050376] [0.015075] [170.941000]
	k141_2466488 [0.000100] [0.023914] [0.488987] [0.327250] [0.170548] [0.054122] [0.787288] [1.275650] [2.039020] [0.587162] [1.597860] [1.154810] [1.988040] [0.404028] [0.023914]
	k141_2469645 [0.000100] [0.028309] [0.031139] [0.309271] [0.056617] [0.157113] [0.699929] [2.421800] [3.047420] [0.000100] [0.475584] [0.404105] [1.232840] [0.588818] [0.000100]
	k141_2484031 [0.000100] [0.000100] [0.080913] [0.099585] [0.520747] [0.928423] [0.551867] [1.017630] [0.168050] [0.082988] [0.285270] [0.621369] [1.614110] [0.252075] [0.000100]
	k141_2485487 [0.000100] [0.000100] [0.107656] [0.870016] [0.207735] [0.688198] [0.275518] [1.852070] [1.523130] [0.365231] [0.032695] [0.174641] [0.756778] [0.112839] [0.000100]
	k141_2487693 [0.000100] [0.000100] [0.048570] [0.000100] [0.352135] [0.929495] [0.200157] [1.681550] [0.647474] [0.512730] [0.435174] [0.846455] [0.761065] [0.138269] [0.000100]
	k141_2515662 [0.000100] [0.000100] [5.179650] [0.130156] [12.090700] [0.057745] [0.076994] [0.294225] [0.328139] [0.142988] [0.758937] [0.230981] [0.144821] [0.000100] [0.036664]
	k141_2515916 [0.000100] [0.000100] [0.490188] [0.750901] [0.046055] [0.150981] [0.674810] [2.964360] [3.646380] [0.963556] [0.677213] [0.736083] [0.374449] [0.052062] [0.000100]
	k141_2568761 [0.000100] [0.000100] [2.785640] [5.499470] [4.128830] [6.753960] [8.890180] [3.333690] [2.201690] [0.046462] [6.070750] [12.834200] [9.108760] [2.501580] [0.000100]
Get 196 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37
Iteration 38
Iteration 39
Iteration 40
Iteration 41
Iteration 42
Iteration 43
Iteration 44
Iteration 45
Iteration 46
Iteration 47
Iteration 48
Iteration 49
Iteration 50

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 28892 (6.10%)
Elapsed time:  0 days 08:16:50

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_167693 [0.000100] [0.000100] [0.676768] [0.640721] [0.493959] [2.613390] [2.171520] [3.888100] [2.107350] [0.442464] [0.864132] [1.218260] [1.048130] [0.493167] [0.040800]
	k141_1530373 [0.016227] [0.000100] [0.411359] [0.667748] [0.237323] [0.688032] [0.305477] [0.749290] [1.098990] [0.412576] [0.223935] [0.426369] [1.074240] [0.270588] [0.000100]
	k141_2302460 [0.005338] [0.000100] [0.455925] [1.510010] [0.671455] [1.846420] [1.414730] [2.325950] [1.756970] [0.462036] [1.322960] [2.046850] [1.647820] [0.763749] [0.002810]
Get 3 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 17 (0.73%)
Elapsed time:  0 days 00:00:25

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_815118 [0.000100] [0.000100] [0.565708] [2.873960] [1.033590] [1.700890] [4.887660] [0.010750] [0.988981] [0.043537] [0.379199] [5.272510] [7.245630] [1.695510] [0.010212]
	k141_1263617 [0.000100] [0.000100] [1.081130] [2.292710] [0.669106] [2.526570] [2.910280] [10.010800] [5.556790] [0.953866] [0.039453] [2.545980] [3.950680] [1.261220] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:19

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_138078 [0.000100] [0.000100] [0.071718] [0.975708] [0.187392] [1.260840] [1.222090] [2.496820] [2.762290] [0.166570] [1.026030] [1.122040] [0.644303] [0.844997] [0.000100]
	k141_1203201 [0.014857] [0.000100] [0.318359] [0.589671] [0.292890] [2.458790] [1.691020] [4.090020] [3.338520] [0.517156] [0.112133] [1.758930] [1.248850] [0.753626] [0.000100]
	k141_1306508 [0.000100] [0.000100] [0.169031] [1.205080] [0.309693] [0.682033] [1.661350] [3.819150] [4.666080] [0.923168] [0.391844] [1.050830] [2.570920] [0.337470] [0.000100]
Get 3 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:34

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_1519530 [0.000100] [0.000100] [5.632970] [15.883500] [6.129670] [12.446800] [14.200600] [17.709900] [11.487600] [3.294820] [18.180800] [28.693900] [26.308900] [7.655570] [0.000100]
	k141_1703206 [0.000100] [0.000100] [4.536500] [14.077300] [12.779600] [14.849800] [26.091400] [10.574800] [4.799430] [2.016300] [18.620800] [27.671900] [24.185700] [5.925580] [0.028349]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:22

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_1464784 [0.000100] [0.000100] [0.713510] [1.153940] [1.417380] [1.501830] [2.530090] [0.329491] [0.380029] [0.113488] [2.328270] [1.782330] [1.958880] [0.647567] [0.000100]
	k141_1784393 [0.000100] [0.000100] [1.891620] [3.322950] [2.554280] [2.698510] [3.654700] [0.559810] [0.636207] [0.062723] [3.491680] [4.975510] [4.515580] [1.264800] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:23

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_553270 [0.035858] [0.000100] [0.000100] [0.398028] [0.213357] [0.179740] [3.897360] [0.905872] [1.117880] [0.012550] [0.268041] [0.125504] [1.460330] [0.210220] [0.000100]
	k141_1535220 [0.000100] [0.000100] [0.048035] [2.065500] [0.900655] [0.233624] [1.151750] [2.482530] [0.213974] [0.542576] [0.027293] [0.237991] [0.236900] [0.044760] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37
Iteration 38
Iteration 39
Iteration 40
Iteration 41
Iteration 42
Iteration 43
Iteration 44
Iteration 45
Iteration 46
Iteration 47
Iteration 48
Iteration 49
Iteration 50

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:01:15

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_689055 [0.000100] [0.000100] [0.100577] [0.352844] [0.000100] [1.752680] [0.362737] [1.940640] [1.880460] [0.037922] [0.105523] [0.827700] [0.860676] [0.031327] [0.000100]
	k141_2118050 [0.000100] [0.000100] [0.035461] [1.829790] [0.000100] [1.218090] [0.091312] [0.429965] [0.924645] [0.000100] [0.042553] [0.035461] [0.767730] [0.035461] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37
Iteration 38
Iteration 39
Iteration 40
Iteration 41
Iteration 42
Iteration 43
Iteration 44
Iteration 45
Iteration 46
Iteration 47
Iteration 48
Iteration 49
Iteration 50

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:01:02

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_762711 [0.000100] [0.000100] [0.124038] [0.680354] [0.067294] [0.314229] [0.368691] [1.313370] [0.503564] [0.047619] [0.744226] [1.414310] [2.444250] [0.561449] [0.000100]
	k141_1086125 [0.000100] [0.000100] [0.084658] [0.384422] [0.018568] [0.119591] [0.326515] [1.058850] [0.688434] [0.011959] [1.234620] [1.038240] [1.281670] [0.321794] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:26

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_928025 [0.000100] [0.000100] [0.023762] [0.348515] [0.000100] [1.155780] [2.563700] [3.763700] [0.248845] [0.196700] [0.025083] [1.116170] [0.207921] [0.050165] [0.000100]
	k141_2321355 [0.000100] [0.000100] [0.334802] [2.288550] [0.408590] [0.099119] [0.887665] [3.361230] [0.366740] [0.711454] [1.447140] [1.442730] [0.138767] [0.000100] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37
Iteration 38
Iteration 39
Iteration 40
Iteration 41
Iteration 42
Iteration 43
Iteration 44
Iteration 45
Iteration 46
Iteration 47
Iteration 48
Iteration 49
Iteration 50

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:55

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_45331 [0.000100] [0.000100] [0.031470] [2.269150] [0.000100] [10.481600] [20.960200] [0.390890] [0.436439] [0.016563] [0.298137] [4.587990] [14.590100] [3.001660] [0.000100]
	k141_273475 [0.000100] [0.000100] [0.008254] [0.152259] [0.144005] [10.091400] [14.541500] [0.515639] [0.780408] [0.099044] [0.016942] [0.180278] [11.272200] [1.279970] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:20

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_653570 [0.000100] [0.000100] [0.423700] [0.687980] [0.375107] [0.587383] [0.478261] [2.000000] [1.699060] [0.274510] [1.339300] [0.220801] [1.467180] [0.415175] [0.000100]
	k141_1835855 [0.000100] [0.000100] [0.000100] [0.165627] [0.032571] [0.080388] [0.530146] [1.570340] [0.774082] [0.209286] [0.675676] [0.732502] [0.596674] [0.000100] [0.000100]
	k141_1889281 [0.000100] [0.000100] [0.000100] [0.469869] [0.799127] [0.103057] [0.139738] [2.547600] [0.862882] [0.121397] [1.052400] [0.863755] [0.910917] [0.448035] [0.000100]
Get 3 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37
Iteration 38
Iteration 39
Iteration 40
Iteration 41
Iteration 42
Iteration 43
Iteration 44
Iteration 45
Iteration 46
Iteration 47
Iteration 48
Iteration 49
Iteration 50

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 528 (11.39%)
Elapsed time:  0 days 00:00:56

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_816963 [0.000100] [0.000100] [0.019618] [0.085699] [0.019618] [0.110480] [0.060919] [1.903460] [6.364480] [0.209086] [0.154362] [0.060919] [3.203410] [0.000100] [0.000100]
	k141_1587826 [0.178404] [0.044601] [1.396710] [0.549296] [1.062210] [0.119718] [1.809860] [2.619720] [5.515260] [2.374410] [3.237090] [0.830986] [0.268779] [0.086855] [0.044601]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:27

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_448276 [0.000100] [0.000100] [0.022119] [1.066360] [0.256694] [0.324796] [0.316647] [3.294530] [1.825380] [0.022119] [0.389988] [0.332363] [0.208964] [0.077416] [0.000100]
	k141_716861 [0.000100] [0.000100] [0.447709] [1.251970] [0.678158] [0.281583] [0.529847] [3.578780] [1.680700] [1.488660] [1.287950] [2.025800] [2.517580] [0.052406] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:33

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_361009 [0.000100] [0.011422] [1.138970] [3.592870] [2.780800] [6.191460] [5.313570] [4.950780] [1.296710] [0.852325] [3.143320] [7.037530] [4.832740] [1.954310] [0.011422]
	k141_450328 [0.000100] [0.000100] [0.039755] [0.652905] [0.328746] [0.874618] [0.609327] [1.695720] [1.067280] [0.379205] [2.173550] [2.142200] [0.976300] [0.073395] [0.000100]
	k141_480650 [0.000100] [0.000100] [0.594359] [2.324380] [1.376760] [2.164540] [2.371390] [0.536602] [0.468099] [0.150437] [2.021490] [3.131630] [1.477500] [1.195430] [0.000100]
	k141_1140789 [0.000100] [0.000100] [0.529893] [2.693520] [1.023910] [4.463180] [5.554440] [4.603520] [0.840151] [1.208310] [2.419130] [5.361230] [3.857770] [0.915670] [0.000100]
	k141_1174863 [0.013852] [0.009388] [0.400801] [1.263080] [0.815684] [1.885860] [1.477050] [0.985690] [0.445106] [0.587292] [1.737150] [4.151800] [3.001140] [0.901546] [0.018546]
Get 5 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37
Iteration 38
Iteration 39
Iteration 40
Iteration 41
Iteration 42
Iteration 43
Iteration 44
Iteration 45
Iteration 46
Iteration 47
Iteration 48
Iteration 49
Iteration 50

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 17 (0.78%)
Elapsed time:  0 days 00:00:36

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_566524 [0.000100] [0.000100] [1.215440] [2.108850] [1.614990] [1.680560] [2.062340] [23.942500] [12.955100] [4.192830] [1.138570] [0.590116] [2.704460] [1.305560] [0.000100]
	k141_730107 [0.000100] [0.000100] [0.955620] [4.813310] [1.415820] [5.949830] [8.418230] [17.515700] [13.487200] [0.697057] [1.122050] [6.078630] [9.352630] [4.527740] [0.000100]
	k141_1325627 [0.000100] [0.042389] [1.797690] [3.396920] [2.453760] [8.481700] [7.526010] [15.578000] [13.198500] [0.973988] [2.958570] [6.996150] [8.463390] [3.899810] [0.000100]
Get 3 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 5 (0.30%)
Elapsed time:  0 days 00:00:22

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_306277 [0.000100] [0.011154] [0.022309] [1.038760] [0.021194] [9.154210] [0.212214] [0.875070] [0.760736] [0.044060] [0.107641] [2.327110] [0.077803] [0.046291] [0.000100]
	k141_536716 [0.000100] [0.000100] [0.045270] [0.456761] [0.022635] [4.654090] [3.405110] [0.048752] [0.023215] [0.000100] [0.116077] [1.049910] [0.023215] [2.496810] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:24

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_1223436 [0.000100] [0.000100] [2.852360] [1.331520] [6.021740] [0.220109] [1.625910] [1.522640] [4.634960] [8.660330] [16.468300] [0.573370] [3.894020] [0.441123] [0.000100]
	k141_2491377 [0.000100] [0.000100] [1.139810] [3.848540] [0.407767] [0.073786] [0.930097] [2.143690] [4.415530] [6.317480] [19.001900] [1.881550] [2.118450] [0.000100] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:25

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_1284935 [0.000100] [0.000100] [0.049875] [2.550500] [0.000100] [5.378430] [0.224439] [0.082294] [0.000100] [0.000100] [0.232544] [6.130920] [0.117830] [0.023691] [0.000100]
	k141_2488885 [0.012630] [0.006153] [0.044041] [6.149130] [0.113342] [1.425360] [0.404955] [1.547280] [0.195920] [0.037241] [1.151390] [4.873700] [0.226522] [0.894916] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:28

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_331166 [0.000100] [0.000100] [16.110000] [26.625900] [21.331100] [34.002300] [48.199500] [26.072600] [11.037400] [5.308390] [34.953500] [51.639500] [58.100900] [11.960300] [0.000100]
	k141_1463445 [0.000100] [0.000100] [12.707700] [40.616300] [21.666300] [45.256500] [60.583100] [24.808000] [9.358290] [2.690510] [40.811000] [64.603600] [62.921800] [21.386900] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:20

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_351816 [0.006536] [0.001280] [0.047709] [0.829313] [0.078437] [2.523110] [3.288610] [4.238140] [1.940870] [0.081503] [0.133053] [1.379110] [2.790500] [0.687129] [0.006402]
	k141_2071591 [0.000100] [0.000100] [3.205610] [2.312560] [3.171340] [1.835930] [1.253370] [5.899270] [6.025960] [1.142260] [4.826580] [8.591900] [3.492210] [1.627210] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:24

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_256976 [0.000100] [0.000100] [0.369335] [0.809668] [0.378399] [0.649547] [0.890483] [3.472050] [2.140480] [0.434290] [0.706193] [2.657860] [0.462236] [0.000100] [0.000100]
	k141_562430 [0.000100] [0.000100] [0.025150] [0.362874] [0.131737] [0.369461] [0.623353] [1.124550] [1.479640] [0.115569] [0.325749] [0.716168] [1.185630] [0.244311] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:31

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_200804 [0.000100] [0.000100] [0.675117] [2.350230] [0.628315] [2.419460] [1.732640] [1.772820] [1.119150] [0.630070] [2.226210] [4.667710] [3.108420] [1.229910] [0.000100]
	k141_656782 [0.000100] [0.041215] [1.329720] [2.362260] [0.490239] [1.587850] [0.850325] [1.696310] [1.440350] [1.016270] [3.159440] [2.050980] [3.711500] [0.515184] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37
Iteration 38
Iteration 39
Iteration 40
Iteration 41
Iteration 42
Iteration 43
Iteration 44

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:34

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_787818 [0.000100] [0.000100] [0.000100] [0.061085] [0.039495] [0.218009] [0.127962] [0.342285] [3.522380] [0.021064] [2.544500] [0.312796] [0.094787] [0.246972] [0.000100]
	k141_2497959 [0.000100] [0.000100] [0.020127] [0.743114] [0.116525] [1.148830] [0.404661] [0.062500] [0.700742] [0.030720] [0.041314] [1.770130] [0.162076] [0.563030] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:30

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_252854 [0.000100] [0.000100] [0.295317] [0.820619] [0.388595] [0.345544] [0.255287] [0.336858] [0.218656] [0.129909] [0.632931] [1.902190] [1.577040] [0.199773] [0.000100]
	k141_2416317 [0.000100] [0.000100] [0.344725] [0.077266] [0.267831] [0.030461] [0.827266] [0.058692] [0.202080] [0.057950] [0.911961] [1.186850] [2.197990] [0.169391] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37
Iteration 38
Iteration 39
Iteration 40
Iteration 41

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:46

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_1958172 [0.000100] [0.000100] [0.050721] [0.000100] [0.000100] [0.895677] [0.183285] [3.235160] [1.076660] [0.330259] [0.311239] [0.281268] [1.029390] [0.027089] [0.000100]
	k141_2515916 [0.000100] [0.000100] [0.490188] [0.750901] [0.046055] [0.150981] [0.674810] [2.964360] [3.646380] [0.963556] [0.677213] [0.736083] [0.374449] [0.052062] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37
Iteration 38
Iteration 39
Iteration 40
Iteration 41
Iteration 42
Iteration 43
Iteration 44
Iteration 45
Iteration 46
Iteration 47
Iteration 48
Iteration 49
Iteration 50

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:40

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_87857 [218.837000] [40.877800] [0.312746] [0.055191] [0.287779] [0.072273] [0.019273] [0.213316] [0.024967] [0.928603] [0.452475] [0.066141] [0.123522] [0.000100] [131.661000]
	k141_2457732 [189.223000] [50.523900] [0.029051] [0.058709] [0.023465] [0.044335] [0.076397] [0.056550] [0.043066] [0.048956] [0.068007] [0.049353] [0.050376] [0.015075] [170.941000]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:18

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_1007763 [0.000100] [0.000100] [0.000100] [1.187430] [0.044893] [3.167230] [4.797980] [6.422000] [6.400670] [0.000100] [0.085297] [1.361390] [3.557800] [2.221100] [0.000100]
	k141_2421903 [0.000100] [0.000100] [0.663891] [2.800530] [0.423921] [3.589330] [3.085160] [5.452310] [7.564350] [0.666541] [1.109390] [3.151400] [4.422410] [1.463290] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:21

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_2148177 [0.000100] [0.000100] [0.044393] [0.000100] [0.044393] [0.625000] [0.095794] [0.198598] [0.433411] [0.000100] [1.803740] [0.140187] [0.375000] [0.000100] [0.000100]
	k141_2283815 [0.000100] [0.000100] [0.049984] [0.555271] [0.000100] [0.504326] [0.598526] [2.314000] [1.774750] [0.162768] [0.323935] [0.731176] [0.912848] [0.208907] [0.000100]
	k141_2465949 [0.012125] [0.011519] [0.251288] [0.522431] [0.277963] [0.297818] [0.188087] [1.920890] [2.528340] [0.698697] [0.478933] [0.500758] [1.636100] [0.206426] [0.012125]
Get 3 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37
Iteration 38
Iteration 39
Iteration 40
Iteration 41
Iteration 42
Iteration 43
Iteration 44
Iteration 45
Iteration 46
Iteration 47
Iteration 48
Iteration 49
Iteration 50

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 341 (7.04%)
Elapsed time:  0 days 00:00:58

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_240517 [0.000100] [0.000100] [0.000100] [0.567735] [0.257497] [0.372285] [0.775595] [0.700103] [2.754910] [0.084798] [0.214064] [0.295760] [0.000100] [0.080662] [0.000100]
	k141_1573677 [0.000100] [0.000100] [0.021505] [0.398415] [0.045275] [0.089417] [0.070175] [6.117150] [1.375780] [0.045275] [0.096208] [0.336729] [0.101868] [0.000100] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37
Iteration 38
Iteration 39
Iteration 40
Iteration 41
Iteration 42
Iteration 43
Iteration 44
Iteration 45
Iteration 46
Iteration 47
Iteration 48
Iteration 49
Iteration 50

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:01:02

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_793383 [0.010388] [0.000100] [0.389068] [3.599800] [0.227554] [1.319070] [0.515953] [1.317590] [1.023000] [0.373485] [0.673015] [1.794710] [1.444220] [1.128120] [0.000100]
	k141_1007842 [0.000100] [0.000100] [0.041850] [2.832600] [0.000100] [1.834800] [0.345815] [0.475771] [0.325991] [0.281938] [0.661894] [1.053960] [0.707048] [0.063877] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37
Iteration 38
Iteration 39
Iteration 40
Iteration 41

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:46

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_928231 [0.000100] [0.000100] [0.719925] [0.833333] [0.496867] [0.809524] [0.515664] [1.580830] [1.327690] [0.075188] [0.378446] [0.548872] [1.036970] [0.051378] [0.000100]
	k141_1965419 [0.000100] [0.000100] [0.108668] [0.760673] [0.428849] [0.694696] [0.050453] [0.645537] [1.029110] [0.100906] [0.076326] [0.596378] [0.643596] [0.319534] [0.000100]
	k141_2219530 [0.000100] [0.000100] [0.052945] [1.850430] [0.225017] [0.625414] [1.870280] [3.627400] [1.996030] [0.000100] [0.130377] [2.029780] [0.796161] [0.161482] [0.000100]
Get 3 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37
Iteration 38
Iteration 39
Iteration 40
Iteration 41
Iteration 42
Iteration 43
Iteration 44
Iteration 45
Iteration 46
Iteration 47
Iteration 48

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 167 (4.88%)
Elapsed time:  0 days 00:00:45

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_1325705 [0.000100] [0.000100] [0.035581] [0.037453] [0.395131] [1.828650] [1.411050] [0.478464] [1.135770] [0.000100] [1.649810] [0.057116] [0.540262] [0.774345] [0.000100]
	k141_1871816 [0.000100] [0.000100] [0.229685] [0.366417] [0.217991] [0.316342] [1.052770] [2.833580] [0.605697] [0.456972] [1.875860] [0.699250] [2.257270] [0.114843] [0.011394]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37
Iteration 38

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:45

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_1956123 [0.000100] [0.000100] [0.165299] [0.461899] [0.000100] [0.949004] [1.817120] [0.710434] [0.480657] [0.026964] [0.565651] [1.156510] [2.755570] [0.192263] [0.000100]
	k141_1983881 [0.000100] [0.000100] [0.065339] [0.052067] [0.194487] [0.750893] [3.338950] [0.073507] [0.236856] [0.000100] [0.034201] [0.107198] [3.273610] [0.265442] [0.000100]
	k141_2358760 [0.000100] [0.000100] [0.018887] [0.266402] [0.021869] [0.971670] [4.397610] [0.292247] [0.061630] [0.019881] [0.020875] [0.280815] [0.928429] [0.499006] [0.000100]
Get 3 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37
Iteration 38
Iteration 39
Iteration 40
Iteration 41
Iteration 42

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 47 (2.45%)
Elapsed time:  0 days 00:00:31

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_76250 [0.000100] [0.000100] [1.178630] [0.072357] [0.920859] [0.120407] [0.144149] [2.766530] [4.681180] [2.028260] [0.994347] [0.247032] [0.115319] [0.317128] [0.000100]
	k141_1001676 [0.000100] [0.000100] [0.110590] [0.073102] [0.139644] [0.208997] [0.151828] [1.162140] [1.697280] [1.390820] [0.078725] [0.035614] [0.110590] [0.035614] [0.000100]
	k141_1639215 [0.000100] [0.000100] [0.109339] [0.034928] [0.073652] [0.063781] [0.028854] [4.993930] [0.636295] [0.536826] [0.223994] [1.330300] [0.139711] [0.060744] [0.000100]
Get 3 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37
Iteration 38
Iteration 39
Iteration 40
Iteration 41
Iteration 42
Iteration 43
Iteration 44
Iteration 45
Iteration 46
Iteration 47
Iteration 48
Iteration 49
Iteration 50

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 192 (4.15%)
Elapsed time:  0 days 00:00:58

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_235028 [0.000100] [0.000100] [0.884892] [0.914323] [0.962067] [1.221710] [1.743620] [0.377371] [1.921520] [0.317855] [5.858730] [3.051670] [3.706340] [0.860039] [0.000100]
	k141_739400 [0.000100] [0.007361] [0.445176] [0.392484] [0.918830] [0.792329] [1.114300] [0.306470] [0.190430] [0.018210] [1.912240] [2.098990] [2.048430] [0.613522] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:24

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_1507638 [0.000100] [0.000100] [0.290672] [1.289230] [0.185105] [1.251630] [0.027477] [0.793926] [0.913955] [0.486623] [1.046280] [1.580620] [1.587130] [0.310195] [0.000100]
	k141_2072172 [0.000100] [0.000100] [0.000100] [0.575029] [0.775498] [0.487104] [0.424385] [1.329430] [2.592610] [0.361665] [0.695193] [0.459555] [2.195190] [0.227433] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:25

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_560929 [0.000100] [0.000100] [0.512681] [2.949880] [1.051330] [0.887077] [2.443840] [0.651570] [0.112923] [0.022947] [1.919080] [2.478260] [2.239130] [0.829106] [0.000100]
	k141_1724315 [0.000100] [0.000100] [0.822099] [1.176800] [0.868508] [1.101660] [2.800000] [0.337017] [0.672928] [0.225414] [0.801105] [2.782320] [2.276240] [0.046409] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:25

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_591590 [0.000100] [0.000100] [0.434354] [0.000100] [0.000100] [0.846827] [0.177243] [1.282280] [1.644420] [0.000100] [0.885120] [0.863239] [0.000100] [0.000100] [0.000100]
	k141_1142106 [0.000100] [0.000100] [0.271338] [0.488038] [0.444667] [0.680198] [0.929310] [3.488960] [1.125640] [0.194629] [1.016210] [0.496836] [1.475230] [0.307609] [0.000100]
	k141_1978791 [0.010703] [0.009487] [0.038677] [0.081975] [0.035028] [0.163221] [0.054975] [0.767453] [4.506690] [2.413770] [0.594989] [0.130625] [0.214790] [0.009730] [0.000100]
Get 3 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 50 (1.86%)
Elapsed time:  0 days 00:00:34

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_636052 [0.042889] [0.000100] [0.000100] [0.444695] [1.392780] [0.415350] [0.224605] [0.124154] [0.590293] [0.130926] [0.414221] [0.094808] [1.082390] [1.407450] [0.046275]
	k141_2550648 [0.000100] [0.000100] [0.062151] [0.404781] [1.478880] [2.012750] [2.992830] [0.206374] [0.119522] [0.000100] [0.097211] [0.033466] [0.539442] [0.000100] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:54

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_1610576 [0.093596] [0.000100] [0.197865] [2.389160] [0.750410] [0.550082] [1.463050] [4.788180] [0.080460] [0.138752] [0.938424] [3.324300] [1.485220] [0.353859] [0.000100]
	k141_2563924 [0.000100] [0.000100] [0.273092] [1.207110] [0.251291] [0.698221] [1.435460] [4.084910] [0.559954] [0.568560] [0.974182] [4.045320] [0.734940] [0.043603] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:31

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_422910 [0.000100] [0.001863] [0.297183] [1.398320] [0.955111] [1.798420] [2.335130] [1.420910] [0.817881] [0.200838] [1.239160] [2.098210] [3.657930] [1.831900] [0.000100]
	k141_1710113 [0.000100] [0.000100] [1.269160] [1.066580] [2.096200] [4.964580] [5.350910] [0.203767] [0.113138] [0.131856] [0.962445] [0.777515] [1.248070] [0.599929] [0.004502]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:35

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_910595 [0.000100] [0.000100] [1.415600] [0.035806] [0.863171] [0.099744] [0.058824] [0.175192] [0.315857] [6.184140] [0.955243] [0.384910] [0.109974] [0.010230] [0.000100]
	k141_1358685 [0.030189] [0.000100] [0.478491] [0.120755] [2.430940] [0.117736] [0.089057] [0.122264] [0.080000] [2.292830] [0.058868] [0.104151] [0.074717] [0.028679] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:30

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_1857193 [0.006436] [0.009654] [0.046339] [5.336280] [0.189863] [1.528080] [0.248753] [2.139820] [0.271440] [0.023813] [0.874819] [4.115210] [0.059533] [0.959453] [0.000100]
	k141_2269569 [0.000100] [0.000100] [0.028490] [1.425930] [0.480057] [1.254270] [0.175214] [0.290598] [0.158120] [0.000100] [0.113960] [0.847578] [0.055556] [0.028490] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37
Iteration 38
Iteration 39
Iteration 40
Iteration 41
Iteration 42
Iteration 43
Iteration 44
Iteration 45
Iteration 46
Iteration 47

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:47

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_444131 [0.027036] [0.000100] [0.026392] [0.670100] [0.025427] [0.596073] [0.561313] [2.362090] [1.299000] [0.038622] [0.191503] [0.413582] [0.397811] [0.599936] [0.000100]
	k141_1934538 [0.000100] [0.000100] [0.000100] [0.035714] [0.000100] [0.272556] [0.330827] [2.480260] [0.824248] [0.238722] [0.671053] [0.687030] [1.279140] [0.000100] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:28

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_687874 [0.000100] [0.000100] [0.872599] [1.357870] [0.368758] [1.278490] [4.242000] [7.992960] [6.159410] [3.792570] [2.114600] [0.708707] [2.214470] [1.278490] [0.000100]
	k141_1442606 [0.001692] [0.001607] [2.053720] [2.254310] [2.171360] [1.400000] [3.610700] [4.795690] [5.501950] [2.170090] [5.885660] [3.546150] [6.276860] [1.232830] [0.004992]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:21

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_601256 [0.000100] [0.000100] [0.275000] [0.154167] [0.306250] [0.671875] [0.613542] [1.415620] [0.567708] [0.410417] [0.491667] [1.144790] [1.118750] [0.514583] [0.000100]
	k141_2248305 [0.000100] [0.000100] [0.397184] [0.334471] [0.388652] [0.622014] [0.583191] [3.641640] [2.933020] [0.220990] [0.369881] [0.377560] [2.065700] [1.056310] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:26

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_491101 [0.000100] [0.000100] [0.025833] [0.215500] [0.025833] [0.458872] [0.570360] [0.848402] [2.029230] [0.025833] [0.352821] [0.000100] [0.286880] [0.296397] [0.000100]
	k141_2388561 [0.052306] [0.000100] [0.027529] [3.026840] [0.399174] [1.073640] [0.083964] [1.889880] [1.367520] [0.415692] [2.059880] [2.587750] [0.026153] [0.331727] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37
Iteration 38
Iteration 39
Iteration 40
Iteration 41
Iteration 42
Iteration 43
Iteration 44
Iteration 45
Iteration 46
Iteration 47
Iteration 48
Iteration 49
Iteration 50

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:42

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_275491 [0.000100] [0.000100] [0.160000] [0.033044] [0.646957] [3.887830] [0.859130] [0.137391] [0.358261] [0.389565] [0.517391] [0.125217] [0.757391] [0.067826] [0.000100]
	k141_1360372 [0.000100] [0.000100] [0.047836] [0.344723] [0.405467] [0.993166] [2.014430] [0.050114] [0.355353] [0.000100] [0.766135] [0.362946] [0.733485] [0.734244] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37
Iteration 38
Iteration 39
Iteration 40
Iteration 41
Iteration 42
Iteration 43
Iteration 44
Iteration 45
Iteration 46
Iteration 47
Iteration 48
Iteration 49
Iteration 50

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:49

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_428066 [0.000100] [0.000100] [2.388950] [0.042508] [2.500530] [0.024442] [0.000100] [0.236982] [0.133900] [5.539850] [0.522848] [0.040383] [0.443146] [0.042508] [0.000100]
	k141_2409951 [0.000100] [0.000100] [4.706630] [0.237245] [2.872450] [0.215816] [0.551020] [1.223980] [0.460714] [1.395410] [5.476020] [0.245918] [1.441840] [0.112755] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37
Iteration 38
Iteration 39
Iteration 40
Iteration 41
Iteration 42
Iteration 43
Iteration 44
Iteration 45
Iteration 46
Iteration 47
Iteration 48
Iteration 49
Iteration 50

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:38

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_946193 [0.000100] [0.000100] [0.000100] [1.069540] [0.588802] [1.118900] [1.489160] [6.938890] [7.945210] [0.962071] [0.652619] [1.964480] [4.541240] [0.467489] [0.000100]
	k141_1198307 [0.000100] [0.000100] [0.695394] [0.767094] [0.910969] [0.766857] [1.487650] [5.796530] [5.070280] [0.567901] [1.245730] [1.661440] [3.265670] [1.223880] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:29

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_243560 [0.000100] [0.000100] [0.166978] [0.171028] [0.177570] [0.293458] [1.313400] [2.221180] [0.963240] [0.203738] [0.101869] [0.362305] [1.405920] [0.280374] [0.000100]
	k141_486913 [0.000100] [0.000100] [0.000100] [0.041572] [0.000100] [1.224110] [2.465610] [0.546485] [0.455782] [0.044596] [0.014361] [0.666289] [2.196150] [0.685941] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:21

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_604873 [0.009880] [0.000100] [0.630440] [1.173610] [1.247940] [1.217360] [1.303930] [5.640080] [3.127970] [0.326511] [0.253823] [2.666430] [2.040230] [1.386030] [0.000100]
	k141_1430440 [0.018417] [0.000100] [0.056220] [1.806140] [0.021325] [1.825360] [0.831179] [0.109370] [0.983037] [0.076252] [0.552342] [1.770270] [1.078840] [0.136995] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:24

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_860926 [0.000100] [0.000100] [0.011589] [0.365050] [0.035377] [6.141810] [0.249161] [0.328759] [2.632210] [0.465691] [0.524245] [0.922842] [0.163160] [0.368710] [0.000100]
	k141_1877957 [0.000100] [0.000100] [0.930526] [0.808421] [0.252632] [3.174740] [0.463158] [0.723158] [4.912630] [0.556842] [6.228420] [2.071580] [0.104211] [0.945263] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:28

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_456926 [0.007697] [0.000100] [0.266154] [5.479440] [0.324286] [8.538180] [6.358720] [7.379380] [23.757300] [0.741949] [1.755110] [4.887380] [7.855380] [4.569580] [0.000100]
	k141_1667064 [0.000100] [0.000100] [1.038040] [6.845560] [2.009790] [13.005500] [17.350300] [20.122100] [12.555800] [0.995216] [0.459681] [8.774940] [12.003900] [5.204560] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:21

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_99438 [0.000100] [0.004948] [1.367800] [1.256160] [2.002470] [7.121950] [4.363470] [0.526131] [0.075869] [0.068962] [1.279350] [1.897230] [1.313370] [0.466344] [0.004948]
	k141_99879 [0.000100] [0.000100] [0.216236] [0.512159] [0.303404] [0.595585] [0.042649] [1.031430] [0.382342] [0.183315] [1.003740] [1.745230] [1.295550] [0.741863] [0.000100]
	k141_371796 [0.000100] [0.000100] [0.047619] [0.786023] [0.230983] [1.380950] [0.950216] [1.770560] [1.290970] [0.013605] [1.162960] [1.298700] [0.927025] [0.615646] [0.000100]
	k141_469919 [0.000100] [0.000100] [0.071813] [0.757630] [0.000100] [0.336625] [1.455120] [0.853680] [0.071813] [0.513465] [0.346499] [0.111311] [1.508980] [0.315978] [0.000100]
	k141_995612 [0.000100] [0.093333] [0.031111] [1.188890] [0.097037] [0.574074] [1.358520] [0.511852] [0.451111] [0.000100] [0.637037] [1.460740] [0.653333] [0.393333] [0.062222]
	k141_1116544 [0.019843] [0.000100] [0.349869] [0.543603] [0.210444] [1.369190] [0.513316] [0.747781] [0.071541] [0.043864] [0.904439] [2.364490] [0.997911] [0.908616] [0.019843]
	k141_1297237 [0.026893] [0.000100] [0.720807] [2.090230] [0.879689] [3.966030] [2.228950] [3.887470] [2.685420] [0.403397] [2.541050] [4.201340] [4.840410] [1.296890] [0.013447]
	k141_2022902 [0.000100] [0.000100] [0.094500] [0.442293] [0.029434] [0.158017] [0.066615] [0.371805] [0.385747] [0.000100] [0.301317] [1.884590] [1.187450] [0.213013] [0.000100]
Get 8 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37
Iteration 38
Iteration 39
Iteration 40
Iteration 41
Iteration 42
Iteration 43
Iteration 44
Iteration 45
Iteration 46
Iteration 47
Iteration 48
Iteration 49
Iteration 50

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 206 (5.39%)
Elapsed time:  0 days 00:00:53

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_1831667 [0.000100] [0.000100] [0.499624] [0.187359] [0.015801] [0.671181] [0.420617] [1.669680] [2.738900] [0.625282] [0.366441] [0.629797] [0.812641] [0.237020] [0.000100]
	k141_2295079 [0.009536] [0.000100] [0.132497] [0.191970] [0.009536] [0.839649] [0.951317] [3.230870] [2.922710] [0.030113] [0.079297] [0.428356] [0.530238] [0.405019] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:27

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_1128102 [0.026008] [0.000100] [0.377113] [0.000100] [0.040312] [0.026008] [0.124837] [0.728218] [0.985696] [0.381664] [0.960988] [0.000100] [1.254880] [0.000100] [0.000100]
	k141_1401858 [0.000100] [0.000100] [0.169114] [1.051650] [0.289114] [0.060760] [0.707342] [0.725570] [0.301772] [0.019241] [0.398481] [0.926076] [2.821770] [0.218734] [0.000100]
	k141_1650716 [0.000100] [0.000100] [0.133506] [0.934970] [0.413867] [0.280792] [0.349699] [0.804479] [2.126620] [0.792420] [0.293282] [0.133506] [0.266581] [0.000100] [0.000100]
Get 3 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37
Iteration 38
Iteration 39
Iteration 40
Iteration 41
Iteration 42
Iteration 43
Iteration 44
Iteration 45
Iteration 46
Iteration 47
Iteration 48
Iteration 49
Iteration 50

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 176 (2.67%)
Elapsed time:  0 days 00:01:13

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_1217407 [0.000100] [0.000100] [0.081301] [0.106707] [0.000100] [0.166667] [3.009150] [0.268293] [0.000100] [0.000100] [0.455285] [0.470528] [0.000100] [0.471545] [0.000100]
	k141_2447518 [0.000100] [0.000100] [1.129030] [1.301710] [0.041746] [0.944023] [1.550280] [0.404175] [0.229602] [0.000100] [2.305500] [3.186910] [1.567360] [1.945920] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37
Iteration 38
Iteration 39
Iteration 40

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:38

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_391976 [0.000100] [0.000100] [0.250363] [0.214804] [0.091437] [0.105225] [0.531205] [4.664730] [0.944848] [0.059506] [0.165457] [0.066763] [0.574746] [0.000100] [0.000100]
	k141_1653328 [0.000100] [0.006103] [0.143272] [0.363993] [0.150538] [1.125690] [1.063930] [2.286840] [1.751530] [0.104911] [0.179454] [0.766056] [1.097360] [0.071491] [0.006103]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:49

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_185732 [0.000100] [0.000100] [0.045983] [0.283640] [0.018393] [0.039690] [0.328654] [1.940460] [0.166989] [0.036786] [1.225560] [3.361080] [0.056147] [0.040658] [0.000100]
	k141_2029464 [0.000100] [0.000100] [0.414070] [2.009050] [0.402010] [0.044221] [0.436181] [2.577890] [0.086432] [0.104523] [1.597990] [1.634170] [0.393970] [0.184925] [0.084422]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37
Iteration 38
Iteration 39

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:49

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_371720 [0.022248] [0.000100] [0.070258] [0.071429] [0.574356] [0.522834] [2.199650] [1.162180] [0.395785] [0.044497] [3.083720] [0.179742] [0.570258] [0.000100] [0.000100]
	k141_2524578 [0.000100] [0.000100] [0.000100] [0.081985] [0.000100] [1.571740] [0.531823] [0.537217] [1.898600] [0.000100] [0.521036] [0.549083] [1.250270] [0.636462] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37
Iteration 38
Iteration 39
Iteration 40
Iteration 41
Iteration 42
Iteration 43
Iteration 44
Iteration 45
Iteration 46
Iteration 47
Iteration 48
Iteration 49
Iteration 50

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:01:10

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_590125 [0.000100] [0.050476] [0.052958] [0.643773] [0.476624] [0.935871] [1.986760] [2.203560] [2.811340] [0.065370] [0.168804] [0.548614] [0.775755] [0.388084] [0.067853]
	k141_601662 [0.000100] [0.028470] [0.434164] [1.320280] [0.281851] [0.478292] [0.438434] [1.866900] [0.340925] [0.000100] [0.027046] [0.212100] [0.448399] [0.000100] [0.000100]
	k141_683892 [0.000100] [0.000100] [0.396127] [0.492077] [0.054578] [0.070422] [1.092430] [1.150530] [1.044010] [0.035211] [1.688380] [1.861800] [1.828350] [0.674296] [0.000100]
	k141_1110352 [0.000100] [0.000100] [0.000100] [1.407980] [0.088692] [0.090909] [0.409091] [1.294900] [0.000100] [0.000100] [0.077605] [0.577605] [0.613082] [0.000100] [0.000100]
	k141_1144961 [0.000100] [0.000100] [0.205935] [0.127698] [1.037470] [0.556355] [1.162170] [0.492506] [0.128597] [0.038669] [1.122300] [1.046460] [1.303660] [0.270683] [0.000100]
	k141_1821187 [0.000100] [0.000100] [0.168508] [0.636050] [0.000100] [0.200276] [1.268650] [0.937155] [1.500000] [0.000100] [0.087017] [0.197514] [0.622238] [1.962020] [0.000100]
	k141_2425676 [0.000100] [0.000100] [0.000100] [0.039054] [0.150051] [0.932169] [1.247690] [0.807811] [0.078109] [0.279548] [1.684480] [0.043166] [1.474820] [0.322713] [0.000100]
Get 7 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37
Iteration 38
Iteration 39
Iteration 40
Iteration 41
Iteration 42
Iteration 43
Iteration 44
Iteration 45
Iteration 46
Iteration 47
Iteration 48
Iteration 49
Iteration 50

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 397 (8.59%)
Elapsed time:  0 days 00:01:00

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_848293 [0.000100] [0.000100] [0.719130] [0.880870] [1.857390] [0.573043] [1.533910] [0.532174] [0.000100] [0.000100] [2.665220] [0.016522] [1.652170] [0.279130] [0.000100]
	k141_1748871 [0.011667] [0.023334] [0.015352] [0.387780] [0.012281] [5.021800] [0.804728] [0.109303] [0.154744] [0.036844] [0.093951] [0.050353] [0.011974] [1.010130] [0.011667]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:42

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_1492758 [0.000100] [0.000100] [0.000100] [1.433140] [0.000100] [0.837714] [0.180571] [1.013710] [0.091429] [0.000100] [0.045714] [0.416000] [0.048000] [0.000100] [0.000100]
	k141_1976397 [0.000100] [0.000100] [0.000100] [0.372671] [0.055211] [0.596273] [0.026225] [0.857833] [0.384403] [0.000100] [0.353347] [0.622498] [1.231880] [0.469979] [0.000100]
	k141_2438432 [0.034420] [0.000100] [0.036232] [0.835145] [0.034420] [5.662140] [0.412138] [0.304348] [0.125000] [0.053442] [0.300725] [0.052536] [0.036232] [1.687500] [0.000100]
Get 3 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 66 (1.82%)
Elapsed time:  0 days 00:00:37

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_236889 [0.000100] [0.000100] [2.936620] [5.036090] [2.148330] [4.551060] [6.187500] [2.400530] [1.082310] [0.526849] [4.296650] [7.055020] [7.599470] [1.957750] [0.000100]
	k141_1496075 [0.000100] [0.000100] [2.696410] [10.772300] [4.875690] [10.515300] [17.185600] [7.817590] [3.119080] [0.933002] [12.900500] [17.228000] [18.967000] [4.803190] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37
Iteration 38
Iteration 39
Iteration 40
Iteration 41
Iteration 42
Iteration 43
Iteration 44
Iteration 45
Iteration 46
Iteration 47
Iteration 48
Iteration 49
Iteration 50

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:32

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_1203201 [0.014857] [0.000100] [0.318359] [0.589671] [0.292890] [2.458790] [1.691020] [4.090020] [3.338520] [0.517156] [0.112133] [1.758930] [1.248850] [0.753626] [0.000100]
	k141_1306508 [0.000100] [0.000100] [0.169031] [1.205080] [0.309693] [0.682033] [1.661350] [3.819150] [4.666080] [0.923168] [0.391844] [1.050830] [2.570920] [0.337470] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:22

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_1519530 [0.000100] [0.000100] [5.632970] [15.883500] [6.129670] [12.446800] [14.200600] [17.709900] [11.487600] [3.294820] [18.180800] [28.693900] [26.308900] [7.655570] [0.000100]
	k141_1703206 [0.000100] [0.000100] [4.536500] [14.077300] [12.779600] [14.849800] [26.091400] [10.574800] [4.799430] [2.016300] [18.620800] [27.671900] [24.185700] [5.925580] [0.028349]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:19

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_1464784 [0.000100] [0.000100] [0.713510] [1.153940] [1.417380] [1.501830] [2.530090] [0.329491] [0.380029] [0.113488] [2.328270] [1.782330] [1.958880] [0.647567] [0.000100]
	k141_1784393 [0.000100] [0.000100] [1.891620] [3.322950] [2.554280] [2.698510] [3.654700] [0.559810] [0.636207] [0.062723] [3.491680] [4.975510] [4.515580] [1.264800] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:20

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_689055 [0.000100] [0.000100] [0.100577] [0.352844] [0.000100] [1.752680] [0.362737] [1.940640] [1.880460] [0.037922] [0.105523] [0.827700] [0.860676] [0.031327] [0.000100]
	k141_2118050 [0.000100] [0.000100] [0.035461] [1.829790] [0.000100] [1.218090] [0.091312] [0.429965] [0.924645] [0.000100] [0.042553] [0.035461] [0.767730] [0.035461] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:23

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_886035 [0.000100] [0.000100] [0.000100] [0.073858] [0.494655] [0.534500] [0.040816] [0.824101] [0.038873] [0.361516] [0.207969] [0.409135] [0.000100] [0.463557] [0.000100]
	k141_905749 [0.000100] [0.000100] [0.786650] [0.613849] [0.524641] [0.597006] [3.267000] [0.148472] [0.642545] [0.129757] [0.143481] [1.378660] [1.830320] [0.024953] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37
Iteration 38
Iteration 39
Iteration 40
Iteration 41
Iteration 42
Iteration 43
Iteration 44
Iteration 45
Iteration 46
Iteration 47
Iteration 48
Iteration 49
Iteration 50

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:46

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_137901 [0.000100] [0.000100] [0.521455] [0.770909] [0.055273] [1.153450] [0.653818] [4.015270] [1.359270] [0.072727] [0.492364] [0.255273] [0.091636] [0.027636] [0.000100]
	k141_482594 [0.000100] [0.000100] [0.164200] [2.261100] [0.399051] [1.027930] [0.819045] [1.301310] [0.549009] [0.473331] [1.795030] [2.972070] [1.961460] [0.338453] [0.000100]
	k141_1418728 [0.000100] [0.000100] [0.393972] [0.525296] [0.312164] [0.534984] [0.579117] [1.511300] [0.567277] [1.153930] [1.820240] [2.698600] [0.124865] [0.000100] [0.000100]
Get 3 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37
Iteration 38
Iteration 39
Iteration 40
Iteration 41
Iteration 42
Iteration 43
Iteration 44
Iteration 45
Iteration 46
Iteration 47
Iteration 48
Iteration 49
Iteration 50

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 120 (11.05%)
Elapsed time:  0 days 00:00:27

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_1751229 [0.000100] [0.000100] [0.000100] [0.050955] [0.000100] [0.247700] [0.108988] [0.779193] [3.702760] [1.457180] [0.283086] [0.000100] [0.000100] [0.000100] [0.000100]
	k141_2412532 [0.000100] [0.000100] [0.000100] [0.000100] [0.054667] [0.025333] [0.158000] [1.166670] [7.088670] [4.082000] [0.097333] [0.000100] [0.026667] [0.025333] [0.050667]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:23

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_361009 [0.000100] [0.011422] [1.138970] [3.592870] [2.780800] [6.191460] [5.313570] [4.950780] [1.296710] [0.852325] [3.143320] [7.037530] [4.832740] [1.954310] [0.011422]
	k141_1140789 [0.000100] [0.000100] [0.529893] [2.693520] [1.023910] [4.463180] [5.554440] [4.603520] [0.840151] [1.208310] [2.419130] [5.361230] [3.857770] [0.915670] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:18

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_480650 [0.000100] [0.000100] [0.594359] [2.324380] [1.376760] [2.164540] [2.371390] [0.536602] [0.468099] [0.150437] [2.021490] [3.131630] [1.477500] [1.195430] [0.000100]
	k141_1174863 [0.013852] [0.009388] [0.400801] [1.263080] [0.815684] [1.885860] [1.477050] [0.985690] [0.445106] [0.587292] [1.737150] [4.151800] [3.001140] [0.901546] [0.018546]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:18

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_730107 [0.000100] [0.000100] [0.955620] [4.813310] [1.415820] [5.949830] [8.418230] [17.515700] [13.487200] [0.697057] [1.122050] [6.078630] [9.352630] [4.527740] [0.000100]
	k141_1325627 [0.000100] [0.042389] [1.797690] [3.396920] [2.453760] [8.481700] [7.526010] [15.578000] [13.198500] [0.973988] [2.958570] [6.996150] [8.463390] [3.899810] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:22

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_331166 [0.000100] [0.000100] [16.110000] [26.625900] [21.331100] [34.002300] [48.199500] [26.072600] [11.037400] [5.308390] [34.953500] [51.639500] [58.100900] [11.960300] [0.000100]
	k141_1463445 [0.000100] [0.000100] [12.707700] [40.616300] [21.666300] [45.256500] [60.583100] [24.808000] [9.358290] [2.690510] [40.811000] [64.603600] [62.921800] [21.386900] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:20

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_1087710 [0.000100] [0.000100] [0.095360] [0.568225] [0.036809] [0.591680] [0.361411] [8.442390] [0.785996] [0.102893] [0.398904] [0.720253] [0.060435] [0.007191] [0.006506]
	k141_2076735 [0.000100] [0.000100] [0.371257] [0.445291] [0.288514] [0.064235] [0.702776] [1.428420] [4.735440] [0.731083] [0.203048] [0.371257] [0.372891] [0.249320] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37
Iteration 38
Iteration 39
Iteration 40
Iteration 41
Iteration 42
Iteration 43

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:26

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_87857 [218.837000] [40.877800] [0.312746] [0.055191] [0.287779] [0.072273] [0.019273] [0.213316] [0.024967] [0.928603] [0.452475] [0.066141] [0.123522] [0.000100] [131.661000]
	k141_2457732 [189.223000] [50.523900] [0.029051] [0.058709] [0.023465] [0.044335] [0.076397] [0.056550] [0.043066] [0.048956] [0.068007] [0.049353] [0.050376] [0.015075] [170.941000]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:18

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_404743 [0.000100] [0.000100] [0.551753] [6.688230] [0.404007] [5.757930] [7.896700] [2.065940] [4.681970] [0.000100] [0.372287] [6.675710] [10.339900] [2.208060] [0.000100]
	k141_2421903 [0.000100] [0.000100] [0.663891] [2.800530] [0.423921] [3.589330] [3.085160] [5.452310] [7.564350] [0.666541] [1.109390] [3.151400] [4.422410] [1.463290] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:20

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_1089506 [0.000100] [0.000100] [0.000100] [5.055300] [0.855991] [2.500000] [0.957373] [2.377880] [1.102530] [0.476959] [0.862903] [1.245390] [0.829493] [0.440092] [0.000100]
	k141_1351111 [0.000100] [0.000100] [0.000100] [0.970486] [0.043403] [0.363715] [0.039931] [0.961806] [0.920139] [0.290799] [1.647570] [1.206600] [0.035590] [0.000100] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37
Iteration 38
Iteration 39
Iteration 40
Iteration 41
Iteration 42
Iteration 43
Iteration 44
Iteration 45
Iteration 46
Iteration 47
Iteration 48
Iteration 49
Iteration 50

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:28

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_338724 [0.000100] [0.000100] [0.314470] [1.231200] [0.147534] [1.289010] [0.791431] [1.601860] [2.819730] [0.906225] [1.055380] [2.044460] [0.899758] [0.655618] [0.000100]
	k141_777336 [0.000100] [0.000100] [0.336564] [0.072247] [0.301322] [0.068723] [1.107490] [6.644930] [1.694270] [0.741850] [0.269604] [0.185022] [0.628194] [0.033480] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:30

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_1983881 [0.000100] [0.000100] [0.065339] [0.052067] [0.194487] [0.750893] [3.338950] [0.073507] [0.236856] [0.000100] [0.034201] [0.107198] [3.273610] [0.265442] [0.000100]
	k141_2358760 [0.000100] [0.000100] [0.018887] [0.266402] [0.021869] [0.971670] [4.397610] [0.292247] [0.061630] [0.019881] [0.020875] [0.280815] [0.928429] [0.499006] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:20

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_1378654 [0.000100] [0.000100] [0.069369] [0.790090] [0.809910] [0.700450] [1.001350] [0.556757] [0.453604] [0.255405] [3.159460] [2.977930] [2.107210] [0.722973] [0.000100]
	k141_1965993 [0.000100] [0.000100] [1.145110] [1.159400] [0.669925] [0.623308] [1.181950] [0.581203] [1.145110] [0.279699] [4.254510] [1.046240] [3.514290] [0.789474] [0.030075]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:22

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_304826 [0.000100] [0.000100] [1.534940] [0.505155] [1.978240] [1.578470] [0.948454] [0.335624] [0.373425] [3.217640] [2.298970] [0.334479] [1.340210] [0.045819] [0.000100]
	k141_1978791 [0.010703] [0.009487] [0.038677] [0.081975] [0.035028] [0.163221] [0.054975] [0.767453] [4.506690] [2.413770] [0.594989] [0.130625] [0.214790] [0.009730] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:21

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_689600 [0.000100] [0.000100] [0.101202] [0.994307] [0.182163] [0.758381] [0.994307] [3.234660] [1.128400] [0.225174] [1.239090] [1.956360] [0.278305] [0.051866] [0.000100]
	k141_2360205 [0.000100] [0.000100] [0.000100] [1.972410] [0.482759] [0.648276] [0.216749] [0.485714] [0.647291] [1.223650] [1.615760] [1.140890] [0.037438] [0.345813] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:34

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_422910 [0.000100] [0.001863] [0.297183] [1.398320] [0.955111] [1.798420] [2.335130] [1.420910] [0.817881] [0.200838] [1.239160] [2.098210] [3.657930] [1.831900] [0.000100]
	k141_1710113 [0.000100] [0.000100] [1.269160] [1.066580] [2.096200] [4.964580] [5.350910] [0.203767] [0.113138] [0.131856] [0.962445] [0.777515] [1.248070] [0.599929] [0.004502]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:26

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_390805 [0.026823] [0.000100] [1.590960] [1.245360] [1.341640] [1.234870] [1.378950] [0.968535] [0.498453] [0.444292] [4.050720] [2.779920] [2.222490] [0.348865] [0.013067]
	k141_2388561 [0.052306] [0.000100] [0.027529] [3.026840] [0.399174] [1.073640] [0.083964] [1.889880] [1.367520] [0.415692] [2.059880] [2.587750] [0.026153] [0.331727] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37
Iteration 38
Iteration 39
Iteration 40
Iteration 41
Iteration 42
Iteration 43
Iteration 44

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:30

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_1860698 [0.000100] [0.000100] [0.444985] [0.270437] [0.414936] [0.874945] [0.745912] [1.399030] [1.473710] [0.246133] [2.590810] [1.885550] [1.447190] [0.021211] [0.000100]
	k141_2169551 [0.000100] [0.000100] [0.000100] [0.220690] [0.043678] [0.555172] [0.973563] [0.617241] [0.045977] [0.000100] [1.088510] [0.486207] [0.000100] [0.000100] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:24

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_371796 [0.000100] [0.000100] [0.047619] [0.786023] [0.230983] [1.380950] [0.950216] [1.770560] [1.290970] [0.013605] [1.162960] [1.298700] [0.927025] [0.615646] [0.000100]
	k141_469919 [0.000100] [0.000100] [0.071813] [0.757630] [0.000100] [0.336625] [1.455120] [0.853680] [0.071813] [0.513465] [0.346499] [0.111311] [1.508980] [0.315978] [0.000100]
	k141_995612 [0.000100] [0.093333] [0.031111] [1.188890] [0.097037] [0.574074] [1.358520] [0.511852] [0.451111] [0.000100] [0.637037] [1.460740] [0.653333] [0.393333] [0.062222]
	k141_1116544 [0.019843] [0.000100] [0.349869] [0.543603] [0.210444] [1.369190] [0.513316] [0.747781] [0.071541] [0.043864] [0.904439] [2.364490] [0.997911] [0.908616] [0.019843]
	k141_2022902 [0.000100] [0.000100] [0.094500] [0.442293] [0.029434] [0.158017] [0.066615] [0.371805] [0.385747] [0.000100] [0.301317] [1.884590] [1.187450] [0.213013] [0.000100]
Get 5 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37
Iteration 38
Iteration 39
Iteration 40
Iteration 41
Iteration 42

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 84 (11.04%)
Elapsed time:  0 days 00:00:23

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_833875 [0.003287] [0.000100] [0.024984] [0.131492] [0.019395] [0.674885] [0.580210] [3.101580] [2.457920] [0.024984] [0.144970] [0.488823] [0.672584] [0.394149] [0.000100]
	k141_2196116 [0.022844] [0.000100] [0.021702] [0.044546] [0.021702] [0.068532] [0.270131] [3.356370] [1.844660] [0.731011] [0.070817] [0.130211] [0.264991] [0.065106] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37
Iteration 38
Iteration 39

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:28

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_1128102 [0.026008] [0.000100] [0.377113] [0.000100] [0.040312] [0.026008] [0.124837] [0.728218] [0.985696] [0.381664] [0.960988] [0.000100] [1.254880] [0.000100] [0.000100]
	k141_1401858 [0.000100] [0.000100] [0.169114] [1.051650] [0.289114] [0.060760] [0.707342] [0.725570] [0.301772] [0.019241] [0.398481] [0.926076] [2.821770] [0.218734] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:24

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_82763 [0.016177] [0.000100] [0.032354] [0.501490] [0.201788] [0.385270] [0.908897] [0.975734] [0.917837] [0.132822] [0.856109] [0.717327] [1.850570] [0.416773] [0.000100]
	k141_320939 [0.000100] [0.000100] [0.000100] [0.668053] [0.062370] [0.428274] [0.041580] [1.178790] [3.363130] [0.422037] [0.174636] [0.320166] [0.382536] [0.242550] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:26

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_1217407 [0.000100] [0.000100] [0.081301] [0.106707] [0.000100] [0.166667] [3.009150] [0.268293] [0.000100] [0.000100] [0.455285] [0.470528] [0.000100] [0.471545] [0.000100]
	k141_2447518 [0.000100] [0.000100] [1.129030] [1.301710] [0.041746] [0.944023] [1.550280] [0.404175] [0.229602] [0.000100] [2.305500] [3.186910] [1.567360] [1.945920] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37
Iteration 38

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:30

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_590125 [0.000100] [0.050476] [0.052958] [0.643773] [0.476624] [0.935871] [1.986760] [2.203560] [2.811340] [0.065370] [0.168804] [0.548614] [0.775755] [0.388084] [0.067853]
	k141_601662 [0.000100] [0.028470] [0.434164] [1.320280] [0.281851] [0.478292] [0.438434] [1.866900] [0.340925] [0.000100] [0.027046] [0.212100] [0.448399] [0.000100] [0.000100]
	k141_683892 [0.000100] [0.000100] [0.396127] [0.492077] [0.054578] [0.070422] [1.092430] [1.150530] [1.044010] [0.035211] [1.688380] [1.861800] [1.828350] [0.674296] [0.000100]
	k141_1110352 [0.000100] [0.000100] [0.000100] [1.407980] [0.088692] [0.090909] [0.409091] [1.294900] [0.000100] [0.000100] [0.077605] [0.577605] [0.613082] [0.000100] [0.000100]
Get 4 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37
Iteration 38
Iteration 39
Iteration 40
Iteration 41
Iteration 42
Iteration 43
Iteration 44
Iteration 45
Iteration 46
Iteration 47
Iteration 48
Iteration 49
Iteration 50

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 35 (5.24%)
Elapsed time:  0 days 00:00:23

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_43021 [0.000100] [0.000100] [0.034327] [2.826560] [0.000100] [0.257453] [0.046071] [1.621500] [1.511290] [0.000100] [0.000100] [0.952123] [0.039747] [0.058717] [0.000100]
	k141_2431479 [0.000100] [0.000100] [0.413400] [0.651461] [0.084818] [1.346400] [0.801853] [0.754811] [0.933713] [0.000100] [0.362081] [0.285103] [0.851034] [0.372060] [0.027085]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37
Iteration 38
Iteration 39
Iteration 40
Iteration 41
Iteration 42
Iteration 43
Iteration 44
Iteration 45
Iteration 46
Iteration 47
Iteration 48
Iteration 49
Iteration 50

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:27

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_1083982 [0.000100] [0.000100] [0.052562] [0.052562] [0.310775] [0.562418] [0.819317] [2.356770] [1.105780] [0.053877] [0.764783] [0.356110] [0.076216] [0.027595] [0.000100]
	k141_2111563 [0.000100] [0.000100] [0.639944] [0.388186] [0.997187] [1.440230] [1.617440] [3.381150] [1.735580] [0.321378] [0.059072] [0.560478] [0.990858] [0.854430] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37
Iteration 38
Iteration 39
Iteration 40
Iteration 41
Iteration 42
Iteration 43
Iteration 44
Iteration 45
Iteration 46
Iteration 47
Iteration 48
Iteration 49
Iteration 50

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:41

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_689331 [0.000100] [0.000100] [0.035191] [1.134160] [0.027859] [1.770530] [0.092375] [0.819648] [0.000100] [0.027859] [0.057185] [0.077713] [0.094575] [0.725073] [0.000100]
	k141_2557397 [0.111328] [0.000100] [0.041016] [0.879883] [0.000100] [0.956055] [0.203125] [2.234380] [0.261719] [0.562500] [0.039062] [0.476562] [0.686523] [0.000100] [0.037109]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:24

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_174016 [0.000100] [0.000100] [2.104840] [4.643150] [2.853830] [2.587700] [3.944560] [0.730847] [1.032260] [0.697581] [4.208670] [7.432460] [7.479840] [2.314520] [0.000100]
	k141_851593 [0.000100] [0.020325] [1.820120] [4.294720] [4.786590] [8.323680] [10.116900] [2.833330] [1.697150] [0.909045] [7.803350] [10.529500] [11.166200] [2.883640] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:20

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_1203201 [0.014857] [0.000100] [0.318359] [0.589671] [0.292890] [2.458790] [1.691020] [4.090020] [3.338520] [0.517156] [0.112133] [1.758930] [1.248850] [0.753626] [0.000100]
	k141_1306508 [0.000100] [0.000100] [0.169031] [1.205080] [0.309693] [0.682033] [1.661350] [3.819150] [4.666080] [0.923168] [0.391844] [1.050830] [2.570920] [0.337470] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:20

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_496980 [0.000100] [0.000100] [0.000100] [0.910345] [0.703448] [4.221840] [3.452870] [9.754020] [5.335630] [0.444828] [0.262069] [0.632184] [3.828740] [1.626440] [0.000100]
	k141_2258439 [0.000100] [0.000100] [0.473967] [3.008590] [0.329576] [2.764900] [2.393990] [4.931290] [5.187330] [0.023618] [0.347826] [1.851850] [4.258190] [0.850242] [0.000100]
	k141_2294521 [0.000100] [0.000100] [0.577220] [1.058400] [0.210907] [1.909750] [1.992280] [5.389960] [3.754340] [0.473938] [0.217664] [1.574810] [2.148170] [0.332046] [0.000100]
Get 3 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37
Iteration 38
Iteration 39
Iteration 40
Iteration 41
Iteration 42
Iteration 43
Iteration 44
Iteration 45
Iteration 46
Iteration 47
Iteration 48
Iteration 49
Iteration 50

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 34 (6.16%)
Elapsed time:  0 days 00:00:22

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_689055 [0.000100] [0.000100] [0.100577] [0.352844] [0.000100] [1.752680] [0.362737] [1.940640] [1.880460] [0.037922] [0.105523] [0.827700] [0.860676] [0.031327] [0.000100]
	k141_2118050 [0.000100] [0.000100] [0.035461] [1.829790] [0.000100] [1.218090] [0.091312] [0.429965] [0.924645] [0.000100] [0.042553] [0.035461] [0.767730] [0.035461] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:25

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_482594 [0.000100] [0.000100] [0.164200] [2.261100] [0.399051] [1.027930] [0.819045] [1.301310] [0.549009] [0.473331] [1.795030] [2.972070] [1.961460] [0.338453] [0.000100]
	k141_1077760 [0.000100] [0.000100] [0.022274] [1.257910] [0.695193] [0.560961] [0.656506] [2.039860] [0.404455] [0.941383] [1.092030] [1.524030] [0.610785] [0.000100] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37
Iteration 38
Iteration 39
Iteration 40
Iteration 41
Iteration 42
Iteration 43
Iteration 44
Iteration 45
Iteration 46
Iteration 47
Iteration 48
Iteration 49
Iteration 50

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:20

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_331166 [0.000100] [0.000100] [16.110000] [26.625900] [21.331100] [34.002300] [48.199500] [26.072600] [11.037400] [5.308390] [34.953500] [51.639500] [58.100900] [11.960300] [0.000100]
	k141_1463445 [0.000100] [0.000100] [12.707700] [40.616300] [21.666300] [45.256500] [60.583100] [24.808000] [9.358290] [2.690510] [40.811000] [64.603600] [62.921800] [21.386900] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:18

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_1087710 [0.000100] [0.000100] [0.095360] [0.568225] [0.036809] [0.591680] [0.361411] [8.442390] [0.785996] [0.102893] [0.398904] [0.720253] [0.060435] [0.007191] [0.006506]
	k141_2076735 [0.000100] [0.000100] [0.371257] [0.445291] [0.288514] [0.064235] [0.702776] [1.428420] [4.735440] [0.731083] [0.203048] [0.371257] [0.372891] [0.249320] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37
Iteration 38
Iteration 39
Iteration 40
Iteration 41
Iteration 42
Iteration 43
Iteration 44
Iteration 45
Iteration 46
Iteration 47
Iteration 48
Iteration 49
Iteration 50

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:23

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_689600 [0.000100] [0.000100] [0.101202] [0.994307] [0.182163] [0.758381] [0.994307] [3.234660] [1.128400] [0.225174] [1.239090] [1.956360] [0.278305] [0.051866] [0.000100]
	k141_2360205 [0.000100] [0.000100] [0.000100] [1.972410] [0.482759] [0.648276] [0.216749] [0.485714] [0.647291] [1.223650] [1.615760] [1.140890] [0.037438] [0.345813] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37
Iteration 38
Iteration 39
Iteration 40
Iteration 41
Iteration 42
Iteration 43
Iteration 44
Iteration 45
Iteration 46
Iteration 47
Iteration 48

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:28

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_422910 [0.000100] [0.001863] [0.297183] [1.398320] [0.955111] [1.798420] [2.335130] [1.420910] [0.817881] [0.200838] [1.239160] [2.098210] [3.657930] [1.831900] [0.000100]
	k141_1710113 [0.000100] [0.000100] [1.269160] [1.066580] [2.096200] [4.964580] [5.350910] [0.203767] [0.113138] [0.131856] [0.962445] [0.777515] [1.248070] [0.599929] [0.004502]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:21

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_479646 [0.000100] [0.000100] [0.691262] [4.418450] [0.285437] [1.160190] [2.906800] [3.022330] [0.938835] [0.206796] [1.677670] [3.383500] [2.461160] [0.366990] [0.000100]
	k141_1096659 [0.022485] [0.000100] [0.028402] [0.175148] [0.000100] [0.194675] [1.168640] [3.224850] [2.005330] [0.088757] [0.173965] [0.143195] [1.461540] [0.292308] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:17

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_43021 [0.000100] [0.000100] [0.034327] [2.826560] [0.000100] [0.257453] [0.046071] [1.621500] [1.511290] [0.000100] [0.000100] [0.952123] [0.039747] [0.058717] [0.000100]
	k141_2431479 [0.000100] [0.000100] [0.413400] [0.651461] [0.084818] [1.346400] [0.801853] [0.754811] [0.933713] [0.000100] [0.362081] [0.285103] [0.851034] [0.372060] [0.027085]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:19

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_174016 [0.000100] [0.000100] [2.104840] [4.643150] [2.853830] [2.587700] [3.944560] [0.730847] [1.032260] [0.697581] [4.208670] [7.432460] [7.479840] [2.314520] [0.000100]
	k141_851593 [0.000100] [0.020325] [1.820120] [4.294720] [4.786590] [8.323680] [10.116900] [2.833330] [1.697150] [0.909045] [7.803350] [10.529500] [11.166200] [2.883640] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:20

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_689055 [0.000100] [0.000100] [0.100577] [0.352844] [0.000100] [1.752680] [0.362737] [1.940640] [1.880460] [0.037922] [0.105523] [0.827700] [0.860676] [0.031327] [0.000100]
	k141_2118050 [0.000100] [0.000100] [0.035461] [1.829790] [0.000100] [1.218090] [0.091312] [0.429965] [0.924645] [0.000100] [0.042553] [0.035461] [0.767730] [0.035461] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:21

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_482594 [0.000100] [0.000100] [0.164200] [2.261100] [0.399051] [1.027930] [0.819045] [1.301310] [0.549009] [0.473331] [1.795030] [2.972070] [1.961460] [0.338453] [0.000100]
	k141_1077760 [0.000100] [0.000100] [0.022274] [1.257910] [0.695193] [0.560961] [0.656506] [2.039860] [0.404455] [0.941383] [1.092030] [1.524030] [0.610785] [0.000100] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:18

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_1298501 [0.000100] [0.000100] [0.740264] [0.454768] [0.252377] [1.119900] [0.795462] [2.392210] [0.145967] [0.399264] [0.905244] [1.394050] [0.319227] [0.253910] [0.000100]
	k141_1977487 [0.000100] [0.000100] [0.013378] [0.711706] [0.026421] [0.742809] [0.466890] [1.652840] [1.024410] [1.255180] [1.263550] [0.598662] [0.081605] [0.113712] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37
Iteration 38
Iteration 39
Iteration 40
Iteration 41

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:22

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_689600 [0.000100] [0.000100] [0.101202] [0.994307] [0.182163] [0.758381] [0.994307] [3.234660] [1.128400] [0.225174] [1.239090] [1.956360] [0.278305] [0.051866] [0.000100]
	k141_2360205 [0.000100] [0.000100] [0.000100] [1.972410] [0.482759] [0.648276] [0.216749] [0.485714] [0.647291] [1.223650] [1.615760] [1.140890] [0.037438] [0.345813] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:23

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_43021 [0.000100] [0.000100] [0.034327] [2.826560] [0.000100] [0.257453] [0.046071] [1.621500] [1.511290] [0.000100] [0.000100] [0.952123] [0.039747] [0.058717] [0.000100]
	k141_2431479 [0.000100] [0.000100] [0.413400] [0.651461] [0.084818] [1.346400] [0.801853] [0.754811] [0.933713] [0.000100] [0.362081] [0.285103] [0.851034] [0.372060] [0.027085]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37
Iteration 38
Iteration 39
Iteration 40
Iteration 41
Iteration 42
Iteration 43
Iteration 44
Iteration 45
Iteration 46
Iteration 47
Iteration 48
Iteration 49
Iteration 50

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:22

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_689055 [0.000100] [0.000100] [0.100577] [0.352844] [0.000100] [1.752680] [0.362737] [1.940640] [1.880460] [0.037922] [0.105523] [0.827700] [0.860676] [0.031327] [0.000100]
	k141_2118050 [0.000100] [0.000100] [0.035461] [1.829790] [0.000100] [1.218090] [0.091312] [0.429965] [0.924645] [0.000100] [0.042553] [0.035461] [0.767730] [0.035461] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37
Iteration 38
Iteration 39
Iteration 40
Iteration 41
Iteration 42
Iteration 43
Iteration 44
Iteration 45
Iteration 46
Iteration 47
Iteration 48
Iteration 49
Iteration 50

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:23

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_137901 [0.000100] [0.000100] [0.521455] [0.770909] [0.055273] [1.153450] [0.653818] [4.015270] [1.359270] [0.072727] [0.492364] [0.255273] [0.091636] [0.027636] [0.000100]
	k141_482594 [0.000100] [0.000100] [0.164200] [2.261100] [0.399051] [1.027930] [0.819045] [1.301310] [0.549009] [0.473331] [1.795030] [2.972070] [1.961460] [0.338453] [0.000100]
	k141_1418728 [0.000100] [0.000100] [0.393972] [0.525296] [0.312164] [0.534984] [0.579117] [1.511300] [0.567277] [1.153930] [1.820240] [2.698600] [0.124865] [0.000100] [0.000100]
Get 3 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:17

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_689055 [0.000100] [0.000100] [0.100577] [0.352844] [0.000100] [1.752680] [0.362737] [1.940640] [1.880460] [0.037922] [0.105523] [0.827700] [0.860676] [0.031327] [0.000100]
	k141_2118050 [0.000100] [0.000100] [0.035461] [1.829790] [0.000100] [1.218090] [0.091312] [0.429965] [0.924645] [0.000100] [0.042553] [0.035461] [0.767730] [0.035461] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37
Iteration 38
Iteration 39
Iteration 40
Iteration 41
Iteration 42
Iteration 43
Iteration 44
Iteration 45
Iteration 46
Iteration 47
Iteration 48
Iteration 49
Iteration 50

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:20

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_482594 [0.000100] [0.000100] [0.164200] [2.261100] [0.399051] [1.027930] [0.819045] [1.301310] [0.549009] [0.473331] [1.795030] [2.972070] [1.961460] [0.338453] [0.000100]
	k141_1077760 [0.000100] [0.000100] [0.022274] [1.257910] [0.695193] [0.560961] [0.656506] [2.039860] [0.404455] [0.941383] [1.092030] [1.524030] [0.610785] [0.000100] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:17

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_689055 [0.000100] [0.000100] [0.100577] [0.352844] [0.000100] [1.752680] [0.362737] [1.940640] [1.880460] [0.037922] [0.105523] [0.827700] [0.860676] [0.031327] [0.000100]
	k141_2118050 [0.000100] [0.000100] [0.035461] [1.829790] [0.000100] [1.218090] [0.091312] [0.429965] [0.924645] [0.000100] [0.042553] [0.035461] [0.767730] [0.035461] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:18

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_482594 [0.000100] [0.000100] [0.164200] [2.261100] [0.399051] [1.027930] [0.819045] [1.301310] [0.549009] [0.473331] [1.795030] [2.972070] [1.961460] [0.338453] [0.000100]
	k141_1077760 [0.000100] [0.000100] [0.022274] [1.257910] [0.695193] [0.560961] [0.656506] [2.039860] [0.404455] [0.941383] [1.092030] [1.524030] [0.610785] [0.000100] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:18

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_689055 [0.000100] [0.000100] [0.100577] [0.352844] [0.000100] [1.752680] [0.362737] [1.940640] [1.880460] [0.037922] [0.105523] [0.827700] [0.860676] [0.031327] [0.000100]
	k141_2118050 [0.000100] [0.000100] [0.035461] [1.829790] [0.000100] [1.218090] [0.091312] [0.429965] [0.924645] [0.000100] [0.042553] [0.035461] [0.767730] [0.035461] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:18

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_689055 [0.000100] [0.000100] [0.100577] [0.352844] [0.000100] [1.752680] [0.362737] [1.940640] [1.880460] [0.037922] [0.105523] [0.827700] [0.860676] [0.031327] [0.000100]
	k141_2118050 [0.000100] [0.000100] [0.035461] [1.829790] [0.000100] [1.218090] [0.091312] [0.429965] [0.924645] [0.000100] [0.042553] [0.035461] [0.767730] [0.035461] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:17

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_689055 [0.000100] [0.000100] [0.100577] [0.352844] [0.000100] [1.752680] [0.362737] [1.940640] [1.880460] [0.037922] [0.105523] [0.827700] [0.860676] [0.031327] [0.000100]
	k141_2118050 [0.000100] [0.000100] [0.035461] [1.829790] [0.000100] [1.218090] [0.091312] [0.429965] [0.924645] [0.000100] [0.042553] [0.035461] [0.767730] [0.035461] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37
Iteration 38
Iteration 39
Iteration 40
Iteration 41
Iteration 42

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:17

Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k141_689055 [0.000100] [0.000100] [0.100577] [0.352844] [0.000100] [1.752680] [0.362737] [1.940640] [1.880460] [0.037922] [0.105523] [0.827700] [0.860676] [0.031327] [0.000100]
	k141_2118050 [0.000100] [0.000100] [0.035461] [1.829790] [0.000100] [1.218090] [0.091312] [0.429965] [0.924645] [0.000100] [0.042553] [0.035461] [0.767730] [0.035461] [0.000100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:00:17

bin.001.marker.fasta
bin.002.marker.fasta
bin.003.marker.fasta
bin.004.marker.fasta
bin.005.marker.fasta
bin.006.marker.fasta
bin.007.marker.fasta
bin.008.marker.fasta
bin.009.marker.fasta
bin.010.marker.fasta
bin.011.marker.fasta
bin.012.marker.fasta
bin.013.marker.fasta
bin.014.marker.fasta
bin.016.marker.fasta
bin.017.marker.fasta
bin.018.marker.fasta
bin.019.marker.fasta
bin.020.marker.fasta
bin.021.marker.fasta
bin.022.marker.fasta
bin.023.marker.fasta
bin.024.marker.fasta
bin.025.marker.fasta
bin.027.marker.fasta
bin.028.marker.fasta
bin.029.marker.fasta
bin.030.marker.fasta
bin.032.marker.fasta
bin.033.marker.fasta
bin.034.marker.fasta
bin.035.marker.fasta
bin.036.marker.fasta
bin.037.marker.fasta
bin.038.marker.fasta
bin.039.marker.fasta
bin.040.marker.fasta
bin.041.marker.fasta
bin.042.marker.fasta
bin.043.marker.fasta
bin.044.marker.fasta
bin.045.marker.fasta
bin.046.marker.fasta
bin.047.marker.fasta
bin.048.marker.fasta
bin.050.marker.fasta
bin.051.marker.fasta
bin.052.marker.fasta
bin.053.marker.fasta
bin.054.marker.fasta
bin.055.marker.fasta
bin.056.marker.fasta
bin.057.marker.fasta
bin.058.marker.fasta
bin.059.marker.fasta
bin.060.marker.fasta
bin.061.marker.fasta
bin.062.marker.fasta
bin.063.marker.fasta
bin.064.marker.fasta
bin.065.marker.fasta
bin.066.marker.fasta
bin.067.marker.fasta
bin.069.marker.fasta
bin.071.marker.fasta
bin.072.marker.fasta
bin.073.marker.fasta
bin.074.marker.fasta
bin.075.marker.fasta
bin.076.marker.fasta
bin.077.marker.fasta
bin.078.marker.fasta
bin.079.marker.fasta
bin.080.marker.fasta
bin.081.marker.fasta
bin.082.marker.fasta
bin.083.marker.fasta
bin.084.marker.fasta
bin.085.marker.fasta
bin.086.marker.fasta
bin.087.marker.fasta
bin.088.marker.fasta
bin.089.marker.fasta
bin.090.marker.fasta
bin.091.marker.fasta
bin.092.marker.fasta
bin.093.marker.fasta
bin.094.marker.fasta
bin.095.marker.fasta
bin.096.marker.fasta
bin.097.marker.fasta
bin.098.marker.fasta
bin.099.marker.fasta
bin.100.marker.fasta
bin.101.marker.fasta
bin.102.marker.fasta
bin.103.marker.fasta
bin.105.marker.fasta
bin.106.marker.fasta
bin.107.marker.fasta
bin.108.marker.fasta
bin.109.marker.fasta
bin.110.marker.fasta
bin.111.marker.fasta
bin.112.marker.fasta
bin.113.marker.fasta
bin.114.marker.fasta
bin.115.marker.fasta
bin.116.marker.fasta
bin.117.marker.fasta
bin.118.marker.fasta
bin.119.marker.fasta
bin.120.marker.fasta
bin.121.marker.fasta
bin.122.marker.fasta
bin.123.marker.fasta
bin.124.marker.fasta
bin.125.marker.fasta
bin.126.marker.fasta
bin.127.marker.fasta
bin.128.marker.fasta
bin.129.marker.fasta
bin.130.marker.fasta
bin.131.marker.fasta
bin.132.marker.fasta
bin.133.marker.fasta
bin.134.marker.fasta
bin.135.marker.fasta
bin.137.marker.fasta
bin.138.marker.fasta
bin.140.marker.fasta
bin.141.marker.fasta
bin.142.marker.fasta
bin.143.marker.fasta
bin.144.marker.fasta
bin.145.marker.fasta
bin.146.marker.fasta
bin.147.marker.fasta
bin.148.marker.fasta
bin.149.marker.fasta
bin.150.marker.fasta
bin.151.marker.fasta
bin.152.marker.fasta
bin.153.marker.fasta
bin.154.marker.fasta
bin.155.marker.fasta
bin.156.marker.fasta
bin.157.marker.fasta
bin.158.marker.fasta
bin.159.marker.fasta
bin.160.marker.fasta
bin.161.marker.fasta
bin.162.marker.fasta
bin.163.marker.fasta
bin.164.marker.fasta
bin.165.marker.fasta
bin.166.marker.fasta
bin.167.marker.fasta
bin.168.marker.fasta
bin.169.marker.fasta
bin.170.marker.fasta
bin.171.marker.fasta
bin.172.marker.fasta
bin.173.marker.fasta
bin.174.marker.fasta
bin.175.marker.fasta
bin.176.marker.fasta
bin.177.marker.fasta
bin.178.marker.fasta
bin.179.marker.fasta
bin.180.marker.fasta
bin.181.marker.fasta
bin.182.marker.fasta
bin.183.marker.fasta
bin.184.marker.fasta
bin.185.marker.fasta
bin.186.marker.fasta
bin.187.marker.fasta
bin.188.marker.fasta
bin.189.marker.fasta
bin.190.marker.fasta
bin.191.marker.fasta
bin.192.marker.fasta
bin.193.marker.fasta
bin.194.marker.fasta
bin.195.marker.fasta
bin.196.marker.fasta
bin.197.marker.fasta
bin.198.marker.fasta
bin.199.marker.fasta
bin.200.marker.fasta
bin.201.marker.fasta
bin.202.marker.fasta
bin.204.marker.fasta
bin.205.marker.fasta
bin.206.marker.fasta
bin.207.marker.fasta
bin.208.marker.fasta
bin.209.marker.fasta
bin.210.marker.fasta
bin.211.marker.fasta
bin.212.marker.fasta
bin.213.marker.fasta
bin.214.marker.fasta
bin.215.marker.fasta
bin.216.marker.fasta
bin.217.marker.fasta
bin.218.marker.fasta
bin.219.marker.fasta
bin.220.marker.fasta
bin.221.marker.fasta
bin.222.marker.fasta
bin.223.marker.fasta
bin.224.marker.fasta
bin.225.marker.fasta
bin.226.marker.fasta
bin.227.marker.fasta
bin.228.marker.fasta
bin.229.marker.fasta
bin.230.marker.fasta
bin.231.marker.fasta
bin.232.marker.fasta
bin.233.marker.fasta
bin.234.marker.fasta
bin.235.marker.fasta
bin.236.marker.fasta
bin.237.marker.fasta
bin.238.marker.fasta
bin.239.marker.fasta
bin.240.marker.fasta
bin.241.marker.fasta
bin.242.marker.fasta
bin.243.marker.fasta
bin.244.marker.fasta
bin.245.marker.fasta
bin.246.marker.fasta
bin.247.marker.fasta
bin.248.marker.fasta
bin.249.marker.fasta
bin.250.marker.fasta
bin.251.marker.fasta
bin.252.marker.fasta
bin.253.marker.fasta
bin.254.marker.fasta
bin.255.marker.fasta
bin.256.marker.fasta
bin.257.marker.fasta
bin.258.marker.fasta
bin.259.marker.fasta
bin.260.marker.fasta
bin.261.marker.fasta
bin.262.marker.fasta
bin.263.marker.fasta
bin.264.marker.fasta
bin.265.marker.fasta
bin.266.marker.fasta
bin.267.marker.fasta
bin.268.marker.fasta
bin.269.marker.fasta
bin.270.marker.fasta
bin.271.marker.fasta
bin.272.marker.fasta
bin.273.marker.fasta
bin.274.marker.fasta
bin.275.marker.fasta
bin.276.marker.fasta
bin.277.marker.fasta
bin.278.marker.fasta
bin.280.marker.fasta
bin.281.marker.fasta
bin.282.marker.fasta
bin.283.marker.fasta
bin.284.marker.fasta
bin.285.marker.fasta
bin.286.marker.fasta
bin.287.marker.fasta
bin.288.marker.fasta
bin.289.marker.fasta
bin.290.marker.fasta
bin.291.marker.fasta
bin.292.marker.fasta
bin.293.marker.fasta
bin.294.marker.fasta
bin.295.marker.fasta
bin.296.marker.fasta
bin.297.marker.fasta
bin.298.marker.fasta
bin.299.marker.fasta
bin.300.marker.fasta
bin.301.marker.fasta
bin.302.marker.fasta
bin.303.marker.fasta
bin.304.marker.fasta
bin.305.marker.fasta
bin.306.marker.fasta
bin.307.marker.fasta
bin.308.marker.fasta
bin.309.marker.fasta
bin.310.marker.fasta
bin.311.marker.fasta
bin.313.marker.fasta
bin.314.marker.fasta
bin.315.marker.fasta
bin.316.marker.fasta
bin.317.marker.fasta
bin.318.marker.fasta
bin.319.marker.fasta
bin.320.marker.fasta
bin.322.marker.fasta
bin.323.marker.fasta
bin.325.marker.fasta
bin.327.marker.fasta
bin.328.marker.fasta
bin.329.marker.fasta
bin.330.marker.fasta
bin.331.marker.fasta
Deleting intermediate files.


========== Job finished ==========
Yielded 332 bins for contig (scaffold) file ../data/Bins/work_files/assembly.fa

Here are the output files for this run.
Please refer to the README file for further details.

Summary file: ../data/Bins/work_files/maxbin2_out/bin.summary
Genome abundance info file: ../data/Bins/work_files/maxbin2_out/bin.abundance
Marker counts: ../data/Bins/work_files/maxbin2_out/bin.marker
Marker genes for each bin: ../data/Bins/work_files/maxbin2_out/bin.marker_of_each_gene.tar.gz
Bin files: ../data/Bins/work_files/maxbin2_out/bin.001.fasta - ../data/Bins/work_files/maxbin2_out/bin.332.fasta
Unbinned sequences: ../data/Bins/work_files/maxbin2_out/bin.noclass


========== Elapsed Time ==========
9 hours 31 minutes and 6 seconds.


------------------------------------------------------------------------------------------------------------------------
-----                              MaxBin2 finished successfully, and found 332 bins!                              -----
------------------------------------------------------------------------------------------------------------------------


########################################################################################################################
#####                                   BINNING PIPELINE SUCCESSFULLY FINISHED!!!                                  #####
########################################################################################################################

